<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DevGrep</name>
    </assembly>
    <members>
        <member name="T:DevGrep.Classes.Config.ApplicationData">
            <summary>
            Class ApplicationData
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Config.ApplicationData._appName">
            <summary>
            Application Name
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Config.ApplicationData._company">
            <summary>
            Company Name
            </summary>
        </member>
        <member name="M:DevGrep.Classes.Config.ApplicationData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DevGrep.Classes.Config.ApplicationData"/> class.
            </summary>
            <param name="company">The company.</param>
            <param name="appName">Name of the app.</param>
        </member>
        <member name="P:DevGrep.Classes.Config.ApplicationData.FolderPath">
            <summary>
            Gets the folder path.
            </summary>
            <value>The folder path.</value>
        </member>
        <member name="T:DevGrep.Classes.Config.ExtensionDetail">
            <summary>
            Class VerbDetail
            </summary>
        </member>
        <member name="M:DevGrep.Classes.Config.ExtensionDetail.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:VerbDetail"/> class.
            </summary>
            <param name="verb">The verb.</param>
            <param name="replaceWith">The replace with.</param>
        </member>
        <member name="P:DevGrep.Classes.Config.ExtensionDetail.Extension">
            <summary>
            Gets or sets the verb.
            </summary>
            <value>The verb.</value>
        </member>
        <member name="P:DevGrep.Classes.Config.ExtensionDetail.Group">
            <summary>
            Gets or sets the replace with.
            </summary>
            <value>The replace with.</value>
        </member>
        <member name="T:DevGrep.Classes.Config.ExtensionList">
            <summary>
            Class VerbList
            </summary>
        </member>
        <member name="M:DevGrep.Classes.Config.ExtensionList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:VerbList"/> class.
            </summary>
        </member>
        <member name="M:DevGrep.Classes.Config.ExtensionList.SanityCheck">
            <summary>
            Look for all items required by this class. 
            </summary>
        </member>
        <member name="M:DevGrep.Classes.Config.ExtensionList.CreateDefaultSaveFile">
            <summary>
            Populates this collection with default values.
            </summary>
        </member>
        <member name="M:DevGrep.Classes.Config.ExtensionList.IsExtensionInList(System.String)">
            <summary>
            Determines whether [is verb in list] [the specified verb].
            </summary>
            <param name="verb">The verb.</param>
            <returns><c>true</c> if [is verb in list] [the specified verb]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DevGrep.Classes.Config.ExtensionList.DoesSaveFileExist">
            <summary>
            Determines if a serialized copy of this collection is found in our config folder.
            </summary>
            <returns><c>true</c> if the file is found, <c>false</c> otherwise</returns>
        </member>
        <member name="P:DevGrep.Classes.Config.ExtensionList.FileVersion">
            <summary>
            Used for tracking version of the save file and so we know when the file should be upgraded.
            </summary>
        </member>
        <member name="P:DevGrep.Classes.Config.ExtensionList.SaveFileNamePath">
            <summary>
            Gets the save file name path.
            </summary>
            <value>The save file name path.</value>
        </member>
        <member name="T:DevGrep.Classes.Config.INIConfig">
            <summary>
            Class INIConfig
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Config.INIConfig._applicationName">
            <summary>
            The _application name
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Config.INIConfig._company">
            <summary>
            The _company
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Config.INIConfig.inFile">
            <summary>
            The in file
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Config.INIConfig._lastSearchType">
            <summary>
            The _document object literal
            </summary>
        </member>
        <member name="M:DevGrep.Classes.Config.INIConfig.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DevGrep.Classes.Config.INIConfig"/> class.
            </summary>
            <param name="company">The company.</param>
            <param name="applicationName">Name of the application.</param>
        </member>
        <member name="M:DevGrep.Classes.Config.INIConfig.EnsureFileExists">
            <summary>
            Ensures the file exists.
            </summary>
        </member>
        <member name="M:DevGrep.Classes.Config.INIConfig.Save">
            <summary>
            Saves all the current settings to the INI file.
            </summary>
        </member>
        <member name="M:DevGrep.Classes.Config.INIConfig.LoadValues">
            <summary>
            Loads the values.
            </summary>
        </member>
        <member name="M:DevGrep.Classes.Config.INIConfig.CheckDefaults">
            <summary>
            Checks the defaults for each setting and if a setting cannot be found or is empty - a default value is added..
            </summary>
        </member>
        <member name="M:DevGrep.Classes.Config.INIConfig.IfEmptyCreate(System.String,System.String,System.String)">
            <summary>
            Ifs the empty create.
            </summary>
            <param name="sectionName">Name of the section.</param>
            <param name="keyName">Name of the key.</param>
            <param name="keyValue">The key value.</param>
        </member>
        <member name="P:DevGrep.Classes.Config.INIConfig.LastSearchType">
            <summary>
            Gets or sets the document object literal.
            </summary>
            <value>The document object literal.</value>
        </member>
        <member name="P:DevGrep.Classes.Config.INIConfig.ConfigNamePath">
            <summary>
            Gets the config name path.
            </summary>
            <value>The config name path.</value>
        </member>
        <member name="T:DevGrep.Classes.Config.IniFile">
            <summary>
            Create a New INI file to store or load data
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Config.IniFile.path">
            <summary>
            The path
            </summary>
        </member>
        <member name="M:DevGrep.Classes.Config.IniFile.#ctor(System.String)">
            <summary>
            INIFile Constructor.
            </summary>
            <param name="INIPath">The INI path.</param>
            <PARAM name="INIPath"></PARAM>
        </member>
        <member name="M:DevGrep.Classes.Config.IniFile.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>
            Writes the private profile string.
            </summary>
            <param name="section">The section.</param>
            <param name="key">The key.</param>
            <param name="val">The val.</param>
            <param name="filePath">The file path.</param>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:DevGrep.Classes.Config.IniFile.GetPrivateProfileString(System.String,System.String,System.String,System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            Gets the private profile string.
            </summary>
            <param name="section">The section.</param>
            <param name="key">The key.</param>
            <param name="def">The def.</param>
            <param name="retVal">The ret val.</param>
            <param name="size">The size.</param>
            <param name="filePath">The file path.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:DevGrep.Classes.Config.IniFile.IniWriteValue(System.String,System.String,System.String)">
            <summary>
            Write Data to the INI File
            </summary>
            <param name="Section">The section.</param>
            <param name="Key">The key.</param>
            <param name="Value">The value.</param>
            <PARAM name="Section"></PARAM>
            Section name
            <PARAM name="Key"></PARAM>
            Key Name
            <PARAM name="Value"></PARAM>
            Value Name
        </member>
        <member name="M:DevGrep.Classes.Config.IniFile.IniReadValue(System.String,System.String)">
            <summary>
            Read Data Value From the Ini File
            </summary>
            <param name="Section">The section.</param>
            <param name="Key">The key.</param>
            <returns>System.String.</returns>
            <PARAM name="Section"></PARAM>
              <PARAM name="Key"></PARAM>
              <PARAM name="Path"></PARAM>
        </member>
        <member name="T:DevGrep.Classes.Crypt.AESCrypto">
            <summary>
            AES Encryption class
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.AESCrypto.SizeOfBuffer">
            <summary>
            The size of buffer
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.AESCrypto.DEFAULT_SALT">
            <summary>
            The DEFAUL t_ SALT
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.AESCrypto.DEFAULT_SECRET">
            <summary>
            The DEFAUL t_ SECRET
            </summary>
        </member>
        <member name="M:DevGrep.Classes.Crypt.AESCrypto.EncryptStringAES(System.String)">
            <summary>
            Encrypts a string with a default Key and Salt value.
            </summary>
            <param name="plainText">The plain text.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:DevGrep.Classes.Crypt.AESCrypto.EncryptStringAES(System.String,System.String)">
            <summary>
            Encrypts the string AES.
            </summary>
            <param name="plainText">The plain text.</param>
            <param name="sharedSecret">The shared secret.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:DevGrep.Classes.Crypt.AESCrypto.EncryptStringAES(System.String,System.String,System.Byte[])">
            <summary>
            Encrypts a string and returns a Base64 string object.
            </summary>
            <param name="plainText">The plain text.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="salt">The salt.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentNullException">sharedSecret</exception>
        </member>
        <member name="M:DevGrep.Classes.Crypt.AESCrypto.DecryptStringAES(System.String)">
            <summary>
            Decrypts a string using a default Key and Salt value.
            </summary>
            <param name="cipherText">The cipher text.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:DevGrep.Classes.Crypt.AESCrypto.DecryptStringAES(System.String,System.String)">
            <summary>
            Decrypts the string AES.
            </summary>
            <param name="cipherText">The cipher text.</param>
            <param name="sharedSecret">The shared secret.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:DevGrep.Classes.Crypt.AESCrypto.EncryptFile(System.String,System.String,System.String)">
            <summary>
            Encrypts the file.
            </summary>
            <param name="inputPath">The input path.</param>
            <param name="outputPath">The output path.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:DevGrep.Classes.Crypt.AESCrypto.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies the stream.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
        </member>
        <member name="M:DevGrep.Classes.Crypt.AESCrypto.DecryptFile(System.String,System.String,System.String)">
            <summary>
            Decrypts the file.
            </summary>
            <param name="inputPath">The input path.</param>
            <param name="outputPath">The output path.</param>
            <param name="password">The password.</param>
            <exception cref="T:System.IO.InvalidDataException">Please supply a correct password</exception>
        </member>
        <member name="M:DevGrep.Classes.Crypt.AESCrypto.DecryptStringAES(System.String,System.String,System.Byte[])">
            <summary>
            Decrypts a Base64 encode string object.
            </summary>
            <param name="cipherText">The cipher text.</param>
            <param name="sharedSecret">The shared secret.</param>
            <param name="salt">The salt.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentNullException">sharedSecret</exception>
        </member>
        <member name="T:DevGrep.Classes.Crypt.NativeWindowMethods">
            <summary>
            Class NativeWindowMethods
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_CLOSE_STORE_CHECK_FLAG">
            <summary>
            The CER t_ CLOS e_ STOR e_ CHEC k_ FLAG
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_CLOSE_STORE_FORCE_FLAG">
            <summary>
            The CER t_ CLOS e_ STOR e_ FORC e_ FLAG
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_COMPARE_ANY">
            <summary>
            The CER t_ COMPAR e_ ANY
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_COMPARE_ATTR">
            <summary>
            The CER t_ COMPAR e_ ATTR
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_COMPARE_CTL_USAGE">
            <summary>
            The CER t_ COMPAR e_ CT l_ USAGE
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_COMPARE_ENHKEY_USAGE">
            <summary>
            The CER t_ COMPAR e_ ENHKE y_ USAGE
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_COMPARE_HASH">
            <summary>
            The CER t_ COMPAR e_ HASH
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_COMPARE_KEY_SPEC">
            <summary>
            The CER t_ COMPAR e_ KE y_ SPEC
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_COMPARE_MASK">
            <summary>
            The CER t_ COMPAR e_ MASK
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_COMPARE_MD5_HASH">
            <summary>
            The CER t_ COMPAR e_ M D5_ HASH
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_COMPARE_NAME">
            <summary>
            The CER t_ COMPAR e_ NAME
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_COMPARE_NAME_STR_A">
            <summary>
            The CER t_ COMPAR e_ NAM e_ ST r_ A
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_COMPARE_NAME_STR_W">
            <summary>
            The CER t_ COMPAR e_ NAM e_ ST r_ W
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_COMPARE_PROPERTY">
            <summary>
            The CER t_ COMPAR e_ PROPERTY
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_COMPARE_PUBLIC_KEY">
            <summary>
            The CER t_ COMPAR e_ PUBLI c_ KEY
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_COMPARE_SHA1_HASH">
            <summary>
            The CER t_ COMPAR e_ SH a1_ HASH
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_COMPARE_SHIFT">
            <summary>
            The CER t_ COMPAR e_ SHIFT
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_FIND_ANY">
            <summary>
            The CER t_ FIN d_ ANY
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_FIND_ISSUER_STR">
            <summary>
            The CER t_ FIN d_ ISSUE r_ STR
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_FIND_ISSUER_STR_W">
            <summary>
            The CER t_ FIN d_ ISSUE r_ ST r_ W
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_INFO_EXTENSION_FLAG">
            <summary>
            The CER t_ INF o_ EXTENSIO n_ FLAG
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_INFO_ISSUER_FLAG">
            <summary>
            The CER t_ INF o_ ISSUE r_ FLAG
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_INFO_ISSUER_UNIQUE_ID_FLAG">
            <summary>
            The CER t_ INF o_ ISSUE r_ UNIQU e_ I d_ FLAG
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_INFO_NOT_AFTER_FLAG">
            <summary>
            The CER t_ INF o_ NO t_ AFTE r_ FLAG
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_INFO_NOT_BEFORE_FLAG">
            <summary>
            The CER t_ INF o_ NO t_ BEFOR e_ FLAG
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_INFO_SERIAL_NUMBER_FLAG">
            <summary>
            The CER t_ INF o_ SERIA l_ NUMBE r_ FLAG
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_INFO_SIGNATURE_ALGORITHM_FLAG">
            <summary>
            The CER t_ INF o_ SIGNATUR e_ ALGORITH m_ FLAG
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_INFO_SUBJECT_FLAG">
            <summary>
            The CER t_ INF o_ SUBJEC t_ FLAG
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_INFO_SUBJECT_PUBLIC_KEY_INFO_FLAG">
            <summary>
            The CER t_ INF o_ SUBJEC t_ PUBLI c_ KE y_ INF o_ FLAG
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_INFO_SUBJECT_UNIQUE_ID_FLAG">
            <summary>
            The CER t_ INF o_ SUBJEC t_ UNIQU e_ I d_ FLAG
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_INFO_VERSION_FLAG">
            <summary>
            The CER t_ INF o_ VERSIO n_ FLAG
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_STORE_NO_CRL_FLAG">
            <summary>
            The CER t_ STOR e_ N o_ CR l_ FLAG
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_STORE_NO_ISSUER_FLAG">
            <summary>
            The CER t_ STOR e_ N o_ ISSUE r_ FLAG
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_STORE_REVOCATION_FLAG">
            <summary>
            The CER t_ STOR e_ REVOCATIO n_ FLAG
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_STORE_SIGNATURE_FLAG">
            <summary>
            The CER t_ STOR e_ SIGNATUR e_ FLAG
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_STORE_TIME_VALIDITY_FLAG">
            <summary>
            The CER t_ STOR e_ TIM e_ VALIDIT y_ FLAG
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_V1">
            <summary>
            The CER t_ v1
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_V2">
            <summary>
            The CER t_ v2
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_V3">
            <summary>
            The CER t_ v3
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CRYPT_DECODE_NOCOPY_FLAG">
            <summary>
            The CRYP t_ DECOD e_ NOCOP y_ FLAG
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CRYPT_ENCODE_DECODE_NONE">
            <summary>
            The CRYP t_ ENCOD e_ DECOD e_ NONE
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.DRIVE_FIXED">
            <summary>
            The DRIV e_ FIXED
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.MAX_LANA">
            <summary>
            The MA x_ LANA
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.MY_ENCODING_TYPE">
            <summary>
            The M y_ ENCODIN g_ TYPE
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.NCBASTAT">
            <summary>
            The NCBASTAT
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.NCBENUM">
            <summary>
            The NCBENUM
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.NCBNAMSZ">
            <summary>
            The NCBNAMSZ
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.NCBRESET">
            <summary>
            The NCBRESET
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.NRC_GOODRET">
            <summary>
            The NR c_ GOODRET
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.PKCS_7_ASN_ENCODING">
            <summary>
            The PKC S_7_ AS n_ ENCODING
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.PKCS_ATTRIBUTE">
            <summary>
            The PKC s_ ATTRIBUTE
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.PKCS_CONTENT_INFO_SEQUENCE_OF_ANY">
            <summary>
            The PKC s_ CONTEN t_ INF o_ SEQUENC e_ O f_ ANY
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.PKCS_TIME_REQUEST">
            <summary>
            The PKC s_ TIM e_ REQUEST
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.PKCS_UTC_TIME">
            <summary>
            The PKC s_ UT c_ TIME
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.RSA_CSP_PUBLICKEYBLOB">
            <summary>
            The RS a_ CS p_ PUBLICKEYBLOB
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.X509_ALTERNATE_NAME">
            <summary>
            The X509_ ALTERNAT e_ NAME
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.X509_ANY_STRING">
            <summary>
            The X509_ AN y_ STRING
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.X509_ASN_ENCODING">
            <summary>
            The X509_ AS n_ ENCODING
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.X509_AUTHORITY_KEY_ID">
            <summary>
            The X509_ AUTHORIT y_ KE y_ ID
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.X509_BASIC_CONSTRAINTS">
            <summary>
            The X509_ BASI c_ CONSTRAINTS
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.X509_BASIC_CONSTRAINTS2">
            <summary>
            The X509_ BASI c_ CONSTRAINT s2
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.X509_BITS">
            <summary>
            The X509_ BITS
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.X509_CERT">
            <summary>
            The X509_ CERT
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.X509_CERT_CRL_TO_BE_SIGNED">
            <summary>
            The X509_ CER t_ CR l_ T o_ B e_ SIGNED
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.X509_CERT_POLICIES">
            <summary>
            The X509_ CER t_ POLICIES
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.X509_CERT_REQUEST_TO_BE_SIGNED">
            <summary>
            The X509_ CER t_ REQUES t_ T o_ B e_ SIGNED
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.X509_CERT_TO_BE_SIGNED">
            <summary>
            The X509_ CER t_ T o_ B e_ SIGNED
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.X509_CHOICE_OF_TIME">
            <summary>
            The X509_ CHOIC e_ O f_ TIME
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.X509_ENUMERATED">
            <summary>
            The X509_ ENUMERATED
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.X509_EXTENSIONS">
            <summary>
            The X509_ EXTENSIONS
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.X509_INTEGER">
            <summary>
            The X509_ INTEGER
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.X509_KEY_ATTRIBUTES">
            <summary>
            The X509_ KE y_ ATTRIBUTES
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.X509_KEY_USAGE">
            <summary>
            The X509_ KE y_ USAGE
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.X509_KEY_USAGE_RESTRICTION">
            <summary>
            The X509_ KE y_ USAG e_ RESTRICTION
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.X509_KEYGEN_REQUEST_TO_BE_SIGNED">
            <summary>
            The X509_ KEYGE n_ REQUES t_ T o_ B e_ SIGNED
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.X509_MULTI_BYTE_INTEGER">
            <summary>
            The X509_ MULT i_ BYT e_ INTEGER
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.X509_NAME">
            <summary>
            The X509_ NAME
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.X509_NAME_VALUE">
            <summary>
            The X509_ NAM e_ VALUE
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.X509_OCTET_STRING">
            <summary>
            The X509_ OCTE t_ STRING
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.X509_PUBLIC_KEY_INFO">
            <summary>
            The X509_ PUBLI c_ KE y_ INFO
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.X509_UNICODE_ANY_STRING">
            <summary>
            The X509_ UNICOD e_ AN y_ STRING
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.X509_UNICODE_NAME">
            <summary>
            The X509_ UNICOD e_ NAME
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.X509_UNICODE_NAME_VALUE">
            <summary>
            The X509_ UNICOD e_ NAM e_ VALUE
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.PublicKey">
            <summary>
            The public key
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.PublicKeySize">
            <summary>
            The public key size
            </summary>
        </member>
        <member name="M:DevGrep.Classes.Crypt.NativeWindowMethods.CertCloseStore(System.IntPtr,System.UInt32)">
            <summary>
            Certs the close store.
            </summary>
            <param name="hCertStore">The h cert store.</param>
            <param name="dwFlags">The dw flags.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.Crypt.NativeWindowMethods.CertFindCertificateInStore(System.IntPtr,System.UInt32,System.UInt32,System.UInt32,System.String,System.IntPtr)">
            <summary>
            Certs the find certificate in store.
            </summary>
            <param name="hCertStore">The h cert store.</param>
            <param name="dwCertEncodingType">Type of the dw cert encoding.</param>
            <param name="dwFindFlags">The dw find flags.</param>
            <param name="dwFindType">Type of the dw find.</param>
            <param name="pvFindPara">The pv find para.</param>
            <param name="pPrevCertContext">The p prev cert context.</param>
            <returns>IntPtr.</returns>
        </member>
        <member name="M:DevGrep.Classes.Crypt.NativeWindowMethods.CertFindExtension(System.String,System.UInt32,System.IntPtr)">
            <summary>
            Certs the find extension.
            </summary>
            <param name="pszObjId">The PSZ obj id.</param>
            <param name="cExtensions">The c extensions.</param>
            <param name="rgExtensions">The rg extensions.</param>
            <returns>IntPtr.</returns>
        </member>
        <member name="M:DevGrep.Classes.Crypt.NativeWindowMethods.CertFreeCertificateContext(System.IntPtr)">
            <summary>
            Certs the free certificate context.
            </summary>
            <param name="pCertContext">The p cert context.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.Crypt.NativeWindowMethods.CertGetIssuerCertificateFromStore(System.IntPtr,System.IntPtr,System.IntPtr,System.UInt32@)">
            <summary>
            Certs the get issuer certificate from store.
            </summary>
            <param name="hCertStore">The h cert store.</param>
            <param name="pSubjectContext">The p subject context.</param>
            <param name="pPrevIssuerContext">The p prev issuer context.</param>
            <param name="pdwFlags">The PDW flags.</param>
            <returns>IntPtr.</returns>
        </member>
        <member name="M:DevGrep.Classes.Crypt.NativeWindowMethods.CertOpenSystemStoreA(System.UInt32,System.String)">
            <summary>
            Certs the open system store A.
            </summary>
            <param name="hProv">The h prov.</param>
            <param name="szSubsystemProtocol">The sz subsystem protocol.</param>
            <returns>IntPtr.</returns>
        </member>
        <member name="M:DevGrep.Classes.Crypt.NativeWindowMethods.CertVerifySubjectCertificateContext(System.IntPtr,System.IntPtr,System.UInt32@)">
            <summary>
            Certs the verify subject certificate context.
            </summary>
            <param name="pSubject">The p subject.</param>
            <param name="pIssuer">The p issuer.</param>
            <param name="pdwFlags">The PDW flags.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.Crypt.NativeWindowMethods.CryptDecodeObject(System.UInt32,System.Char,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr,System.UInt32@)">
            <summary>
            Crypts the decode object.
            </summary>
            <param name="dwCertEncodingType">Type of the dw cert encoding.</param>
            <param name="lpszStructType">Type of the LPSZ struct.</param>
            <param name="pbEncoded">The pb encoded.</param>
            <param name="cbEncoded">The cb encoded.</param>
            <param name="dwFlags">The dw flags.</param>
            <param name="pvStructInfo">The pv struct info.</param>
            <param name="pcbStructInfo">The PCB struct info.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.Crypt.NativeWindowMethods.GetDriveTypeA(System.String)">
            <summary>
            Gets the drive type A.
            </summary>
            <param name="nDrive">The n drive.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:DevGrep.Classes.Crypt.NativeWindowMethods.GetVolumeInformationA(System.String,System.String,System.UInt32,System.UInt32@,System.UInt32,System.UInt32,System.String,System.UInt32)">
            <summary>
            Gets the volume information A.
            </summary>
            <param name="lpRootPathName">Name of the lp root path.</param>
            <param name="lpVolumneNameBuffer">The lp volumne name buffer.</param>
            <param name="nVolumeNameSize">Size of the n volume name.</param>
            <param name="lpVolumeSerialNumber">The lp volume serial number.</param>
            <param name="lpMaximumComponentLength">Length of the lp maximum component.</param>
            <param name="lpFileSystemFlags">The lp file system flags.</param>
            <param name="lpFileSystemNameBuffer">The lp file system name buffer.</param>
            <param name="nFileSystemNameSize">Size of the n file system name.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:DevGrep.Classes.Crypt.NativeWindowMethods.Netbios(DevGrep.Classes.Crypt.NativeWindowMethods.NCB@)">
            <summary>
            Netbioses the specified PNCB.
            </summary>
            <param name="pncb">The PNCB.</param>
            <returns>System.Byte.</returns>
        </member>
        <member name="T:DevGrep.Classes.Crypt.NativeWindowMethods.ADAPTER_STATUS">
            <summary>
            Struct ADAPTER_STATUS
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.ADAPTER_STATUS.adapter_address">
            <summary>
            The adapter_address
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.ADAPTER_STATUS.rev_major">
            <summary>
            The rev_major
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.ADAPTER_STATUS.reserved0">
            <summary>
            The reserved0
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.ADAPTER_STATUS.adapter_type">
            <summary>
            The adapter_type
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.ADAPTER_STATUS.rev_minor">
            <summary>
            The rev_minor
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.ADAPTER_STATUS.duration">
            <summary>
            The duration
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.ADAPTER_STATUS.frmr_recv">
            <summary>
            The frmr_recv
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.ADAPTER_STATUS.frmr_xmit">
            <summary>
            The frmr_xmit
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.ADAPTER_STATUS.iframe_recv_err">
            <summary>
            The iframe_recv_err
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.ADAPTER_STATUS.xmit_aborts">
            <summary>
            The xmit_aborts
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.ADAPTER_STATUS.xmit_success">
            <summary>
            The xmit_success
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.ADAPTER_STATUS.recv_success">
            <summary>
            The recv_success
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.ADAPTER_STATUS.iframe_xmit_err">
            <summary>
            The iframe_xmit_err
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.ADAPTER_STATUS.recv_buff_unavail">
            <summary>
            The recv_buff_unavail
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.ADAPTER_STATUS.t1_timeouts">
            <summary>
            The t1_timeouts
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.ADAPTER_STATUS.ti_timeouts">
            <summary>
            The ti_timeouts
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.ADAPTER_STATUS.reserved1">
            <summary>
            The reserved1
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.ADAPTER_STATUS.free_ncbs">
            <summary>
            The free_ncbs
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.ADAPTER_STATUS.max_cfg_ncbs">
            <summary>
            The max_cfg_ncbs
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.ADAPTER_STATUS.max_ncbs">
            <summary>
            The max_ncbs
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.ADAPTER_STATUS.xmit_buf_unavail">
            <summary>
            The xmit_buf_unavail
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.ADAPTER_STATUS.max_dgram_size">
            <summary>
            The max_dgram_size
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.ADAPTER_STATUS.pending_sess">
            <summary>
            The pending_sess
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.ADAPTER_STATUS.max_cfg_sess">
            <summary>
            The max_cfg_sess
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.ADAPTER_STATUS.max_sess">
            <summary>
            The max_sess
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.ADAPTER_STATUS.max_sess_pkt_size">
            <summary>
            The max_sess_pkt_size
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.ADAPTER_STATUS.name_count">
            <summary>
            The name_count
            </summary>
        </member>
        <member name="M:DevGrep.Classes.Crypt.NativeWindowMethods.ADAPTER_STATUS.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="T:DevGrep.Classes.Crypt.NativeWindowMethods.ASTAT">
            <summary>
            Struct ASTAT
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.ASTAT.adapt">
            <summary>
            The adapt
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.ASTAT.NameBuff">
            <summary>
            The name buff
            </summary>
        </member>
        <member name="M:DevGrep.Classes.Crypt.NativeWindowMethods.ASTAT.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="T:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_CONTEXT">
            <summary>
            Struct CERT_CONTEXT
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_CONTEXT.dwCertEncodingType">
            <summary>
            The dw cert encoding type
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_CONTEXT.pbCertEncoded">
            <summary>
            The pb cert encoded
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_CONTEXT.cbCertEncoded">
            <summary>
            The cb cert encoded
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_CONTEXT.pCertInfo">
            <summary>
            The p cert info
            </summary>
        </member>
        <member name="T:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_EXTENSION">
            <summary>
            Struct CERT_EXTENSION
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_EXTENSION.pszObjId">
            <summary>
            The PSZ obj id
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_EXTENSION.fCritical">
            <summary>
            The f critical
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_EXTENSION.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="T:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_INFO">
            <summary>
            Struct CERT_INFO
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_INFO.dwVersion">
            <summary>
            The dw version
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_INFO.SerialNumber">
            <summary>
            The serial number
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_INFO.SignatureAlgorithm">
            <summary>
            The signature algorithm
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_INFO.Issuer">
            <summary>
            The issuer
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_INFO.NotBefore">
            <summary>
            The not before
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_INFO.NotAfter">
            <summary>
            The not after
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_INFO.Subject">
            <summary>
            The subject
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_INFO.SubjectPublicKeyInfo">
            <summary>
            The subject public key info
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_INFO.IssuerUniqueId">
            <summary>
            The issuer unique id
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_INFO.SubjectUniqueId">
            <summary>
            The subject unique id
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_INFO.cExtension">
            <summary>
            The c extension
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_INFO.rgExtension">
            <summary>
            The rg extension
            </summary>
        </member>
        <member name="T:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_NAME_VALUE">
            <summary>
            Struct CERT_NAME_VALUE
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_NAME_VALUE.dwValueType">
            <summary>
            The dw value type
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_NAME_VALUE.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="T:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_PUBLIC_KEY_INFO">
            <summary>
            Struct CERT_PUBLIC_KEY_INFO
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_PUBLIC_KEY_INFO.Algorithm">
            <summary>
            The algorithm
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CERT_PUBLIC_KEY_INFO.PublicKey">
            <summary>
            The public key
            </summary>
        </member>
        <member name="T:DevGrep.Classes.Crypt.NativeWindowMethods.CRYPTOAPI_BLOB">
            <summary>
            Struct CRYPTOAPI_BLOB
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CRYPTOAPI_BLOB.cbData">
            <summary>
            The cb data
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CRYPTOAPI_BLOB.pbData">
            <summary>
            The pb data
            </summary>
        </member>
        <member name="T:DevGrep.Classes.Crypt.NativeWindowMethods.CRYPT_ALGORITHM_IDENTIFIER">
            <summary>
            Struct CRYPT_ALGORITHM_IDENTIFIER
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CRYPT_ALGORITHM_IDENTIFIER.pszObjId">
            <summary>
            The PSZ obj id
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CRYPT_ALGORITHM_IDENTIFIER.Parameters">
            <summary>
            The parameters
            </summary>
        </member>
        <member name="T:DevGrep.Classes.Crypt.NativeWindowMethods.CRYPT_BIT_BLOB">
            <summary>
            Struct CRYPT_BIT_BLOB
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CRYPT_BIT_BLOB.cbData">
            <summary>
            The cb data
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CRYPT_BIT_BLOB.pbData">
            <summary>
            The pb data
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.CRYPT_BIT_BLOB.cUnusedBits">
            <summary>
            The c unused bits
            </summary>
        </member>
        <member name="T:DevGrep.Classes.Crypt.NativeWindowMethods.FILETIME">
            <summary>
            Struct FILETIME
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.FILETIME.dwLowDateTime">
            <summary>
            The dw low date time
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.FILETIME.dwHighDateTime">
            <summary>
            The dw high date time
            </summary>
        </member>
        <member name="T:DevGrep.Classes.Crypt.NativeWindowMethods.LANA_ENUM">
            <summary>
            Struct LANA_ENUM
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.LANA_ENUM.length">
            <summary>
            The length
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.LANA_ENUM.lana">
            <summary>
            The lana
            </summary>
        </member>
        <member name="T:DevGrep.Classes.Crypt.NativeWindowMethods.NAME_BUFFER">
            <summary>
            Struct NAME_BUFFER
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.NAME_BUFFER.name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.NAME_BUFFER.name_num">
            <summary>
            The name_num
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.NAME_BUFFER.name_flags">
            <summary>
            The name_flags
            </summary>
        </member>
        <member name="M:DevGrep.Classes.Crypt.NativeWindowMethods.NAME_BUFFER.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="T:DevGrep.Classes.Crypt.NativeWindowMethods.NCB">
            <summary>
            Struct NCB
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.NCB.ncb_command">
            <summary>
            The ncb_command
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.NCB.ncb_retcode">
            <summary>
            The ncb_retcode
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.NCB.ncb_lsn">
            <summary>
            The NCB_LSN
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.NCB.ncb_num">
            <summary>
            The ncb_num
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.NCB.ncb_buffer">
            <summary>
            The ncb_buffer
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.NCB.ncb_length">
            <summary>
            The ncb_length
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.NCB.ncb_callname">
            <summary>
            The ncb_callname
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.NCB.ncb_name">
            <summary>
            The ncb_name
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.NCB.ncb_rto">
            <summary>
            The ncb_rto
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.NCB.ncb_sto">
            <summary>
            The ncb_sto
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.NCB.ncb_post">
            <summary>
            The ncb_post
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.NCB.ncb_lana_num">
            <summary>
            The ncb_lana_num
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.NCB.ncb_cmd_cplt">
            <summary>
            The NCB_CMD_CPLT
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.NCB.ncb_reserve">
            <summary>
            The ncb_reserve
            </summary>
        </member>
        <member name="F:DevGrep.Classes.Crypt.NativeWindowMethods.NCB.ncb_event">
            <summary>
            The ncb_event
            </summary>
        </member>
        <member name="M:DevGrep.Classes.Crypt.NativeWindowMethods.NCB.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="T:DevGrep.Classes.DataTypes.Comparison.GenericComparer`1">
            <summary>
            Generic IComparable class
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.Comparison.GenericComparer`1.Compare(`0,`0)">
            <summary>
            Compares the two objects
            </summary>
            <param name="x">Object 1</param>
            <param name="y">Object 2</param>
            <returns>0 if they're equal, any other value they are not</returns>
        </member>
        <member name="T:DevGrep.Classes.DataTypes.Comparison.GenericEqualityComparer`1">
            <summary>
            Generic equality comparer
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.Comparison.GenericEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Determines if the two items are equal
            </summary>
            <param name="x">Object 1</param>
            <param name="y">Object 2</param>
            <returns>True if they are, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.Comparison.GenericEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Get hash code
            </summary>
            <param name="obj">Object to get the hash code of</param>
            <returns>The object's hash code</returns>
        </member>
        <member name="T:DevGrep.Classes.DataTypes.ExtensionMethods.ArrayExtensions">
            <summary>
            Array extensions
            </summary>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ArrayExtensions.Clear(System.Array)">
            <summary>
            Clears the array completely
            </summary>
            <param name="Array">Array to clear</param>
            <returns>The final array</returns>
            <example>
            <code>
             int[] TestObject = new int[] { 1, 2, 3, 4, 5, 6 };
             TestObject.Clear();
            </code>
            </example>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ArrayExtensions.Clear``1(``0[])">
            <summary>
            Clears the array completely
            </summary>
            <param name="Array">Array to clear</param>
            <typeparam name="ArrayType">Array type</typeparam>
            <returns>The final array</returns>
            <example>
            <code>
             int[] TestObject = new int[] { 1, 2, 3, 4, 5, 6 };
             TestObject.Clear();
            </code>
            </example>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ArrayExtensions.Combine``1(``0[],``0[][])">
            <summary>
            Combines two arrays and returns a new array containing both values
            </summary>
            <typeparam name="ArrayType">Type of the data in the array</typeparam>
            <param name="Array1">Array 1</param>
            <param name="Array2">Array 2</param>
            <returns>A new array containing both arrays' values</returns>
            <example>
            <code>
             int[] TestObject1 = new int[] { 1, 2, 3 };
             int[] TestObject2 = new int[] { 4, 5, 6 };
             int[] TestObject3 = new int[] { 7, 8, 9 };
             TestObject1 = TestObject1.Combine(TestObject2, TestObject3);
            </code>
            </example>
        </member>
        <member name="T:DevGrep.Classes.DataTypes.ExtensionMethods.DateTimeExtensions">
            <summary>
            DateTime extension methods
            </summary>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DateTimeExtensions.AddWeeks(System.DateTime,System.Int32)">
            <summary>
            Adds the number of weeks to the date
            </summary>
            <param name="Date">Date input</param>
            <param name="NumberOfWeeks">Number of weeks to add</param>
            <returns>The date after the number of weeks are added</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DateTimeExtensions.Age(System.DateTime,System.DateTime)">
            <summary>
            Calculates age based on date supplied
            </summary>
            <param name="Date">Birth date</param>
            <param name="CalculateFrom">Date to calculate from</param>
            <returns>The total age in years</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DateTimeExtensions.ConvertToTimeZone(System.DateTime,System.TimeZoneInfo)">
            <summary>
            Converts a DateTime to a specific time zone
            </summary>
            <param name="Date">DateTime to convert</param>
            <param name="TimeZone">Time zone to convert to</param>
            <returns>The converted DateTime</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DateTimeExtensions.DaysInMonth(System.DateTime)">
            <summary>
            Returns the number of days in the month
            </summary>
            <param name="Date">Date to get the month from</param>
            <returns>The number of days in the month</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DateTimeExtensions.DaysLeftInMonth(System.DateTime)">
            <summary>
            Gets the number of days left in the month based on the date passed in
            </summary>
            <param name="Date">The date to check against</param>
            <returns>The number of days left in a month</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DateTimeExtensions.DaysLeftInYear(System.DateTime)">
            <summary>
            Gets the number of days left in a year based on the date passed in
            </summary>
            <param name="Date">The date to check against</param>
            <returns>The number of days left in a year</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DateTimeExtensions.DaysLeftInWeek(System.DateTime)">
            <summary>
            Gets the number of days left in a week
            </summary>
            <param name="Date">The date to check against</param>
            <returns>The number of days left in a week</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DateTimeExtensions.EndOfDay(System.DateTime)">
            <summary>
            Returns the end of the day
            </summary>
            <param name="Input">Input date</param>
            <returns>The end of the day</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DateTimeExtensions.FirstDayOfMonth(System.DateTime)">
            <summary>
            Returns the first day of a month based on the date sent in
            </summary>
            <param name="Date">Date to get the first day of the month from</param>
            <returns>The first day of the month</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DateTimeExtensions.FirstDayOfQuarter(System.DateTime,System.DateTime)">
            <summary>
            Returns the first day of a quarter based on the date sent in
            </summary>
            <param name="Date">Date to get the first day of the quarter from</param>
            <param name="Quarter1Start">Beginning of the first quarter (defaults to the beginning of the year)</param>
            <returns>The first day of the quarter</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DateTimeExtensions.FirstDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Returns the first day of a week based on the date sent in
            </summary>
            <param name="Date">Date to get the first day of the week from</param>
            <param name="CultureInfo">The culture to use (defaults to current culture)</param>
            <returns>The first day of the week</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DateTimeExtensions.FirstDayOfYear(System.DateTime)">
            <summary>
            Returns the first day of a year based on the date sent in
            </summary>
            <param name="Date">Date to get the first day of the year from</param>
            <returns>The first day of the year</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DateTimeExtensions.FromUnixTime(System.Int32)">
            <summary>
            Returns the Unix based date as a DateTime object
            </summary>
            <param name="Date">Unix date to convert</param>
            <returns>The Unix Date in DateTime format</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DateTimeExtensions.FromUnixTime(System.Int64)">
            <summary>
            Returns the Unix based date as a DateTime object
            </summary>
            <param name="Date">Unix date to convert</param>
            <returns>The Unix Date in DateTime format</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DateTimeExtensions.IsInFuture(System.DateTime)">
            <summary>
            Determines if the date is some time in the future
            </summary>
            <param name="Date">Date to check</param>
            <returns>True if it is, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DateTimeExtensions.IsInPast(System.DateTime)">
            <summary>
            Determines if the date is some time in the past
            </summary>
            <param name="Date">Date to check</param>
            <returns>True if it is, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DateTimeExtensions.IsToday(System.DateTime)">
            <summary>
            Is this today?
            </summary>
            <param name="Date">Date to check</param>
            <returns>True if it is, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DateTimeExtensions.IsWeekDay(System.DateTime)">
            <summary>
            Determines if this is a week day
            </summary>
            <param name="Date">Date to check against</param>
            <returns>Whether this is a week day or not</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DateTimeExtensions.IsWeekEnd(System.DateTime)">
            <summary>
            Determines if this is a week end
            </summary>
            <param name="Date">Date to check against</param>
            <returns>Whether this is a week end or not</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DateTimeExtensions.LastDayOfMonth(System.DateTime)">
            <summary>
            Returns the last day of the month based on the date sent in
            </summary>
            <param name="Date">Date to get the last day from</param>
            <returns>The last day of the month</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DateTimeExtensions.LastDayOfQuarter(System.DateTime,System.DateTime)">
            <summary>
            Returns the last day of a quarter based on the date sent in
            </summary>
            <param name="Date">Date to get the last day of the quarter from</param>
            <param name="Quarter1Start">Beginning of the first quarter (defaults to the beginning of the year)</param>
            <returns>The last day of the quarter</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DateTimeExtensions.LastDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Returns the last day of a week based on the date sent in
            </summary>
            <param name="Date">Date to get the last day of the week from</param>
            <param name="CultureInfo">The culture to use (defaults to current culture)</param>
            <returns>The last day of the week</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DateTimeExtensions.LastDayOfYear(System.DateTime)">
            <summary>
            Returns the last day of the year based on the date sent in
            </summary>
            <param name="Date">Date to get the last day from</param>
            <returns>The last day of the year</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DateTimeExtensions.LocalTimeZone(System.DateTime)">
            <summary>
            Gets the local time zone
            </summary>
            <param name="Date">Date object</param>
            <returns>The local time zone</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DateTimeExtensions.RelativeTime(System.DateTime,System.DateTime)">
            <summary>
            Converts the DateTime object to string describing, relatively how long ago or how far in the future
            the input is based off of another DateTime object specified.
            ex: 
            Input=March 21, 2013
            Epoch=March 22, 2013
            returns "1 day ago"
            Input=March 22, 2013
            Epoch=March 21, 2013
            returns "1 day from now"
            </summary>
            <param name="Input">Input</param>
            <param name="Epoch">DateTime object that the input is comparred to</param>
            <returns>The difference between the input and epoch expressed as a string</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DateTimeExtensions.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the time portion of a specific date
            </summary>
            <param name="Date">Date input</param>
            <param name="Hour">Hour to set</param>
            <param name="Minutes">Minutes to set</param>
            <param name="Seconds">Seconds to set</param>
            <returns>Sets the time portion of the specified date</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DateTimeExtensions.SetTime(System.DateTime,System.TimeSpan)">
            <summary>
            Sets the time portion of a specific date
            </summary>
            <param name="Date">Date input</param>
            <param name="Time">Time to set</param>
            <returns>Sets the time portion of the specified date</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DateTimeExtensions.ToUnix(System.DateTime)">
            <summary>
            Returns the date in Unix format
            </summary>
            <param name="Date">Date to convert</param>
            <returns>The date in Unix format</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DateTimeExtensions.UTCOffset(System.DateTime)">
            <summary>
            Gets the UTC offset
            </summary>
            <param name="Date">Date to get the offset of</param>
            <returns>UTC offset</returns>
        </member>
        <member name="T:DevGrep.Classes.DataTypes.ExtensionMethods.DelegateExtensions">
            <summary>
            Extensions for Func, Action, and EventHandler
            </summary>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DelegateExtensions.Async(System.Action)">
            <summary>
            Runs an action async
            </summary>
            <param name="Action">Action to run</param>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DelegateExtensions.Raise``1(System.Action{``0},``0)">
            <summary>
            Safely calls the specified action
            </summary>
            <typeparam name="T">The type of the event args</typeparam>
            <param name="Delegate">The delegate</param>
            <param name="EventArgs">The event args</param>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DelegateExtensions.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Safely raises the event
            </summary>
            <typeparam name="T">The type of the event args</typeparam>
            <param name="Delegate">The delegate</param>
            <param name="Sender">The sender</param>
            <param name="EventArg">The event args</param>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.DelegateExtensions.Raise``2(System.Func{``0,``1},``0)">
            <summary>
            Safely calls the Func
            </summary>
            <typeparam name="T1">The event arg type</typeparam>
            <typeparam name="T2">The return type</typeparam>
            <param name="Delegate">The delegate</param>
            <param name="EventArgs">The event args</param>
            <returns>The value returned by the function</returns>
        </member>
        <member name="T:DevGrep.Classes.DataTypes.ExtensionMethods.ExceptionExtensions">
            <summary>
            Class for housing exception specific extensions
            </summary>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ExceptionExtensions.ToString(System.Exception,System.String,System.String)">
            <summary>
            Converts the exception to a string and appends the specified prefix/suffix (used for logging)
            </summary>
            <param name="Exception">Exception to convert</param>
            <param name="Prefix">Prefix</param>
            <param name="Suffix">Suffix</param>
            <returns>The exception as a string</returns>
        </member>
        <member name="T:DevGrep.Classes.DataTypes.ExtensionMethods.GenericObjectExtensions">
            <summary>
            Generic extensions dealing with objects
            </summary>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.GenericObjectExtensions.Chain``1(``0,System.Action{``0},``0)">
            <summary>
            Allows actions to be chained together with the caveat that if Object is null,
            it is replaced with the DefaultObjectValue specified.
            If the Action or Object (once replaced with the default object value) is null, it will return the object.
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <param name="Object">Object to run the action on</param>
            <param name="Action">Action to run</param>
            <param name="DefaultObjectValue">Default object value</param>
            <returns>The original object</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.GenericObjectExtensions.Chain``2(``0,System.Func{``0,``1},``1,``0)">
            <summary>
            Allows actions to be chained together. It also has a couple of checks in there:
            1) If the function is null, it returns the default return value specified.
            2) If the object is null, it will replace it with the default object value specified.
            3) If the object, once replaced with the default object value specified, is null, it will return the default return value specified.
            4) If the return value from the function is null, it returns the default return value specified.
            </summary>
            <typeparam name="T">The type of the object</typeparam>
            <typeparam name="R">Return type</typeparam>
            <param name="Object">Object to run the action on</param>
            <param name="Function">Function to run</param>
            <param name="DefaultObjectValue">Default object value</param>
            <param name="DefaultReturnValue">Default return value</param>
            <returns>The result from the function</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.GenericObjectExtensions.Execute``1(System.Func{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Executes a function, repeating it a number of times in case it fails
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="Function">Function to run</param>
            <param name="Attempts">Number of times to attempt it</param>
            <param name="RetryDelay">The amount of milliseconds to wait between tries</param>
            <param name="TimeOut">Max amount of time to wait for the function to run (waits for the current attempt to finish before checking)</param>
            <returns>The returned value from the function</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.GenericObjectExtensions.Execute(System.Action,System.Int32,System.Int32,System.Int32)">
            <summary>
            Executes an action, repeating it a number of times in case it fails
            </summary>
            <param name="Action">Action to run</param>
            <param name="Attempts">Number of times to attempt it</param>
            <param name="RetryDelay">The amount of milliseconds to wait between tries</param>
            <param name="TimeOut">Max amount of time to wait for the function to run (waits for the current attempt to finish before checking)</param>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.GenericObjectExtensions.If``1(``0,System.Predicate{``0},``0)">
            <summary>
            Determines if the object fullfills the predicate and if it does, returns itself. Otherwise the default value.
            If the predicate is null, it returns the default value.
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="Object">Object to check</param>
            <param name="Predicate">Predicate to run on the object</param>
            <param name="DefaultValue">Default value to return if it does not succeed the predicate test</param>
            <returns>The original value if predicate is true, the default value otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.GenericObjectExtensions.NotIf``1(``0,System.Predicate{``0},``0)">
            <summary>
            Determines if the object fails the predicate and if it does, returns itself. Otherwise the default value.
            If the predicate is null, it returns the default value.
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="Object">Object to check</param>
            <param name="Predicate">Predicate to run on the object</param>
            <param name="DefaultValue">Default value to return if it succeeds the predicate test</param>
            <returns>The original value if predicate is false, the default value otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.GenericObjectExtensions.ThrowIfTrue``1(``0,System.Predicate{``0},System.Exception)">
            <summary>
            Throws the specified exception if the predicate is true for the item
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="Item">The item</param>
            <param name="Predicate">Predicate to check</param>
            <param name="Exception">Exception to throw if predicate is true</param>
            <returns>the original Item</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.GenericObjectExtensions.ThrowIfFalse``1(``0,System.Predicate{``0},System.Exception)">
            <summary>
            Throws the specified exception if the predicate is false for the item
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="Item">The item</param>
            <param name="Predicate">Predicate to check</param>
            <param name="Exception">Exception to throw if predicate is false</param>
            <returns>the original Item</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.GenericObjectExtensions.Times``1(System.Int32,System.Func{System.Int32,``0})">
            <summary>
            Runs a function based on the number of times specified and returns the results
            </summary>
            <typeparam name="T">Type that gets returned</typeparam>
            <param name="Count">Number of times the function should run</param>
            <param name="Function">The function that should run</param>
            <returns>The results from the function</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.GenericObjectExtensions.Times(System.Int32,System.Action{System.Int32})">
            <summary>
            Runs an action based on the number of times specified
            </summary>
            <param name="Count">Number of times to run the action</param>
            <param name="Action">Action to run</param>
        </member>
        <member name="T:DevGrep.Classes.DataTypes.ExtensionMethods.ICollectionExtensions">
            <summary>
            ICollection extensions
            </summary>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ICollectionExtensions.Add``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a list of items to the collection
            </summary>
            <typeparam name="T">The type of the items in the collection</typeparam>
            <param name="Collection">Collection</param>
            <param name="Items">Items to add</param>
            <returns>The collection with the added items</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ICollectionExtensions.Add``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
            Adds a list of items to the collection
            </summary>
            <typeparam name="T">The type of the items in the collection</typeparam>
            <param name="Collection">Collection</param>
            <param name="Items">Items to add</param>
            <returns>The collection with the added items</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ICollectionExtensions.AddAndReturn``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Adds an item to a list and returns the item
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="Collection">Collection to add to</param>
            <param name="Item">Item to add to the collection</param>
            <returns>The original item</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ICollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},System.Predicate{``0},``0[])">
            <summary>
            Adds items to the collection if it passes the predicate test
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="Collection">Collection to add to</param>
            <param name="Items">Items to add to the collection</param>
            <param name="Predicate">Predicate that an item needs to satisfy in order to be added</param>
            <returns>True if any are added, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ICollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},System.Predicate{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds an item to the collection if it isn't already in the collection
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="Collection">Collection to add to</param>
            <param name="Items">Items to add to the collection</param>
            <param name="Predicate">Predicate that an item needs to satisfy in order to be added</param>
            <returns>True if it is added, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ICollectionExtensions.AddIfUnique``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
            Adds an item to the collection if it isn't already in the collection
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="Collection">Collection to add to</param>
            <param name="Items">Items to add to the collection</param>
            <returns>True if it is added, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ICollectionExtensions.AddIfUnique``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds an item to the collection if it isn't already in the collection
            </summary>
            <typeparam name="T">Collection type</typeparam>
            <param name="Collection">Collection to add to</param>
            <param name="Items">Items to add to the collection</param>
            <returns>True if it is added, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ICollectionExtensions.Remove``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes all items that fit the predicate passed in
            </summary>
            <typeparam name="T">The type of the items in the collection</typeparam>
            <param name="Collection">Collection to remove items from</param>
            <param name="Predicate">Predicate used to determine what items to remove</param>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ICollectionExtensions.Remove``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes all items in the list from the collection
            </summary>
            <typeparam name="T">The type of the items in the collection</typeparam>
            <param name="Collection">Collection</param>
            <param name="Items">Items to remove</param>
            <returns>The collection with the items removed</returns>
        </member>
        <member name="T:DevGrep.Classes.DataTypes.ExtensionMethods.IComparableExtensions">
            <summary>
            IComparable extensions
            </summary>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IComparableExtensions.Between``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Checks if an item is between two values
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="Value">Value to check</param>
            <param name="Min">Minimum value</param>
            <param name="Max">Maximum value</param>
            <param name="Comparer">Comparer used to compare the values (defaults to GenericComparer)"</param>
            <returns>True if it is between the values, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IComparableExtensions.Clamp``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Clamps a value between two values
            </summary>
            <param name="Value">Value sent in</param>
            <param name="Max">Max value it can be (inclusive)</param>
            <param name="Min">Min value it can be (inclusive)</param>
            <param name="Comparer">Comparer to use (defaults to GenericComparer)</param>
            <returns>The value set between Min and Max</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IComparableExtensions.Max``1(``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns the maximum value between the two
            </summary>
            <param name="InputA">Input A</param>
            <param name="InputB">Input B</param>
            <param name="Comparer">Comparer to use (defaults to GenericComparer)</param>
            <returns>The maximum value</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IComparableExtensions.Min``1(``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns the minimum value between the two
            </summary>
            <param name="InputA">Input A</param>
            <param name="InputB">Input B</param>
            <param name="Comparer">Comparer to use (defaults to GenericComparer)</param>
            <returns>The minimum value</returns>
        </member>
        <member name="T:DevGrep.Classes.DataTypes.ExtensionMethods.IDictionaryExtensions">
            <summary>
            IDictionary extensions
            </summary>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IDictionaryExtensions.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Gets the value from a dictionary or the default value if it isn't found
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TValue">Value type</typeparam>
            <param name="Dictionary">Dictionary to get the value from</param>
            <param name="Key">Key to look for</param>
            <param name="Default">Default value if the key is not found</param>
            <returns>The value associated with the key or the default value if the key is not found</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the dictionary is null</exception>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IDictionaryExtensions.Sort``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts a dictionary
            </summary>
            <typeparam name="T1">Key type</typeparam>
            <typeparam name="T2">Value type</typeparam>
            <param name="Dictionary">Dictionary to sort</param>
            <param name="Comparer">Comparer used to sort (defaults to GenericComparer)</param>
            <returns>The sorted dictionary</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IDictionaryExtensions.Sort``3(System.Collections.Generic.IDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},``2},System.Collections.Generic.IComparer{``2})">
            <summary>
            Sorts a dictionary
            </summary>
            <typeparam name="T1">Key type</typeparam>
            <typeparam name="T2">Value type</typeparam>
            <typeparam name="T3">Order by type</typeparam>
            <param name="Dictionary">Dictionary to sort</param>
            <param name="OrderBy">Function used to order the dictionary</param>
            <param name="Comparer">Comparer used to sort (defaults to GenericComparer)</param>
            <returns>The sorted dictionary</returns>
        </member>
        <member name="T:DevGrep.Classes.DataTypes.ExtensionMethods.IEnumerableExtensions">
            <summary>
            IEnumerable extensions
            </summary>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IEnumerableExtensions.ElementsBetween``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Returns elements starting at the index and ending at the end index
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="List">List to search</param>
            <param name="Start">Start index (inclusive)</param>
            <param name="End">End index (exclusive)</param>
            <returns>The items between the start and end index</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IEnumerableExtensions.FalseForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0}[])">
            <summary>
            Determines if the predicates are false for each item in a list
            </summary>
            <typeparam name="T">The type of the items in the list</typeparam>
            <param name="List">IEnumerable to look through</param>
            <param name="Predicates">Predicates to use to check the IEnumerable</param>
            <returns>True if they all fail all of the predicates, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IEnumerableExtensions.FalseForAny``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0}[])">
            <summary>
            Determines if the predicates are false for any item in a list
            </summary>
            <typeparam name="T">The type of the items in the list</typeparam>
            <param name="List">IEnumerable to look through</param>
            <param name="Predicates">Predicates to use to check the IEnumerable</param>
            <returns>True if any fail any of the predicates, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IEnumerableExtensions.First``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns the first X number of items from the list
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Count">Numbers of items to return</param>
            <returns>The first X items from the list</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IEnumerableExtensions.For``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Action{``0})">
            <summary>
            Does an action for each item in the IEnumerable between the start and end indexes
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Start">Item to start with</param>
            <param name="End">Item to end with</param>
            <param name="Action">Action to do</param>
            <returns>The original list</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IEnumerableExtensions.For``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            Does a function for each item in the IEnumerable between the start and end indexes and returns an IEnumerable of the results
            </summary>
            <typeparam name="T">Object type</typeparam>
            <typeparam name="R">Return type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Start">Item to start with</param>
            <param name="End">Item to end with</param>
            <param name="Function">Function to do</param>
            <returns>The resulting list</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Does an action for each item in the IEnumerable
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Action">Action to do</param>
            <returns>The original list</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IEnumerableExtensions.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Does a function for each item in the IEnumerable, returning a list of the results
            </summary>
            <typeparam name="T">Object type</typeparam>
            <typeparam name="R">Return type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Function">Function to do</param>
            <returns>The resulting list</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IEnumerableExtensions.ForParallel``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Action{``0})">
            <summary>
            Does an action for each item in the IEnumerable between the start and end indexes in parallel
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Start">Item to start with</param>
            <param name="End">Item to end with</param>
            <param name="Action">Action to do</param>
            <returns>The original list</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IEnumerableExtensions.ForParallel``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            Does an action for each item in the IEnumerable between the start and end indexes in parallel
            </summary>
            <typeparam name="T">Object type</typeparam>
            <typeparam name="R">Results type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Start">Item to start with</param>
            <param name="End">Item to end with</param>
            <param name="Function">Function to do</param>
            <returns>The resulting list</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IEnumerableExtensions.ForEachParallel``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Does an action for each item in the IEnumerable in parallel
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Action">Action to do</param>
            <returns>The original list</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IEnumerableExtensions.ForEachParallel``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Does an action for each item in the IEnumerable in parallel
            </summary>
            <typeparam name="T">Object type</typeparam>
            <typeparam name="R">Results type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Function">Function to do</param>
            <returns>The results in an IEnumerable list</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IEnumerableExtensions.Last``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns the last X number of items from the list
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Count">Numbers of items to return</param>
            <returns>The last X items from the list</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IEnumerableExtensions.RemoveDefaults``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Removes default values from a list
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="Value">List to cull items from</param>
            <param name="EqualityComparer">Equality comparer used (defaults to GenericEqualityComparer)</param>
            <returns>An IEnumerable with the default values removed</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IEnumerableExtensions.ThrowIfTrueForAll``2(System.Collections.Generic.IEnumerable{``0},``1,System.Predicate{``0}[])">
            <summary>
            Throws the specified exception if the predicates are true for all items
            </summary>
            <typeparam name="T">Item type</typeparam>
            <typeparam name="E">Exception type</typeparam>
            <param name="Items">The list</param>
            <param name="Predicates">Predicates to check</param>
            <param name="Exception">Exception to throw if predicates are true</param>
            <returns>the original IEnumerable</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IEnumerableExtensions.ThrowIfFalseForAll``2(System.Collections.Generic.IEnumerable{``0},``1,System.Predicate{``0}[])">
            <summary>
            Throws the specified exception if the predicates are false for all items
            </summary>
            <typeparam name="T">Item type</typeparam>
            <typeparam name="E">Exception type</typeparam>
            <param name="Items">The list</param>
            <param name="Predicates">Predicates to check</param>
            <param name="Exception">Exception to throw if predicates are false</param>
            <returns>the original list</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IEnumerableExtensions.ThrowIfTrueForAny``2(System.Collections.Generic.IEnumerable{``0},``1,System.Predicate{``0}[])">
            <summary>
            Throws the specified exception if the predicate is true for any items
            </summary>
            <typeparam name="T">Item type</typeparam>
            <typeparam name="E">Exception type</typeparam>
            <param name="Items">The list</param>
            <param name="Predicates">Predicates to check</param>
            <param name="Exception">Exception to throw if predicate is true</param>
            <returns>the original IEnumerable</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IEnumerableExtensions.ThrowIfFalseForAny``2(System.Collections.Generic.IEnumerable{``0},``1,System.Predicate{``0}[])">
            <summary>
            Throws the specified exception if the predicates are false for any items
            </summary>
            <typeparam name="T">Item type</typeparam>
            <typeparam name="E">Exception type</typeparam>
            <param name="Items">The list</param>
            <param name="Predicates">Predicates to check</param>
            <param name="Exception">Exception to throw if predicates are false</param>
            <returns>the original list</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IEnumerableExtensions.ToArray``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Converts a list to an array
            </summary>
            <typeparam name="Source">Source type</typeparam>
            <typeparam name="Target">Target type</typeparam>
            <param name="List">List to convert</param>
            <param name="ConvertingFunction">Function used to convert each item</param>
            <returns>The array containing the items from the list</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IEnumerableExtensions.ToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.String[])">
            <summary>
            Converts the IEnumerable to a DataTable
            </summary>
            <typeparam name="T">Type of the objects in the IEnumerable</typeparam>
            <param name="List">List to convert</param>
            <param name="Columns">Column names (if empty, uses property names)</param>
            <returns>The list as a DataTable</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IEnumerableExtensions.ToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
            Converts the list to a string where each item is seperated by the Seperator
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="List">List to convert</param>
            <param name="ItemOutput">Used to convert the item to a string (defaults to calling ToString)</param>
            <param name="Seperator">Seperator to use between items (defaults to ,)</param>
            <returns>The string version of the list</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IEnumerableExtensions.TrueForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0}[])">
            <summary>
            Determines if the predicates are true for each item in a list
            </summary>
            <typeparam name="T">The type of the items in the list</typeparam>
            <param name="List">IEnumerable to look through</param>
            <param name="Predicates">Predicates to use to check the IEnumerable</param>
            <returns>True if they all pass all of the predicates, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IEnumerableExtensions.TrueForAny``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0}[])">
            <summary>
            Determines if the predicates are true for any item in a list
            </summary>
            <typeparam name="T">The type of the items in the list</typeparam>
            <param name="List">IEnumerable to look through</param>
            <param name="Predicates">Predicates to use to check the IEnumerable</param>
            <returns>True if any pass any of the predicates, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IEnumerableExtensions.TryAll``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{``0})">
            <summary>
            Tries to do the action on each item in the list. If an exception is thrown,
            it does the catch action on the item (if it is not null).
            </summary>
            <typeparam name="T">The type of the items in the list</typeparam>
            <param name="List">IEnumerable to look through</param>
            <param name="Action">Action to run on each item</param>
            <param name="CatchAction">Catch action (defaults to null)</param>
            <returns>The list after the action is run on everything</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.IEnumerableExtensions.TryAllParallel``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{``0})">
            <summary>
            Tries to do the action on each item in the list. If an exception is thrown,
            it does the catch action on the item (if it is not null). This is done in
            parallel.
            </summary>
            <typeparam name="T">The type of the items in the list</typeparam>
            <param name="List">IEnumerable to look through</param>
            <param name="Action">Action to run on each item</param>
            <param name="CatchAction">Catch action (defaults to null)</param>
            <returns>The list after the action is run on everything</returns>
        </member>
        <member name="T:DevGrep.Classes.DataTypes.ExtensionMethods.MatchCollectionExtensions">
            <summary>
            MatchCollection extensions
            </summary>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.MatchCollectionExtensions.Where(System.Text.RegularExpressions.MatchCollection,System.Predicate{System.Text.RegularExpressions.Match})">
            <summary>
            Gets a list of items that satisfy the predicate from the collection
            </summary>
            <param name="Collection">Collection to search through</param>
            <param name="Predicate">Predicate that the items must satisfy</param>
            <returns>The matches that satisfy the predicate</returns>
        </member>
        <member name="T:DevGrep.Classes.DataTypes.ExtensionMethods.StreamExtensions">
            <summary>
            Extension methods for Streams
            </summary>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StreamExtensions.ReadAllBinary(System.IO.Stream)">
            <summary>
            Takes all of the data in the stream and returns it as an array of bytes
            </summary>
            <param name="Input">Input stream</param>
            <returns>A byte array</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StreamExtensions.ReadAll(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Takes all of the data in the stream and returns it as a string
            </summary>
            <param name="Input">Input stream</param>
            <param name="EncodingUsing">Encoding that the string should be in (defaults to UTF8)</param>
            <returns>A string containing the content of the stream</returns>
        </member>
        <member name="T:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions">
            <summary>
            String and StringBuilder extensions
            </summary>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.AlphaCharactersOnly(System.String)">
            <summary>
            Keeps only alpha characters
            </summary>
            <param name="Input">Input string</param>
            <returns>the string only containing alpha characters</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.AlphaNumericOnly(System.String)">
            <summary>
            Keeps only alphanumeric characters
            </summary>
            <param name="Input">Input string</param>
            <returns>the string only containing alphanumeric characters</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.AppendLineFormat(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
            Does an AppendFormat and then an AppendLine on the StringBuilder
            </summary>
            <param name="Builder">Builder object</param>
            <param name="Format">Format string</param>
            <param name="Objects">Objects to format</param>
            <returns>The StringBuilder passed in</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.Center(System.String,System.Int32,System.String)">
            <summary>
            Centers the input string (if it's longer than the length) and pads it using the padding string
            </summary>
            <param name="Input"></param>
            <param name="Length"></param>
            <param name="Padding"></param>
            <returns>The centered string</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.Encode(System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            Converts a string to a string of another encoding
            </summary>
            <param name="Input">input string</param>
            <param name="OriginalEncodingUsing">The type of encoding the string is currently using (defaults to ASCII)</param>
            <param name="EncodingUsing">The type of encoding the string is converted into (defaults to UTF8)</param>
            <returns>string of the byte array</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.ExpandTabs(System.String,System.Int32)">
            <summary>
            Expands tabs and replaces them with spaces
            </summary>
            <param name="Input">Input string</param>
            <param name="TabSize">Number of spaces</param>
            <returns>The input string, with the tabs replaced with spaces</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.FilterOutText(System.String,System.String)">
            <summary>
            Removes the filter text from the input.
            </summary>
            <param name="Input">Input text</param>
            <param name="Filter">Regex expression of text to filter out</param>
            <returns>The input text minus the filter text.</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.FormatString(System.String,System.String,DevGrep.Classes.DataTypes.Formatters.Interfaces.IStringFormatter)">
            <summary>
            Formats a string based on a format string passed in.
            The default formatter uses the following format:
            # = digits
            @ = alpha characters
            \ = escape char
            </summary>
            <param name="Input">Input string</param>
            <param name="Format">Format of the output string</param>
            <param name="Provider">String formatter provider (defaults to GenericStringFormatter)</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.FormatString(System.String,System.Object,System.String,System.String)">
            <summary>
            Formats a string based on the object's properties
            </summary>
            <param name="Input">Input string</param>
            <param name="Object">Object to use to format the string</param>
            <param name="StartSeperator">Seperator character/string to use to describe the start of the property name</param>
            <param name="EndSeperator">Seperator character/string to use to describe the end of the property name</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.FormatString(System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Formats a string based on the key/value pairs that are sent in
            </summary>
            <param name="Input">Input string</param>
            <param name="Pairs">Key/value pairs. Replaces the key with the corresponding value.</param>
            <returns>The string after the changes have been made</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.FromBase64(System.String,System.Text.Encoding)">
            <summary>
            Converts base 64 string based on the encoding passed in
            </summary>
            <param name="Input">Input string</param>
            <param name="EncodingUsing">The type of encoding the string is using (defaults to UTF8)</param>
            <returns>string in the encoding format</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.FromBase64(System.String)">
            <summary>
            Converts base 64 string to a byte array
            </summary>
            <param name="Input">Input string</param>
            <returns>A byte array equivalent of the base 64 string</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.IsCreditCard(System.String)">
            <summary>
            Checks if a credit card number is valid
            </summary>
            <param name="CreditCardNumber">Number to check</param>
            <returns>True if it is valid, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.IsUnicode(System.String)">
            <summary>
            Determines if a string is unicode
            </summary>
            <param name="Input">Input string</param>
            <returns>True if it's unicode, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.KeepFilterText(System.String,System.String)">
            <summary>
            Removes everything that is not in the filter text from the input.
            </summary>
            <param name="Input">Input text</param>
            <param name="Filter">Regex expression of text to keep</param>
            <returns>The input text minus everything not in the filter text.</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            Gets the first x number of characters from the left hand side
            </summary>
            <param name="Input">Input string</param>
            <param name="Length">x number of characters to return</param>
            <returns>The resulting string</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.LevenshteinDistance(System.String,System.String)">
            <summary>
            Calculates the Levenshtein distance
            </summary>
            <param name="Value1">Value 1</param>
            <param name="Value2">Value 2</param>
            <returns>The Levenshtein distance</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.MaskLeft(System.String,System.Int32,System.Char)">
            <summary>
            Masks characters to the left ending at a specific character
            </summary>
            <param name="Input">Input string</param>
            <param name="EndPosition">End position (counting from the left)</param>
            <param name="Mask">Mask character to use</param>
            <returns>The masked string</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.MaskRight(System.String,System.Int32,System.Char)">
            <summary>
            Masks characters to the right starting at a specific character
            </summary>
            <param name="Input">Input string</param>
            <param name="StartPosition">Start position (counting from the left)</param>
            <param name="Mask">Mask character to use</param>
            <returns>The masked string</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.NextSequence(System.String,System.Char,System.Char)">
            <summary>
            Function that is useful for generating a string in a series. so a becomes b, b becomes c, etc. 
            and after hitting the max character, it goes to two characters (so ~ becomes aa, then ab, ac, etc).
            </summary>
            <param name="Sequence">Current sequence</param>
            <param name="Min">Min character</param>
            <param name="Max">Max character</param>
            <returns>The next item in the sequence</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.NumericOnly(System.String,System.Boolean)">
            <summary>
            Keeps only numeric characters
            </summary>
            <param name="Input">Input string</param>
            <param name="KeepNumericPunctuation">Determines if decimal places should be kept</param>
            <returns>the string only containing numeric characters</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.NumberTimesOccurs(System.String,System.String)">
            <summary>
            returns the number of times a string occurs within the text
            </summary>
            <param name="Input">input text</param>
            <param name="Match">The string to match (can be regex)</param>
            <returns>The number of times the string occurs</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.Pluralize(System.String,System.Globalization.CultureInfo)">
            <summary>
            Pluralizes a word
            </summary>
            <param name="Word">Word to pluralize</param>
            <param name="Culture">Culture info used to pluralize the word (defaults to current culture)</param>
            <returns>The word pluralized</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.RegexFormat(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Uses a regex to format the input string
            </summary>
            <param name="Input">Input string</param>
            <param name="Format">Regex string used to</param>
            <param name="OutputFormat">Output format</param>
            <param name="Options">Regex options</param>
            <returns>The input string formatted by using the regex string</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.Reverse(System.String)">
            <summary>
            Reverses a string
            </summary>
            <param name="Input">Input string</param>
            <returns>The reverse of the input string</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            Gets the last x number of characters from the right hand side
            </summary>
            <param name="Input">Input string</param>
            <param name="Length">x number of characters to return</param>
            <returns>The resulting string</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.Singularize(System.String,System.Globalization.CultureInfo)">
            <summary>
            Singularizes a word
            </summary>
            <param name="Word">Word to singularize</param>
            <param name="Culture">Culture info used to singularize the word (defaults to current culture)</param>
            <returns>The word singularized</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.StripLeft(System.String,System.String)">
            <summary>
            Strips out any of the characters specified starting on the left side of the input string (stops when a character not in the list is found)
            </summary>
            <param name="Input">Input string</param>
            <param name="Characters">Characters to string (defaults to a space)</param>
            <returns>The Input string with specified characters stripped out</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.StripRight(System.String,System.String)">
            <summary>
            Strips out any of the characters specified starting on the right side of the input string (stops when a character not in the list is found)
            </summary>
            <param name="Input">Input string</param>
            <param name="Characters">Characters to string (defaults to a space)</param>
            <returns>The Input string with specified characters stripped out</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.StripIllegalXML(System.String)">
            <summary>
            Strips illegal characters for XML content
            </summary>
            <param name="Content">Content</param>
            <returns>The stripped string</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.ToBase64(System.String,System.Text.Encoding)">
            <summary>
            Converts from the specified encoding to a base 64 string
            </summary>
            <param name="Input">Input string</param>
            <param name="OriginalEncodingUsing">The type of encoding the string is using (defaults to UTF8)</param>
            <returns>Bas64 string</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.ToByteArray(System.String,System.Text.Encoding)">
            <summary>
            Converts a string to a byte array
            </summary>
            <param name="Input">input string</param>
            <param name="EncodingUsing">The type of encoding the string is using (defaults to UTF8)</param>
            <returns>the byte array representing the string</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.ToFirstCharacterUpperCase(System.String)">
            <summary>
            Takes the first character of an input string and makes it uppercase
            </summary>
            <param name="Input">Input string</param>
            <returns>String with the first character capitalized</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.ToSentenceCapitalize(System.String)">
            <summary>
            Capitalizes each sentence within the string
            </summary>
            <param name="Input">Input string</param>
            <returns>String with each sentence capitalized</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.StringExtensions.ToTitleCase(System.String)">
            <summary>
            Capitalizes the first character of each word
            </summary>
            <param name="Input">Input string</param>
            <returns>String with each word capitalized</returns>
        </member>
        <member name="T:DevGrep.Classes.DataTypes.ExtensionMethods.TimeSpanExtensions">
            <summary>
            TimeSpan extension methods
            </summary>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.TimeSpanExtensions.DaysRemainder(System.TimeSpan)">
            <summary>
            Days in the TimeSpan minus the months and years
            </summary>
            <param name="Span">TimeSpan to get the days from</param>
            <returns>The number of days minus the months and years that the TimeSpan has</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.TimeSpanExtensions.Months(System.TimeSpan)">
            <summary>
            Months in the TimeSpan
            </summary>
            <param name="Span">TimeSpan to get the months from</param>
            <returns>The number of months that the TimeSpan has</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.TimeSpanExtensions.Years(System.TimeSpan)">
            <summary>
            Years in the TimeSpan
            </summary>
            <param name="Span">TimeSpan to get the years from</param>
            <returns>The number of years that the TimeSpan has</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.TimeSpanExtensions.ToStringFull(System.TimeSpan)">
            <summary>
            Converts the input to a string in this format:
            (Years) years, (Months) months, (DaysRemainder) days, (Hours) hours, (Minutes) minutes, (Seconds) seconds
            </summary>
            <param name="Input">Input TimeSpan</param>
            <returns>The TimeSpan as a string</returns>
        </member>
        <member name="T:DevGrep.Classes.DataTypes.ExtensionMethods.TypeConversionExtensions">
            <summary>
            Extensions converting between types, checking if something is null, etc.
            </summary>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.TypeConversionExtensions.FormatToString(System.Object,System.String)">
            <summary>
            Calls the object's ToString function passing in the formatting
            </summary>
            <param name="Input">Input object</param>
            <param name="Format">Format of the output string</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.TypeConversionExtensions.IsNotDefault``1(``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if the object is not null
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="Object">The object to check</param>
            <param name="EqualityComparer">Equality comparer used to determine if the object is equal to default</param>
            <returns>False if it is null, true otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.TypeConversionExtensions.IsDefault``1(``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if the object is null
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="Object">The object to check</param>
            <param name="EqualityComparer">Equality comparer used to determine if the object is equal to default</param>
            <returns>True if it is null, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.TypeConversionExtensions.IsNotNull(System.Object)">
            <summary>
            Determines if the object is not null
            </summary>
            <param name="Object">The object to check</param>
            <returns>False if it is null, true otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.TypeConversionExtensions.IsNull(System.Object)">
            <summary>
            Determines if the object is null
            </summary>
            <param name="Object">The object to check</param>
            <returns>True if it is null, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.TypeConversionExtensions.IsNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if a list is not null or empty
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="Value">List to check</param>
            <returns>True if it is not null or empty, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.TypeConversionExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if a list is null or empty
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="Value">List to check</param>
            <returns>True if it is null or empty, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.TypeConversionExtensions.NullCheck``1(``0,``0)">
            <summary>
            Does a null check and either returns the default value (if it is null) or the object
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="Object">Object to check</param>
            <param name="DefaultValue">Default value to return in case it is null</param>
            <returns>The default value if it is null, the object otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.TypeConversionExtensions.ThrowIfDefault``1(``0,System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if the object is equal to default value and throws an ArgumentNullException if it is
            </summary>
            <param name="Item">The object to check</param>
            <param name="EqualityComparer">Equality comparer used to determine if the object is equal to default</param>
            <param name="Name">Name of the argument</param>
            <returns>Returns Item</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.TypeConversionExtensions.ThrowIfDefault``1(``0,System.Exception,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if the object is equal to default value and throws the exception that is passed in if it is
            </summary>
            <param name="Item">The object to check</param>
            <param name="EqualityComparer">Equality comparer used to determine if the object is equal to default</param>
            <param name="Exception">Exception to throw</param>
            <returns>Returns Item</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.TypeConversionExtensions.ThrowIfNull``1(``0,System.String)">
            <summary>
            Determines if the object is null and throws an ArgumentNullException if it is
            </summary>
            <param name="Item">The object to check</param>
            <param name="Name">Name of the argument</param>
            <returns>Returns Item</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.TypeConversionExtensions.ThrowIfNull``1(``0,System.Exception)">
            <summary>
            Determines if the object is null and throws the exception passed in if it is
            </summary>
            <param name="Item">The object to check</param>
            <param name="Exception">Exception to throw</param>
            <returns>Returns Item</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.TypeConversionExtensions.ThrowIfNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Determines if the IEnumerable is null or empty and throws an ArgumentNullException if it is
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="Item">The object to check</param>
            <param name="Name">Name of the argument</param>
            <returns>Returns Item</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.TypeConversionExtensions.ThrowIfNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.Exception)">
            <summary>
            Determines if the IEnumerable is null or empty and throws the exception passed in if it is
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="Item">The object to check</param>
            <param name="Exception">Exception to throw</param>
            <returns>Returns Item</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.TypeConversionExtensions.ToSQLDbType(System.Type)">
            <summary>
            Converts a .Net type to SQLDbType value
            </summary>
            <param name="Type">.Net Type</param>
            <returns>The corresponding SQLDbType</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.TypeConversionExtensions.ToSqlDbType(System.Data.DbType)">
            <summary>
            Converts a DbType to a SqlDbType
            </summary>
            <param name="Type">Type to convert</param>
            <returns>The corresponding SqlDbType (if it exists)</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.TypeConversionExtensions.ToDbType(System.Type)">
            <summary>
            Converts a .Net type to DbType value
            </summary>
            <param name="Type">.Net Type</param>
            <returns>The corresponding DbType</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.TypeConversionExtensions.ToDbType(System.Data.SqlDbType)">
            <summary>
            Converts SqlDbType to DbType
            </summary>
            <param name="Type">Type to convert</param>
            <returns>The corresponding DbType (if it exists)</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.TypeConversionExtensions.ToList``1(System.Data.DataTable,System.Func{``0})">
            <summary>
            Attempts to convert the DataTable to a list of objects
            </summary>
            <typeparam name="T">Type the objects should be in the list</typeparam>
            <param name="Data">DataTable to convert</param>
            <param name="Creator">Function used to create each object</param>
            <returns>The DataTable converted to a list of objects</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.TypeConversionExtensions.ToType(System.Data.SqlDbType)">
            <summary>
            Converts a SQLDbType value to .Net type
            </summary>
            <param name="Type">SqlDbType Type</param>
            <returns>The corresponding .Net type</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.TypeConversionExtensions.ToType(System.Data.DbType)">
            <summary>
            Converts a DbType value to .Net type
            </summary>
            <param name="Type">DbType</param>
            <returns>The corresponding .Net type</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.TypeConversionExtensions.ToExpando``1(``0)">
            <summary>
            Converts the object to a dynamic object
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="Object">The object to convert</param>
            <returns>The object as an expando object</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.TypeConversionExtensions.TryTo``2(``0,``1)">
            <summary>
            Attempts to convert the object to another type and returns the value
            </summary>
            <typeparam name="T">Type to convert from</typeparam>
            <typeparam name="R">Return type</typeparam>
            <param name="Object">Object to convert</param>
            <param name="DefaultValue">Default value to return if there is an issue or it can't be converted</param>
            <returns>The object converted to the other type or the default value if there is an error or can't be converted</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.TypeConversionExtensions.TryTo``1(System.Dynamic.ExpandoObject,``0)">
            <summary>
            Converts an expando object to the specified type
            </summary>
            <typeparam name="R">Type to convert to</typeparam>
            <param name="Object">Object to convert</param>
            <param name="DefaultValue">Default value in case it can't convert the expando object</param>
            <returns>The object as the specified type</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.TypeConversionExtensions.TryTo``1(``0,System.Type,System.Object)">
            <summary>
            Attempts to convert the object to another type and returns the value
            </summary>
            <typeparam name="T">Type to convert from</typeparam>
            <param name="ResultType">Result type</param>
            <param name="Object">Object to convert</param>
            <param name="DefaultValue">Default value to return if there is an issue or it can't be converted</param>
            <returns>The object converted to the other type or the default value if there is an error or can't be converted</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.TypeConversionExtensions.CallMethod(System.String,System.Object,System.Object[])">
            <summary>
            Calls a method on an object
            </summary>
            <param name="MethodName">Method name</param>
            <param name="Object">Object to call the method on</param>
            <param name="InputVariables">(Optional)input variables for the method</param>
            <returns>The returned value of the method</returns>
        </member>
        <member name="T:DevGrep.Classes.DataTypes.ExtensionMethods.ValueTypeExtensions">
            <summary>
            Value type extension methods
            </summary>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ValueTypeExtensions.ToBool(System.Int32)">
            <summary>
            Turns an int into a bool
            </summary>
            <param name="Input">Int value</param>
            <returns>bool equivalent</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ValueTypeExtensions.ToInt(System.Boolean)">
            <summary>
            Converts the bool to an integer
            </summary>
            <param name="Value">Value to convert</param>
            <returns>The integer equivalent</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ValueTypeExtensions.ToBase64String(System.Byte[])">
            <summary>
            Converts a byte array into a base 64 string
            </summary>
            <param name="Input">Input array</param>
            <returns>The equivalent byte array in a base 64 string</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ValueTypeExtensions.ToEncodedString(System.Byte[],System.Text.Encoding,System.Int32,System.Int32)">
            <summary>
            Converts a byte array to a string
            </summary>
            <param name="Input">input array</param>
            <param name="EncodingUsing">The type of encoding the string is using (defaults to UTF8)</param>
            <param name="Count">Number of bytes starting at the index to convert (use -1 for the entire array starting at the index)</param>
            <param name="Index">Index to start at</param>
            <returns>string of the byte array</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ValueTypeExtensions.IsControl(System.Char)">
            <summary>
            Is the character a control character
            </summary>
            <param name="Value">Value to check</param>
            <returns>True if it is, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ValueTypeExtensions.IsDigit(System.Char)">
            <summary>
            Is the character a digit character
            </summary>
            <param name="Value">Value to check</param>
            <returns>True if it is, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ValueTypeExtensions.IsHighSurrogate(System.Char)">
            <summary>
            Is the character a high surrogate character
            </summary>
            <param name="Value">Value to check</param>
            <returns>True if it is, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ValueTypeExtensions.IsLetter(System.Char)">
            <summary>
            Is the character a letter character
            </summary>
            <param name="Value">Value to check</param>
            <returns>True if it is, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ValueTypeExtensions.IsLetterOrDigit(System.Char)">
            <summary>
            Is the character a letter or digit character
            </summary>
            <param name="Value">Value to check</param>
            <returns>True if it is, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ValueTypeExtensions.IsLower(System.Char)">
            <summary>
            Is the character a lower case character
            </summary>
            <param name="Value">Value to check</param>
            <returns>True if it is, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ValueTypeExtensions.IsLowSurrogate(System.Char)">
            <summary>
            Is the character a low surrogate character
            </summary>
            <param name="Value">Value to check</param>
            <returns>True if it is, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ValueTypeExtensions.IsNumber(System.Char)">
            <summary>
            Is the character a number character
            </summary>
            <param name="Value">Value to check</param>
            <returns>True if it is, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ValueTypeExtensions.IsPunctuation(System.Char)">
            <summary>
            Is the character a punctuation character
            </summary>
            <param name="Value">Value to check</param>
            <returns>True if it is, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ValueTypeExtensions.IsSurrogate(System.Char)">
            <summary>
            Is the character a surrogate character
            </summary>
            <param name="Value">Value to check</param>
            <returns>True if it is, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ValueTypeExtensions.IsSymbol(System.Char)">
            <summary>
            Is the character a symbol character
            </summary>
            <param name="Value">Value to check</param>
            <returns>True if it is, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ValueTypeExtensions.IsUpper(System.Char)">
            <summary>
            Is the character an upper case character
            </summary>
            <param name="Value">Value to check</param>
            <returns>True if it is, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ValueTypeExtensions.IsWhiteSpace(System.Char)">
            <summary>
            Is the character a whitespace character
            </summary>
            <param name="Value">Value to check</param>
            <returns>True if it is, false otherwise</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.ExtensionMethods.ValueTypeExtensions.IsUnicode(System.Byte[])">
            <summary>
            Determines if a byte array is unicode
            </summary>
            <param name="Input">Input array</param>
            <returns>True if it's unicode, false otherwise</returns>
        </member>
        <member name="T:DevGrep.Classes.DataTypes.Formatters.GenericStringFormatter">
            <summary>
            Generic string formatter
            </summary>
        </member>
        <member name="T:DevGrep.Classes.DataTypes.Formatters.Interfaces.IStringFormatter">
            <summary>
            String formatter
            </summary>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.Formatters.Interfaces.IStringFormatter.Format(System.String,System.String)">
            <summary>
            Formats the string based on the pattern
            </summary>
            <param name="Input">Input string</param>
            <param name="FormatPattern">Format pattern</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.Formatters.GenericStringFormatter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.Formatters.GenericStringFormatter.GetFormat(System.Type)">
            <summary>
            Gets the format associated with the type
            </summary>
            <param name="formatType">Format type</param>
            <returns>The appropriate formatter based on the type</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.Formatters.GenericStringFormatter.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Formats the string
            </summary>
            <param name="format">Format to use</param>
            <param name="arg">Argument object to use</param>
            <param name="formatProvider">Format provider to use</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.Formatters.GenericStringFormatter.Format(System.String,System.String)">
            <summary>
            Formats the string based on the pattern
            </summary>
            <param name="Input">Input string</param>
            <param name="FormatPattern">Format pattern</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.Formatters.GenericStringFormatter.GetMatchingInput(System.String,System.Char,System.Char@)">
            <summary>
            Gets matching input
            </summary>
            <param name="Input">Input string</param>
            <param name="FormatChar">Current format character</param>
            <param name="MatchChar">The matching character found</param>
            <returns>The remainder of the input string left</returns>
        </member>
        <member name="M:DevGrep.Classes.DataTypes.Formatters.GenericStringFormatter.IsValid(System.String)">
            <summary>
            Checks if the format pattern is valid
            </summary>
            <param name="FormatPattern">Format pattern</param>
            <returns>Returns true if it's valid, otherwise false</returns>
        </member>
        <member name="P:DevGrep.Classes.DataTypes.Formatters.GenericStringFormatter.DigitChar">
            <summary>
            Represents digits (defaults to #)
            </summary>
        </member>
        <member name="P:DevGrep.Classes.DataTypes.Formatters.GenericStringFormatter.AlphaChar">
            <summary>
            Represents alpha characters (defaults to @)
            </summary>
        </member>
        <member name="P:DevGrep.Classes.DataTypes.Formatters.GenericStringFormatter.EscapeChar">
            <summary>
            Represents the escape character (defaults to \)
            </summary>
        </member>
        <member name="M:DevGrep.Classes.DevGrepLicense.#ctor(System.String)">
            <summary>
            Allow a user to pass in encrypted license data. We will decrypt it and see if it is valid.
            </summary>
            <param name="encryptedLicenseData"></param>
        </member>
        <member name="T:DevGrep.Classes.Entity.SearchTaskDisplay">
            <summary>
            User for storing data to be display in the search results list view.
            </summary>
        </member>
        <member name="T:DevGrep.Classes.FileExport.FileExportHTML">
            <summary>
            Class FileExportHTML
            </summary>
            <remarks>Does a replace on certain tokens within the template file. $SEARCHCRITERIA$,$FILENAME$,$FILETYPE$,
            $FILEFOLDER$,$FILEMATCHES$,$FILESIZE$,$FILEDATETIME$,$FILENAMEHEADER$,$FILETYPEHEADER$,
            $FILEFOLDERHEADER$,$FILEMATCHESHEADER$,$FILESIZEHEADER$,$FILEDATETIMEHEADER$</remarks>
        </member>
        <member name="T:DevGrep.Classes.IndexedFiles.FileDocumentNC">
            <summary>A utility for making Documents from a File and the contents are not stored. </summary>
        </member>
        <member name="M:DevGrep.Classes.IndexedFiles.FileDocumentNC.Document(System.IO.FileInfo)">
            <summary>Makes a document for a File.
            <p>
            The document has three fields:
            <ul>
            <li><c>path</c>--containing the pathname of the file, as a stored,
            untokenized field;</li>
            <li><c>modified</c>--containing the last modified date of the file as
            a field as created by <a href="SmartSearch.document.DateTools.html">DateTools</a>;</li>
            <li><c>contents</c>--containing the full contents of the file, as a
            Reader field;</li>
            </ul>
            </p>
            </summary>
        </member>
        <member name="T:DevGrep.Classes.IndexedFiles.IndexDetail">
            <summary>
            Class VerbDetail
            </summary>
        </member>
        <member name="M:DevGrep.Classes.IndexedFiles.IndexDetail.#ctor(System.String,System.String,System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="!:VerbDetail"/> class.
            </summary>
            <param name="folderNamePath">The folder name path.</param>
            <param name="indexType">Type of the index.</param>
            <param name="indexFolderName">Name of the index folder.</param>
            <param name="lastUpdate">The last update.</param>
        </member>
        <member name="P:DevGrep.Classes.IndexedFiles.IndexDetail.IndexFolderName">
            <summary>
            Gets or sets the name of the index folder where the index data files are stored.
            </summary>
            <value>The name of the index folder.</value>
        </member>
        <member name="P:DevGrep.Classes.IndexedFiles.IndexDetail.FolderNamePath">
            <summary>
            Gets or sets the folder name path.
            </summary>
            <value>The folder name path.</value>
        </member>
        <member name="P:DevGrep.Classes.IndexedFiles.IndexDetail.IndexType">
            <summary>
            Gets or sets the type of the index.
            </summary>
            <value>The type of the index.</value>
        </member>
        <member name="P:DevGrep.Classes.IndexedFiles.IndexDetail.LastUpdate">
            <summary>
            Gets or sets the last update.
            </summary>
            <value>The last update.</value>
        </member>
        <member name="T:DevGrep.Classes.IndexedFiles.IndexList">
            <summary>
            Class VerbList
            </summary>
        </member>
        <member name="M:DevGrep.Classes.IndexedFiles.IndexList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DevGrep.Classes.IndexedFiles.IndexList"/> class.
            </summary>
        </member>
        <member name="M:DevGrep.Classes.IndexedFiles.IndexList.SanityCheck">
            <summary>
            Look for all items required by this class.
            </summary>
        </member>
        <member name="M:DevGrep.Classes.IndexedFiles.IndexList.CreateDefaultSaveFile">
            <summary>
            Populates this collection with default values.
            </summary>
        </member>
        <member name="M:DevGrep.Classes.IndexedFiles.IndexList.IsIndexInList(System.String)">
            <summary>
            Determines whether [is index in list] [the specified folder name path].
            </summary>
            <param name="folderNamePath">The folder name path.</param>
            <returns><c>true</c> if [is index in list] [the specified folder name path]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DevGrep.Classes.IndexedFiles.IndexList.GetIndexObject(System.String)">
            <summary>
            Gets an Index record for the given path.
            </summary>
            <param name="folderNamePath">The folder name path.</param>
            <returns>IndexDetail.</returns>
        </member>
        <member name="M:DevGrep.Classes.IndexedFiles.IndexList.Save">
            <summary>
            Saves this instance.
            </summary>
        </member>
        <member name="M:DevGrep.Classes.IndexedFiles.IndexList.Load">
            <summary>
            Loads this instance.
            </summary>
            <returns>IndexList.</returns>
        </member>
        <member name="M:DevGrep.Classes.IndexedFiles.IndexList.DoesSaveFileExist">
            <summary>
            Determines if a serialized copy of this collection is found in our config folder.
            </summary>
            <returns><c>true</c> if the file is found, <c>false</c> otherwise</returns>
        </member>
        <member name="P:DevGrep.Classes.IndexedFiles.IndexList.FileVersion">
            <summary>
            Used for tracking version of the save file and so we know when the file should be upgraded.
            </summary>
            <value>The file version.</value>
        </member>
        <member name="P:DevGrep.Classes.IndexedFiles.IndexList.SaveFileNamePath">
            <summary>
            Gets the save file name path.
            </summary>
            <value>The save file name path.</value>
        </member>
        <member name="M:DevGrep.Classes.IndexedFiles.IndexSearchHelper.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DevGrep.Classes.IndexedFiles.IndexSearchHelper"/> class.
            </summary>
            <param name="searchPath">The search path.</param>
            <param name="searchText">The search text.</param>
            <param name="extensionList">The extension list.</param>
            <param name="includeSubdirectory">if set to <c>true</c> [include subdirectory].</param>
        </member>
        <member name="M:DevGrep.Classes.IndexedFiles.IndexSearchHelper.StartSearch">
            <summary>
            Starts the search.
            </summary>
        </member>
        <member name="T:DevGrep.Classes.IndexedFiles.IndexSearchHelper.OneNormsReader">
            <summary>
            Use the norms from one field for all fields.  Norms are read into memory,
            using a byte of memory per document per searched field.  This can cause
            search of large collections with a large number of fields to run out of
            memory.  If all of the fields contain only a single token, then the norms
            are all identical, then single norm vector may be shared. 
            </summary>
        </member>
        <member name="T:DevGrep.Classes.IO.Serializers.BinarySerializer">
            <summary>
            Binary serializer
            </summary>
        </member>
        <member name="T:DevGrep.Classes.IO.Serializers.Interfaces.ISerializer`1">
            <summary>
            Serializer interface
            </summary>
            <typeparam name="T">Type that the object is serialized to/from</typeparam>
        </member>
        <member name="M:DevGrep.Classes.IO.Serializers.Interfaces.ISerializer`1.Serialize(System.Object)">
            <summary>
            Serializes the object
            </summary>
            <param name="Object">Object to serialize</param>
            <returns>The serialized object</returns>
        </member>
        <member name="M:DevGrep.Classes.IO.Serializers.Interfaces.ISerializer`1.Deserialize(`0,System.Type)">
            <summary>
            Deserializes the data
            </summary>
            <param name="ObjectType">Object type</param>
            <param name="Data">Data to deserialize</param>
            <returns>The resulting object</returns>
        </member>
        <member name="M:DevGrep.Classes.IO.Serializers.BinarySerializer.Serialize(System.Object)">
            <summary>
            Serializes the object
            </summary>
            <param name="Object">Object to serialize</param>
            <returns>The serialized object</returns>
        </member>
        <member name="M:DevGrep.Classes.IO.Serializers.BinarySerializer.Deserialize(System.Byte[],System.Type)">
            <summary>
            Deserializes the data
            </summary>
            <param name="ObjectType">Object type</param>
            <param name="Data">Data to deserialize</param>
            <returns>The resulting object</returns>
        </member>
        <member name="T:DevGrep.Classes.IO.Serializers.JSONSerializer">
            <summary>
            JSON serializer
            </summary>
        </member>
        <member name="M:DevGrep.Classes.IO.Serializers.JSONSerializer.#ctor(System.Text.Encoding)">
            <summary>
            Constructor
            </summary>
            <param name="EncodingUsing">Encoding that the serializer should use (defaults to ASCII)</param>
        </member>
        <member name="M:DevGrep.Classes.IO.Serializers.JSONSerializer.Serialize(System.Object)">
            <summary>
            Serializes the object
            </summary>
            <param name="Object">Object to serialize</param>
            <returns>The serialized object</returns>
        </member>
        <member name="M:DevGrep.Classes.IO.Serializers.JSONSerializer.Deserialize(System.String,System.Type)">
            <summary>
            Deserializes the data
            </summary>
            <param name="ObjectType">Object type</param>
            <param name="Data">Data to deserialize</param>
            <returns>The resulting object</returns>
        </member>
        <member name="P:DevGrep.Classes.IO.Serializers.JSONSerializer.EncodingUsing">
            <summary>
            Encoding that the serializer should use
            </summary>
        </member>
        <member name="T:DevGrep.Classes.IO.Serializers.SOAPSerializer">
            <summary>
            SOAP serializer
            </summary>
        </member>
        <member name="M:DevGrep.Classes.IO.Serializers.SOAPSerializer.#ctor(System.Text.Encoding)">
            <summary>
            Constructor
            </summary>
            <param name="EncodingUsing">Encoding that the serializer should use (defaults to ASCII)</param>
        </member>
        <member name="M:DevGrep.Classes.IO.Serializers.SOAPSerializer.Serialize(System.Object)">
            <summary>
            Serializes the object
            </summary>
            <param name="Object">Object to serialize</param>
            <returns>The serialized object</returns>
        </member>
        <member name="M:DevGrep.Classes.IO.Serializers.SOAPSerializer.Deserialize(System.String,System.Type)">
            <summary>
            Deserializes the data
            </summary>
            <param name="ObjectType">Object type</param>
            <param name="Data">Data to deserialize</param>
            <returns>The resulting object</returns>
        </member>
        <member name="P:DevGrep.Classes.IO.Serializers.SOAPSerializer.EncodingUsing">
            <summary>
            Encoding that the serializer should use
            </summary>
        </member>
        <member name="T:DevGrep.Classes.IO.Serializers.XMLSerializer">
            <summary>
            XML serializer
            </summary>
        </member>
        <member name="M:DevGrep.Classes.IO.Serializers.XMLSerializer.#ctor(System.Text.Encoding)">
            <summary>
            Constructor
            </summary>
            <param name="EncodingUsing">Encoding that the serializer should use (defaults to ASCII)</param>
        </member>
        <member name="M:DevGrep.Classes.IO.Serializers.XMLSerializer.Serialize(System.Object)">
            <summary>
            Serializes the object
            </summary>
            <param name="Object">Object to serialize</param>
            <returns>The serialized object</returns>
        </member>
        <member name="M:DevGrep.Classes.IO.Serializers.XMLSerializer.Deserialize(System.String,System.Type)">
            <summary>
            Deserializes the data
            </summary>
            <param name="ObjectType">Object type</param>
            <param name="Data">Data to deserialize</param>
            <returns>The resulting object</returns>
        </member>
        <member name="P:DevGrep.Classes.IO.Serializers.XMLSerializer.EncodingUsing">
            <summary>
            Encoding that the serializer should use
            </summary>
        </member>
        <member name="T:DevGrep.ListViewTextSort">
            <summary>
            Provides text sorting (case sensitive)
            </summary>
        </member>
        <member name="M:DevGrep.ListViewTextSort.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="sortColumn">Column to be sorted</param>
            <param name="ascending">true, if ascending order, false otherwise</param>
        </member>
        <member name="M:DevGrep.ListViewTextSort.Compare(System.Object,System.Object)">
            <summary>
            Implementation of IComparer.Compare
            </summary>
            <param name="lhs">First Object to compare</param>
            <param name="rhs">Second Object to compare</param>
            <returns>Less that zero if lhs is less than rhs. Greater than zero if lhs greater that rhs. Zero if they are equal</returns>
        </member>
        <member name="M:DevGrep.ListViewTextSort.OnCompare(System.String,System.String)">
            <summary>
            Overridden to do type-specific comparision.
            </summary>
            <param name="lhs">First Object to compare</param>
            <param name="rhs">Second Object to compare</param>
            <returns>Less that zero if lhs is less than rhs. Greater than zero if lhs greater that rhs. Zero if they are equal</returns>
        </member>
        <member name="T:DevGrep.ListViewTextCaseInsensitiveSort">
            <summary>
            Provides text sorting (case insensitive)
            </summary>
        </member>
        <member name="M:DevGrep.ListViewTextCaseInsensitiveSort.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="sortColumn">Column to be sorted</param>
            <param name="ascending">true, if ascending order, false otherwise</param>
        </member>
        <member name="M:DevGrep.ListViewTextCaseInsensitiveSort.OnCompare(System.String,System.String)">
            <summary>
            Case-insensitive compare
            </summary>
        </member>
        <member name="T:DevGrep.ListViewDateSort">
            <summary>
            Provides date sorting
            </summary>
        </member>
        <member name="M:DevGrep.ListViewDateSort.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="sortColumn">Column to be sorted</param>
            <param name="ascending">true, if ascending order, false otherwise</param>
        </member>
        <member name="M:DevGrep.ListViewDateSort.OnCompare(System.String,System.String)">
            <summary>
            Date compare
            </summary>
        </member>
        <member name="T:DevGrep.ListViewInt32Sort">
            <summary>
            Provides integer (32 bits) sorting
            </summary>
        </member>
        <member name="M:DevGrep.ListViewInt32Sort.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="sortColumn">Column to be sorted</param>
            <param name="ascending">true, if ascending order, false otherwise</param>
        </member>
        <member name="M:DevGrep.ListViewInt32Sort.OnCompare(System.String,System.String)">
            <summary>
            Integer compare
            </summary>
        </member>
        <member name="T:DevGrep.ListViewInt64Sort">
            <summary>
            Provides integer (64 bits) sorting
            </summary>
        </member>
        <member name="M:DevGrep.ListViewInt64Sort.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="sortColumn">Column to be sorted</param>
            <param name="ascending">true, if ascending order, false otherwise</param>
        </member>
        <member name="M:DevGrep.ListViewInt64Sort.OnCompare(System.String,System.String)">
            <summary>
            Integer compare
            </summary>
        </member>
        <member name="T:DevGrep.ListViewDoubleSort">
            <summary>
            Provides floating-point sorting
            </summary>
        </member>
        <member name="M:DevGrep.ListViewDoubleSort.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="sortColumn">Column to be sorted</param>
            <param name="ascending">true, if ascending order, false otherwise</param>
        </member>
        <member name="M:DevGrep.ListViewDoubleSort.OnCompare(System.String,System.String)">
            <summary>
            Floating-point compare
            </summary>
        </member>
        <member name="T:DevGrep.ListViewSortManager">
            <summary>
            Provides sorting of ListView columns 
            </summary>
            <remarks>Aside from sorting this class also implements sort indicators
            that are drawn on the listview control.</remarks>
            <example>Assuming we have a listview control with 3 columns and the the columns
            store text, integer data and double values, we would use the following code to 
            utilize this class.
            <code lang="C#">
            // We must first provide a private member within our class the references
            // the ListViewSortManager
              public class Form1 : Form
              {
                  private ListViewSortManager m_sortMgr;
                  ...
            // Now within the constructor we must instantiate the class and configure
            // our listview object as parameters to the constructor of the
            // ListViewSortManager
                public Form1()
                {
                  m_sortMgr = new ListViewSortManager(
                  lvEntries,
                  new Type[]
                  {
                   typeof (ListViewTextCaseInsensitiveSort),
                   typeof (ListViewInt32Sort),
                   typeof (ListViewDoubleSort),
                  },
                  0, // Set default sort column (zero based index)
                  SortOrder.Ascending
                  );
            // Now we can enable sorting for the ListView control
                  m_sortMgr.SortEnabled = true;
                }
            </code>
            </example>
        </member>
        <member name="M:DevGrep.ListViewSortManager.#ctor(System.Windows.Forms.ListView,System.Type[],System.Int32,System.Windows.Forms.SortOrder)">
            <summary>
            Creates the ListView Sort Manager
            </summary>
            <param name="list">ListView that this manager will provide sorting to</param>
            <param name="comparers">Array of Types of comparers (One for each column)</param>
            <param name="column">Initial column to sort</param>
            <param name="order">Initial sort order</param>
        </member>
        <member name="M:DevGrep.ListViewSortManager.#ctor(System.Windows.Forms.ListView,System.Type[])">
            <summary>
            Creates the ListView Sort Manager
            </summary>
            <param name="list">ListView that this manager will provide sorting to</param>
            <param name="comparers">Array of Types of comparers (One for each column)</param>
        </member>
        <member name="M:DevGrep.ListViewSortManager.GetColumnComparerType(System.Int32)">
            <summary>
            Returns the type of the comparer for the given column
            </summary>
            <param name="column">Column index</param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.ListViewSortManager.SetColumnComparerType(System.Int32,System.Type)">
            <summary>
            Sets the type of the comparer for the given column
            </summary>
            <param name="column">Column index</param>
            <param name="comparerType">Comparer type</param>
        </member>
        <member name="M:DevGrep.ListViewSortManager.SetComparerTypes(System.Type[])">
            <summary>
            Reassigns the comparer types for all the columns
            </summary>
            <param name="comparers">Array of Types of comparers (One for each column)</param>
        </member>
        <member name="M:DevGrep.ListViewSortManager.Sort(System.Int32)">
            <summary>
            Sorts the rows based on the given column and the current sort order
            </summary>
            <param name="column">Column to be sorted</param>
        </member>
        <member name="M:DevGrep.ListViewSortManager.Sort(System.Int32,System.Windows.Forms.SortOrder)">
            <summary>
            Sorts the rows based on the given column and sort order
            </summary>
            <param name="column">Column to be sorted</param>
            <param name="order">Sort order</param>
        </member>
        <member name="M:DevGrep.ListViewSortManager.ColumnClick(System.Object,System.Windows.Forms.ColumnClickEventArgs)">
            <summary>
            ColumnClick event handler
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="P:DevGrep.ListViewSortManager.Column">
            <summary>
            Returns the current sort column
            </summary>
        </member>
        <member name="P:DevGrep.ListViewSortManager.SortOrder">
            <summary>
            Returns the current sort order
            </summary>
        </member>
        <member name="P:DevGrep.ListViewSortManager.SortEnabled">
            <summary>
            Enables/Disables list sorting
            </summary>
        </member>
        <member name="T:DevGrep.Classes.MatchLocation">
            <summary>
            Summary description for MatchLocation.
            </summary>
        </member>
        <member name="T:DevGrep.Classes.MatchLocationCollection">
            <summary>
            Summary description for MatchLocationCollection.
            </summary>
        </member>
        <member name="M:DevGrep.Classes.MatchLocationCollection.Add(DevGrep.Classes.MatchLocation)">
            <summary>
            Adds a CSelectionSchema object to the collection
            </summary>
            <param name="matchLocation">Object to add</param>
        </member>
        <member name="M:DevGrep.Classes.MatchLocationCollection.Remove(System.Int32)">
            <summary>
            Removes an item
            </summary>
            <param name="index">Index of the item to remove</param>
        </member>
        <member name="M:DevGrep.Classes.MatchLocationCollection.Item(System.Int32)">
            <summary>
            Returns a single item from the collection
            </summary>
            <param name="index">Index of the item to return</param>
            <returns>Returns a CSelectionSchema object</returns>
        </member>
        <member name="T:DevGrep.Classes.Misc.DefaultEntries">
            <summary>
            Summary description for DefaultEntries.
            </summary>
        </member>
        <member name="T:DevGrep.Classes.RegExTreeItem">
            <summary>
            Summary description for RegExTreeItem.
            </summary>
        </member>
        <member name="P:DevGrep.Classes.RegExTreeItem.HashCode">
            <summary>
            HashCode Property
            </summary>
            <remarks>Generates a hash based on the EntryType and EntryName.</remarks>
        </member>
        <member name="T:DevGrep.Classes.Win32Registry">
            <summary>
            Methods for reading and writing the Windows Registry
            </summary>
        </member>
        <member name="M:DevGrep.Classes.Win32Registry.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevGrep.Classes.Win32Registry.HKLMReadKey(System.String,System.String)">
            <summary>
            Reads the specified key from HKEY_Local_Machine.
            </summary>
            <param name="KeyPath">Path to the specified key. Specified as:
            Software\Microsoft\Windows\CurrentVersion</param>
            <param name="KeyName">Key name</param>
            <returns>Value contained within the registry key. If the key cannot be 
            found or the key is emptry, an empty string is returned.</returns>
        </member>
        <member name="M:DevGrep.Classes.Win32Registry.HKCUReadKey(System.String,System.String)">
            <summary>
            Reads the specified key from HKEY_Current_User.
            </summary>
            <param name="KeyPath">Path to the specified key. Specified as:
            Software\Microsoft\Windows\CurrentVersion</param>
            <param name="KeyName">Key name</param>
            <returns>Value contained within the registry key. If the key cannot be 
            found or the key is emptry, an empty string is returned.</returns>
        </member>
        <member name="M:DevGrep.Classes.Win32Registry.HKLMReadKeys(System.String)">
            <summary>
            Returns a string array of all key values at the specified registry 
            location.
            </summary>
            <param name="KeyPath">Path to the values to read.Specified as:
            Software\Microsoft\Windows\CurrentVersion</param>
            <returns>String array containing all values read from the registry</returns>
        </member>
        <member name="M:DevGrep.Classes.Win32Registry.HKLMReadKeysNVPair(System.String)">
            <summary>
            Reads all keys at the specified registry location and returns the key
            names and values as ListItem objects in a ListItemCollection.
            </summary>
            <param name="KeyPath">Path to the values to read.Specified as:
            Software\Microsoft\Windows\CurrentVersion</param>
            <returns>All key names and values are returned as ListItem objects 
            in a ListItemCollection.</returns>
        </member>
        <member name="T:DevGrep.Classes.SearchTask">
            <summary>
            Summary description for SearchTask.
            </summary>
        </member>
        <member name="T:DevGrep.Classes.SearchTaskCollection">
            <summary>
            Summary description for SearchTaskCollection.
            </summary>
        </member>
        <member name="M:DevGrep.Classes.SearchTaskCollection.Add(DevGrep.Classes.SearchTask)">
            <summary>
            Adds a SearchTask object to the collection
            </summary>
            <param name="searchTask">Object to add</param>
        </member>
        <member name="M:DevGrep.Classes.SearchTaskCollection.Remove(System.Int32)">
            <summary>
            Removes an item
            </summary>
            <param name="index">Index of the item to remove</param>
        </member>
        <member name="M:DevGrep.Classes.SearchTaskCollection.Item(System.Int32)">
            <summary>
            Returns a single item from the collection
            </summary>
            <param name="index">Index of the item to return</param>
            <returns>Returns a SearchTask object</returns>
        </member>
        <member name="T:DevGrep.Classes.TaskbarNotifier">
            <summary>
            TaskbarNotifier allows to display MSN style/Skinned instant messaging popups
            </summary>
        </member>
        <member name="M:DevGrep.Classes.TaskbarNotifier.#ctor">
            <summary>
            The Constructor for TaskbarNotifier
            </summary>
        </member>
        <member name="M:DevGrep.Classes.TaskbarNotifier.Show(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Displays the popup for a certain amount of time
            </summary>
            <param name="strTitle">The string which will be shown as the title of the popup</param>
            <param name="strContent">The string which will be shown as the content of the popup</param>
            <param name="nTimeToShow">Duration of the showing animation (in milliseconds)</param>
            <param name="nTimeToStay">Duration of the visible state before collapsing (in milliseconds)</param>
            <param name="nTimeToHide">Duration of the hiding animation (in milliseconds)</param>
            <returns>Nothing</returns>
        </member>
        <member name="M:DevGrep.Classes.TaskbarNotifier.Hide">
            <summary>
            Hides the popup
            </summary>
            <returns>Nothing</returns>
        </member>
        <member name="M:DevGrep.Classes.TaskbarNotifier.SetBackgroundBitmap(System.String,System.Drawing.Color)">
            <summary>
            Sets the background bitmap and its transparency color
            </summary>
            <param name="strFilename">Path of the Background Bitmap on the disk</param>
            <param name="transparencyColor">Color of the Bitmap which won't be visible</param>
            <returns>Nothing</returns>
        </member>
        <member name="M:DevGrep.Classes.TaskbarNotifier.SetBackgroundBitmap(System.Drawing.Image,System.Drawing.Color)">
            <summary>
            Sets the background bitmap and its transparency color
            </summary>
            <param name="image">Image/Bitmap object which represents the Background Bitmap</param>
            <param name="transparencyColor">Color of the Bitmap which won't be visible</param>
            <returns>Nothing</returns>
        </member>
        <member name="M:DevGrep.Classes.TaskbarNotifier.SetCloseBitmap(System.String,System.Drawing.Color,System.Drawing.Point)">
            <summary>
            Sets the 3-State Close Button bitmap, its transparency color and its coordinates
            </summary>
            <param name="strFilename">Path of the 3-state Close button Bitmap on the disk (width must a multiple of 3)</param>
            <param name="transparencyColor">Color of the Bitmap which won't be visible</param>
            <param name="position">Location of the close button on the popup</param>
            <returns>Nothing</returns>
        </member>
        <member name="M:DevGrep.Classes.TaskbarNotifier.SetCloseBitmap(System.Drawing.Image,System.Drawing.Color,System.Drawing.Point)">
            <summary>
            Sets the 3-State Close Button bitmap, its transparency color and its coordinates
            </summary>
            <param name="image">Image/Bitmap object which represents the 3-state Close button Bitmap (width must be a multiple of 3)</param>
            <param name="transparencyColor">Color of the Bitmap which won't be visible</param>
            /// <param name="position">Location of the close button on the popup</param>
            <returns>Nothing</returns>
        </member>
        <member name="P:DevGrep.Classes.TaskbarNotifier.TaskbarState">
            <summary>
            Get the current TaskbarState (hidden, showing, visible, hiding)
            </summary>
        </member>
        <member name="P:DevGrep.Classes.TaskbarNotifier.TitleText">
            <summary>
            Get/Set the popup Title Text
            </summary>
        </member>
        <member name="P:DevGrep.Classes.TaskbarNotifier.ContentText">
            <summary>
            Get/Set the popup Content Text
            </summary>
        </member>
        <member name="P:DevGrep.Classes.TaskbarNotifier.NormalTitleColor">
            <summary>
            Get/Set the Normal Title Color
            </summary>
        </member>
        <member name="P:DevGrep.Classes.TaskbarNotifier.HoverTitleColor">
            <summary>
            Get/Set the Hover Title Color
            </summary>
        </member>
        <member name="P:DevGrep.Classes.TaskbarNotifier.NormalContentColor">
            <summary>
            Get/Set the Normal Content Color
            </summary>
        </member>
        <member name="P:DevGrep.Classes.TaskbarNotifier.HoverContentColor">
            <summary>
            Get/Set the Hover Content Color
            </summary>
        </member>
        <member name="P:DevGrep.Classes.TaskbarNotifier.NormalTitleFont">
            <summary>
            Get/Set the Normal Title Font
            </summary>
        </member>
        <member name="P:DevGrep.Classes.TaskbarNotifier.HoverTitleFont">
            <summary>
            Get/Set the Hover Title Font
            </summary>
        </member>
        <member name="P:DevGrep.Classes.TaskbarNotifier.NormalContentFont">
            <summary>
            Get/Set the Normal Content Font
            </summary>
        </member>
        <member name="P:DevGrep.Classes.TaskbarNotifier.HoverContentFont">
            <summary>
            Get/Set the Hover Content Font
            </summary>
        </member>
        <member name="P:DevGrep.Classes.TaskbarNotifier.KeepVisibleOnMousOver">
            <summary>
            Indicates if the popup should remain visible when the mouse pointer is over it.
            Added Rev 002
            </summary>
        </member>
        <member name="P:DevGrep.Classes.TaskbarNotifier.ReShowOnMouseOver">
            <summary>
            Indicates if the popup should appear again when mouse moves over it while it's disappearing.
            Added Rev 002
            </summary>
        </member>
        <member name="T:DevGrep.Classes.TaskbarNotifier.TaskbarStates">
            <summary>
            List of the different popup animation status
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.CellEditAtEdgeBehaviour">
            <summary>
            Indicates the behavior of a key when a cell "on the edge" is being edited.
            and the normal behavior of that key would exceed the edge. For example,
            for a key that normally moves one column to the left, the "edge" would be 
            the left most column, since the normal action of the key cannot be taken
            (since there are no more columns to the left).
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.CellEditAtEdgeBehaviour.Ignore">
            <summary>
            The key press will be ignored
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.CellEditAtEdgeBehaviour.Wrap">
            <summary>
            The key press will result in the cell editing wrapping to the 
            cell on the opposite edge.
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.CellEditAtEdgeBehaviour.ChangeColumn">
            <summary>
            The key press will wrap, but the column will be changed to the 
            appropiate adjacent column. This only makes sense for keys where
            the normal action is ChangeRow.
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.CellEditAtEdgeBehaviour.ChangeRow">
            <summary>
            The key press will wrap, but the row will be changed to the 
            appropiate adjacent row. This only makes sense for keys where
            the normal action is ChangeColumn.
            </summary>        
        </member>
        <member name="F:DevGrep.Controls.DLV.CellEditAtEdgeBehaviour.EndEdit">
            <summary>
            The key will result in the current edit operation being ended.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.CellEditCharacterBehaviour">
            <summary>
            Indicates the normal behaviour of a key when used during a cell edit
            operation.
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.CellEditCharacterBehaviour.Ignore">
            <summary>
            The key press will be ignored
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.CellEditCharacterBehaviour.ChangeColumnLeft">
            <summary>
            The key press will end the current edit and begin an edit
            operation on the next editable cell to the left.
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.CellEditCharacterBehaviour.ChangeColumnRight">
            <summary>
            The key press will end the current edit and begin an edit
            operation on the next editable cell to the right.
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.CellEditCharacterBehaviour.ChangeRowUp">
            <summary>
            The key press will end the current edit and begin an edit
            operation on the row above.
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.CellEditCharacterBehaviour.ChangeRowDown">
            <summary>
            The key press will end the current edit and begin an edit
            operation on the row below
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.CellEditCharacterBehaviour.CancelEdit">
            <summary>
            The key press will cancel the current edit
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.CellEditCharacterBehaviour.EndEdit">
            <summary>
            The key press will finish the current edit operation
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.CellEditCharacterBehaviour.CustomVerb1">
            <summary>
            Custom verb that can be used for specialized actions.
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.CellEditCharacterBehaviour.CustomVerb2">
            <summary>
            Custom verb that can be used for specialized actions.
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.CellEditCharacterBehaviour.CustomVerb3">
            <summary>
            Custom verb that can be used for specialized actions.
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.CellEditCharacterBehaviour.CustomVerb4">
            <summary>
            Custom verb that can be used for specialized actions.
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.CellEditCharacterBehaviour.CustomVerb5">
            <summary>
            Custom verb that can be used for specialized actions.
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.CellEditCharacterBehaviour.CustomVerb6">
            <summary>
            Custom verb that can be used for specialized actions.
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.CellEditCharacterBehaviour.CustomVerb7">
            <summary>
            Custom verb that can be used for specialized actions.
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.CellEditCharacterBehaviour.CustomVerb8">
            <summary>
            Custom verb that can be used for specialized actions.
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.CellEditCharacterBehaviour.CustomVerb9">
            <summary>
            Custom verb that can be used for specialized actions.
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.CellEditCharacterBehaviour.CustomVerb10">
            <summary>
            Custom verb that can be used for specialized actions.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.CellEditKeyEngine">
            <summary>
            Instances of this class handle key presses during a cell edit operation.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.CellEditKeyEngine.SetKeyBehaviour(System.Windows.Forms.Keys,DevGrep.Controls.DLV.CellEditCharacterBehaviour,DevGrep.Controls.DLV.CellEditAtEdgeBehaviour)">
            <summary>
            Sets the behaviour of a given key
            </summary>
            <param name="key"></param>
            <param name="normalBehaviour"></param>
            <param name="atEdgeBehaviour"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.CellEditKeyEngine.HandleKey(DevGrep.Controls.DLV.ObjectListView,System.Windows.Forms.Keys)">
            <summary>
            Handle a key press
            </summary>
            <param name="olv"></param>
            <param name="keyData"></param>
            <returns>True if the key was completely handled.</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.CellEditKeyEngine.InitializeCellEditKeyMaps">
            <summary>
            Setup the default key mapping
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.CellEditKeyEngine.HandleEndEdit">
            <summary>
            Handle the end edit command
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.CellEditKeyEngine.HandleCancelEdit">
            <summary>
            Handle the cancel edit command
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.CellEditKeyEngine.HandleCustomVerb(System.Windows.Forms.Keys,DevGrep.Controls.DLV.CellEditCharacterBehaviour)">
            <summary>
            Placeholder that subclasses can override to handle any custom verbs
            </summary>
            <param name="keyData"></param>
            <param name="behaviour"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.CellEditKeyEngine.HandleRowChange(System.Windows.Forms.Keys,DevGrep.Controls.DLV.CellEditCharacterBehaviour)">
            <summary>
            Handle a change row command
            </summary>
            <param name="keyData"></param>
            <param name="behaviour"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.CellEditKeyEngine.HandleColumnChange(System.Windows.Forms.Keys,DevGrep.Controls.DLV.CellEditCharacterBehaviour)">
            <summary>
            Handle a change column command
            </summary>
            <param name="keyData"></param>
            <param name="behaviour"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.CellEditKeyEngine.StartCellEditIfDifferent(DevGrep.Controls.DLV.OLVListItem,System.Int32)">
            <summary>
            Start editing the indicated cell if that cell is not already being edited
            </summary>
            <param name="olvi">The row to edit</param>
            <param name="subItemIndex">The cell within that row to edit</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.CellEditKeyEngine.GetAdjacentItemOrNull(DevGrep.Controls.DLV.OLVListItem,System.Boolean)">
            <summary>
            Gets the adjacent item to the given item in the given direction
            </summary>
            <param name="olvi">The row whose neighbour is sought</param>
            <param name="up">The direction of the adjacentness</param>
            <returns>An OLVListView adjacent to the given item, or null if there are no more items in that direction.</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.CellEditKeyEngine.GetAdjacentItem(DevGrep.Controls.DLV.OLVListItem,System.Boolean)">
            <summary>
            Gets the adjacent item to the given item in the given direction, wrapping if needed.
            </summary>
            <param name="olvi">The row whose neighbour is sought</param>
            <param name="up">The direction of the adjacentness</param>
            <returns>An OLVListView adjacent to the given item, or null if there are no more items in that direction.</returns>
        </member>
        <member name="P:DevGrep.Controls.DLV.CellEditKeyEngine.ListView">
            <summary>
            Gets or sets the ObjectListView on which the current key is being handled.
            This cannot be null.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.CellEditKeyEngine.ItemBeingEdited">
            <summary>
            Gets the row of the cell that is currently being edited
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.CellEditKeyEngine.SubItemIndexBeingEdited">
            <summary>
            Gets the index of the column of the cell that is being edited
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.CellEditKeyEngine.CellEditKeyMap">
            <summary>
            Gets or sets the map that remembers the normal behaviour of keys
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.CellEditKeyEngine.CellEditKeyAtEdgeBehaviourMap">
            <summary>
            Gets or sets the map that remembers the desired behaviour of keys 
            on edge cases.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.CellEditKeyEngine.EditableColumnsInDisplayOrder">
            <summary>
            Gets a collection of columns that are editable in the order they are shown to the user
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.ComboBoxItem">
            <summary>
            These items allow combo boxes to remember a value and its description.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.AutoCompleteCellEditor">
            <summary>
            This editor shows and auto completes values from the given listview column.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.AutoCompleteCellEditor.#ctor(DevGrep.Controls.DLV.ObjectListView,DevGrep.Controls.DLV.OLVColumn)">
            <summary>
            Create an AutoCompleteCellEditor
            </summary>
            <param name="lv"></param>
            <param name="column"></param>
        </member>
        <member name="T:DevGrep.Controls.DLV.EnumCellEditor">
            <summary>
            This combo box is specialised to allow editing of an enum.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.IntUpDown">
            <summary>
            This editor simply shows and edits integer values.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.UintUpDown">
            <summary>
            This editor simply shows and edits unsigned integer values.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.BooleanCellEditor">
            <summary>
            This editor simply shows and edits boolean values.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.BooleanCellEditor2">
            <summary>
            This editor simply shows and edits boolean values using a checkbox
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.FloatCellEditor">
            <summary>
            This editor simply shows and edits floating point values.
            </summary>
            <remarks>You can intercept the CellEditStarting event if you want
            to change the characteristics of the editor. For example, by increasing
            the number of decimal places.</remarks>
        </member>
        <member name="T:DevGrep.Controls.DLV.EditorCreatorDelegate">
            <summary>
            A delegate that creates an editor for the given value
            </summary>
            <param name="model">The model from which that value came</param>
            <param name="column">The column for which the editor is being created</param>
            <param name="value">A representative value of the type to be edited. This value may not be the exact
            value for the column/model combination. It could be simply representative of
            the appropriate type of value.</param>
            <returns>A control which can edit the given value</returns>
        </member>
        <member name="T:DevGrep.Controls.DLV.EditorRegistry">
            <summary>
            An editor registry gives a way to decide what cell editor should be used to edit
            the value of a cell. Programmers can register non-standard types and the control that 
            should be used to edit instances of that type. 
            </summary>
            <remarks>
            <para>All ObjectListViews share the same editor registry.</para>
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.EditorRegistry.#ctor">
            <summary>
            Create an EditorRegistry
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.EditorRegistry.Register(System.Type,System.Type)">
            <summary>
            Register that values of 'type' should be edited by instances of 'controlType'.
            </summary>
            <param name="type">The type of value to be edited</param>
            <param name="controlType">The type of the Control that will edit values of 'type'</param>
            <example>
            ObjectListView.EditorRegistry.Register(typeof(Color), typeof(MySpecialColorEditor));
            </example>
        </member>
        <member name="M:DevGrep.Controls.DLV.EditorRegistry.Register(System.Type,DevGrep.Controls.DLV.EditorCreatorDelegate)">
            <summary>
            Register the given delegate so that it is called to create editors
            for values of the given type
            </summary>
            <param name="type">The type of value to be edited</param>
            <param name="creator">The delegate that will create a control that can edit values of 'type'</param>
            <example>
            ObjectListView.EditorRegistry.Register(typeof(Color), CreateColorEditor);
            ...
            public Control CreateColorEditor(Object model, OLVColumn column, Object value)
            {
                return new MySpecialColorEditor();
            }
            </example>
        </member>
        <member name="M:DevGrep.Controls.DLV.EditorRegistry.RegisterDefault(DevGrep.Controls.DLV.EditorCreatorDelegate)">
            <summary>
            Register a delegate that will be called to create an editor for values
            that have not been handled.
            </summary>
            <param name="creator">The delegate that will create a editor for all other types</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.EditorRegistry.RegisterFirstChance(DevGrep.Controls.DLV.EditorCreatorDelegate)">
            <summary>
            Register a delegate that will be given a chance to create a control
            before any other option is considered.
            </summary>
            <param name="creator">The delegate that will create a control</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.EditorRegistry.GetEditor(System.Object,DevGrep.Controls.DLV.OLVColumn,System.Object)">
            <summary>
            Create and return an editor that is appropriate for the given value.
            Return null if no appropriate editor can be found.
            </summary>
            <param name="model">The model involved</param>
            <param name="column">The column to be edited</param>
            <param name="value">The value to be edited. This value may not be the exact
            value for the column/model combination. It could be simply representative of
            the appropriate type of value.</param>
            <returns>A Control that can edit the given type of values</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.EditorRegistry.CreateEnumEditor(System.Type)">
            <summary>
            Create and return an editor that will edit values of the given type
            </summary>
            <param name="type">A enum type</param>
        </member>
        <member name="T:DevGrep.Controls.DLV.DataListView">
            <summary>
            A DataListView is a ListView that can be bound to a datasource (which would normally be a DataTable or DataView).
            </summary>
            <remarks>
            <para>This listview keeps itself in sync with its source datatable by listening for change events.</para>
            <para>If the listview has no columns when given a data source, it will automatically create columns to show all of the datatables columns.
            This will be only the simplest view of the world, and would look more interesting with a few delegates installed.</para>
            <para>This listview will also automatically generate missing aspect getters to fetch the values from the data view.</para>
            <para>Changing data sources is possible, but error prone. Before changing data sources, the programmer is responsible for modifying/resetting
            the column collection to be valid for the new data source.</para>
            <para>Internally, a CurrencyManager controls keeping the data source in-sync with other users of the data source (as per normal .NET
            behavior). This means that the model objects in the DataListView are DataRowView objects. If you write your own AspectGetters/Setters,
            they will be given DataRowView objects.</para>
            </remarks>
        </member>
        <member name="T:DevGrep.Controls.DLV.ObjectListView">
            <summary>
            An ObjectListView is a much easier to use, and much more powerful, version of the ListView.
            </summary>
            <remarks>
            <para>
            An ObjectListView automatically populates a ListView control with information taken 
            from a given collection of objects. It can do this because each column is configured
            to know which bit of the model object (the "aspect") it should be displaying. Columns similarly
            understand how to sort the list based on their aspect, and how to construct groups
            using their aspect.
            </para>
            <para>
            Aspects are extracted by giving the name of a method to be called or a
            property to be fetched. These names can be simple names or they can be dotted
            to chain property access e.g. "Owner.Address.Postcode".
            Aspects can also be extracted by installing a delegate.
            </para>
            <para>
            An ObjectListView can show a "this list is empty" message when there is nothing to show in the list, 
            so that the user knows the control is supposed to be empty.
            </para>
            <para>
            Right clicking on a column header should present a menu which can contain:
            commands (sort, group, ungroup); filtering; and column selection. Whether these
            parts of the menu appear is controlled by ShowCommandMenuOnRightClick, 
            ShowFilterMenuOnRightClick and SelectColumnsOnRightClick respectively.
            </para>
            <para>
            The groups created by an ObjectListView can be configured to include other formatting
            information, including a group icon, subtitle and task button. Using some undocumented
            interfaces, these groups can even on virtual lists.
            </para>
            <para>
            ObjectListView supports dragging rows to other places, including other application. 
            Special support is provide for drops from other ObjectListViews in the same application. 
            In many cases, an ObjectListView becomes a full drag source by setting <see cref="P:DevGrep.Controls.DLV.ObjectListView.IsSimpleDragSource"/> to 
            true. Similarly, to accept drops, it is usually enough to set <see cref="P:DevGrep.Controls.DLV.ObjectListView.IsSimpleDropSink"/> to true, 
            and then handle the <see cref="E:DevGrep.Controls.DLV.ObjectListView.CanDrop"/>  and <see cref="E:DevGrep.Controls.DLV.ObjectListView.Dropped"/>  events (or the <see cref="E:DevGrep.Controls.DLV.ObjectListView.ModelCanDrop"/>  and 
            <see cref="E:DevGrep.Controls.DLV.ObjectListView.ModelDropped"/> events, if you only want to handle drops from other ObjectListViews in your application).
            </para>
            <para>
            For these classes to build correctly, the project must have references to these assemblies:
            </para>
            <list type="bullet">
            <item><description>System</description></item>
            <item><description>System.Data</description></item>
            <item><description>System.Design</description></item>
            <item><description>System.Drawing</description></item>
            <item><description>System.Windows.Forms (obviously)</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:DevGrep.Controls.DLV.ObjectListView.SORT_INDICATOR_UP_KEY">
            <summary>
            The name of the image used when a column is sorted ascending
            </summary>
            <remarks>This image is only used on pre-XP systems. System images are used for XP and later</remarks>
        </member>
        <member name="F:DevGrep.Controls.DLV.ObjectListView.SORT_INDICATOR_DOWN_KEY">
            <summary>
            The name of the image used when a column is sorted descending
            </summary>
            <remarks>This image is only used on pre-XP systems. System images are used for XP and later</remarks>
        </member>
        <member name="F:DevGrep.Controls.DLV.ObjectListView.CHECKED_KEY">
            <summary>
            The name of the image used when a check box is checked
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.ObjectListView.UNCHECKED_KEY">
            <summary>
            The name of the image used when a check box is unchecked
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.ObjectListView.INDETERMINATE_KEY">
            <summary>
            The name of the image used when a check box is Indeterminate
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnAboutToCreateGroups(DevGrep.Controls.DLV.CreateGroupsEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnBeforeCreatingGroups(DevGrep.Controls.DLV.CreateGroupsEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnAfterCreatingGroups(DevGrep.Controls.DLV.CreateGroupsEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnAfterSearching(DevGrep.Controls.DLV.AfterSearchingEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnAfterSorting(DevGrep.Controls.DLV.AfterSortingEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnBeforeSearching(DevGrep.Controls.DLV.BeforeSearchingEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnBeforeSorting(DevGrep.Controls.DLV.BeforeSortingEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnCanDrop(DevGrep.Controls.DLV.OlvDropEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnCellClick(DevGrep.Controls.DLV.CellClickEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnCellOver(DevGrep.Controls.DLV.CellOverEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnCellRightClick(DevGrep.Controls.DLV.CellRightClickEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnCellToolTip(DevGrep.Controls.DLV.ToolTipShowingEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnSubItemChecking(DevGrep.Controls.DLV.SubItemCheckingEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnColumnRightClick(System.Windows.Forms.ColumnClickEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnDropped(DevGrep.Controls.DLV.OlvDropEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnFilter(DevGrep.Controls.DLV.FilterEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnFormatCell(DevGrep.Controls.DLV.FormatCellEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnFormatRow(DevGrep.Controls.DLV.FormatRowEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnFreezing(DevGrep.Controls.DLV.FreezeEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnHeaderToolTip(DevGrep.Controls.DLV.ToolTipShowingEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnHotItemChanged(DevGrep.Controls.DLV.HotItemChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnHyperlinkClicked(DevGrep.Controls.DLV.HyperlinkClickedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnGroupTaskClicked(DevGrep.Controls.DLV.GroupTaskClickedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnIsHyperlink(DevGrep.Controls.DLV.IsHyperlinkEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnItemsAdding(DevGrep.Controls.DLV.ItemsAddingEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnItemsChanged(DevGrep.Controls.DLV.ItemsChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnItemsChanging(DevGrep.Controls.DLV.ItemsChangingEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnItemsRemoving(DevGrep.Controls.DLV.ItemsRemovingEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnModelCanDrop(DevGrep.Controls.DLV.ModelDropEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnModelDropped(DevGrep.Controls.DLV.ModelDropEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnSelectionChanged(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnScroll(System.Windows.Forms.ScrollEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnCellEditStarting(DevGrep.Controls.DLV.CellEditEventArgs)">
            <summary>
            Tell the world when a cell is about to be edited.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnCellEditorValidating(DevGrep.Controls.DLV.CellEditEventArgs)">
            <summary>
            Tell the world when a cell is about to finish being edited.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnCellEditFinishing(DevGrep.Controls.DLV.CellEditEventArgs)">
            <summary>
            Tell the world when a cell is about to finish being edited.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.#ctor">
            <summary>
            Create an ObjectListView
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.Dispose(System.Boolean)">
            <summary>
            Dispose of any resources this instance has been using
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ExportToXLS(System.String)">
            <summary>
            Exports the contexts of the ListView to an Excel file.
            </summary>
            <param name="outputFilename">The output filename.</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.EnumerableToArray(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Convert the given enumerable into an ArrayList as efficiently as possible
            </summary>
            <param name="collection">The source collection</param>
            <param name="alwaysCreate">If true, this method will always create a new
            collection.</param>
            <returns>An ArrayList with the same contents as the given collection.</returns>
            <remarks>
            <para>When we move to .NET 3.5, we can use LINQ and not need this method.</para>
            </remarks>
        </member>
        <member name="F:DevGrep.Controls.DLV.ObjectListView.EditorRegistry">
            <summary>
            This registry decides what control should be used to edit what cells, based
            on the type of the value in the cell.
            </summary>
            <see cref="F:DevGrep.Controls.DLV.ObjectListView.EditorRegistry"/>
            <remarks>All instances of ObjectListView share the same editor registry.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.AddObject(System.Object)">
            <summary>
            Add the given model object to this control.
            </summary>
            <param name="modelObject">The model object to be displayed</param>
            <remarks>See AddObjects() for more details</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.AddObjects(System.Collections.ICollection)">
            <summary>
            Add the given collection of model objects to this control.
            </summary>
            <param name="modelObjects">A collection of model objects</param>
            <remarks>
            <para>The added objects will appear in their correct sort position, if sorting
            is active (i.e. if LastSortColumn is not null). Otherwise, they will appear at the end of the list.</para>
            <para>No check is performed to see if any of the objects are already in the ListView.</para>
            <para>Null objects are silently ignored.</para>
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.AutoResizeColumns">
            <summary>
            Resize the columns to the maximum of the header width and the data.
            </summary>		
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.BuildGroups">
            <summary>
            Organise the view items into groups, based on the last sort column or the first column
            if there is no last sort column
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.BuildGroups(DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.SortOrder)">
            <summary>
            Organise the view items into groups, based on the given column
            </summary>
            <remarks>
            <para>
            If the AlwaysGroupByColumn property is not null,
            the list view items will be organisd by that column,
            and the 'column' parameter will be ignored.
            </para>
            <para>This method triggers sorting events: BeforeSorting and AfterSorting.</para>
            </remarks>
            <param name="column">The column whose values should be used for sorting.</param>
            <param name="order"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.BuildGroups(DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.SortOrder,DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.SortOrder,DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.SortOrder)">
            <summary>
            Organise the view items into groups, based on the given columns
            </summary>
            <param name="groupByColumn">What column will be used for grouping</param>
            <param name="groupByOrder">What ordering will be used for groups</param>
            <param name="column">The column whose values should be used for sorting. Cannot be null</param>
            <param name="order">The order in which the values from column will be sorted</param>
            <param name="secondaryColumn">When the values from 'column' are equal, use the values provided by this column</param>
            <param name="secondaryOrder">How will the secondary values be sorted</param>
            <remarks>This method does not trigger sorting events. Use BuildGroups() to do that</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.CollectGroupingParameters(DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.SortOrder,DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.SortOrder,DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.SortOrder)">
            <summary>
            Collect and return all the variables that influence the creation of groups
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.MakeGroups(DevGrep.Controls.DLV.GroupingParameters)">
            <summary>
            Make a list of groups that should be shown according to the given parameters
            </summary>
            <param name="parms"></param>
            <returns>The list of groups to be created</returns>
            <remarks>This should not change the state of the control. It is possible that the
            groups created will not be used. They may simply be discarded.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.BuildList">
            <summary>
            Build/rebuild all the list view items in the list
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.BuildList(System.Boolean)">
            <summary>
            Build/rebuild all the list view items in the list
            </summary>
            <param name="shouldPreserveState">If this is true, the control will try to preserve the selection,
            focused item, and the scroll position (see Remarks)
            </param>
            <remarks>
            <para>
            Use this method in situations were the contents of the list is basically the same
            as previously.
            </para>
            <para>
            Due to limitations in .NET's ListView, the scroll position is only preserved if
            the control is in Details view AND it is not showing groups.
            </para>
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ApplyExtendedStyles">
            <summary>
            Apply all required extended styles to our control.
            </summary>
            <remarks>
            <para>
            Whenever .NET code sets an extended style, it erases all other extended styles
            that it doesn't use. So, we have to explicit reapply the styles that we have
            added.
            </para>
            <para>
            Normally, we would override CreateParms property and update
            the ExStyle member, but ListView seems to ignore all ExStyles that
            it doesn't already know about. Worse, when we set the LVS_EX_HEADERINALLVIEWS 
            value, bad things happen (the control crashes!).
            </para>
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.CalculateReasonableTileSize">
            <summary>
            Give the listview a reasonable size of its tiles, based on the number of lines of
            information that each tile is going to display.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ChangeToFilteredColumns(System.Windows.Forms.View)">
            <summary>
            Rebuild this list for the given view
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ClearObjects">
            <summary>
            Remove all items from this list
            </summary>
            <remark>This method can safely be called from background threads.</remark>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ClearUrlVisited">
            <summary>
            Reset the memory of which URLs have been visited
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.CopySelectionToClipboard">
            <summary>
            Copy a text and html representation of the selected rows onto the clipboard.
            </summary>
            <remarks>Be careful when using this with virtual lists. If the user has selected
            10,000,000 rows, this method will faithfully try to copy all of them to the clipboard.
            From the user's point of view, your program will appear to have hung.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.CopyObjectsToClipboard(System.Collections.IList)">
            <summary>
            Copy a text and html representation of the given objects onto the clipboard.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ObjectsToHtml(System.Collections.IList)">
            <summary>
            Return a html representation of the given objects
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.DeselectAll">
            <summary>
            Deselect all rows in the listview
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.EnableCustomSelectionColors">
            <summary>
            Setup the list so it will draw selected rows using custom colours.
            </summary>
            <remarks>
            This method makes the list owner drawn, and ensures that all columns have at
            least a BaseRender installed.
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.GetNextItem(DevGrep.Controls.DLV.OLVListItem)">
            <summary>
            Return the ListViewItem that appears immediately after the given item.
            If the given item is null, the first item in the list will be returned.
            Return null if the given item is the last item.
            </summary>
            <param name="itemToFind">The item that is before the item that is returned, or null</param>
            <returns>A ListViewItem</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.GetLastItemInDisplayOrder">
            <summary>
            Return the last item in the order they are shown to the user.
            If the control is not grouped, the display order is the same as the
            sorted list order. But if the list is grouped, the display order is different.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.GetNthItemInDisplayOrder(System.Int32)">
            <summary>
            Return the n'th item (0-based) in the order they are shown to the user.
            If the control is not grouped, the display order is the same as the
            sorted list order. But if the list is grouped, the display order is different.
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.GetItemIndexInDisplayOrder(System.Windows.Forms.ListViewItem)">
            <summary>
            Return the index of the given ListViewItem as it currently shown to the user.
            If the control is not grouped, the display order is the same as the
            sorted list order. But if the list is grouped, the display order is different.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.GetPreviousItem(DevGrep.Controls.DLV.OLVListItem)">
            <summary>
            Return the ListViewItem that appears immediately before the given item.
            If the given item is null, the last item in the list will be returned.
            Return null if the given item is the first item.
            </summary>
            <param name="itemToFind">The item that is before the item that is returned</param>
            <returns>A ListViewItem</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.InsertObjects(System.Int32,System.Collections.ICollection)">
             <summary>
             Insert the given collection of objects before the given position
             </summary>
             <param name="index">Where to insert the objects</param>
             <param name="modelObjects">The objects to be inserted</param>
             <remarks>
             <para>
             This operation only makes sense of non-sorted, non-grouped
             lists, since any subsequent sort/group operation will rearrange
             the list.
             </para>
             <para>This method only works on ObjectListViews and FastObjectListViews.</para>
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.IsSelected(System.Object)">
            <summary>
            Return true if the row representing the given model is selected
            </summary>
            <param name="model">The model object to look for</param>
            <returns>Is the row selected</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.IsUrlVisited(System.String)">
            <summary>
            Has the given URL been visited?
            </summary>
            <param name="url">The string to be consider</param>
            <returns>Has it been visited</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.LowLevelScroll(System.Int32,System.Int32)">
            <summary>
            Scroll the ListView by the given deltas.
            </summary>
            <param name="dx">Horizontal delta</param>
            <param name="dy">Vertical delta</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.MarkUrlVisited(System.String)">
            <summary>
            Remember that the given URL has been visited
            </summary>
            <param name="url">The url to be remembered</param>
            <remarks>This does not cause the control be redrawn</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.MoveObjects(System.Int32,System.Collections.ICollection)">
            <summary>
            Move the given collection of objects to the given index.
            </summary>
            <remarks>This operation only makes sense on non-grouped ObjectListViews.</remarks>
            <param name="index"></param>
            <param name="modelObjects"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HitTest(System.Int32,System.Int32)">
            <summary>
            Calculate what item is under the given point?
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OlvHitTest(System.Int32,System.Int32)">
            <summary>
            What is under the given point? This takes the various parts of a cell into accout, including
            any custom parts that a custom renderer might use
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>An information block about what is under the point</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.CalculateStandardHitTest(DevGrep.Controls.DLV.OlvListViewHitTestInfo,System.Int32,System.Int32)">
            <summary>
            Perform a hit test when the control is not owner drawn
            </summary>
            <param name="hti"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.CalculateOwnerDrawnHitTest(DevGrep.Controls.DLV.OlvListViewHitTestInfo,System.Int32,System.Int32)">
            <summary>
            Perform a hit test when the control is owner drawn. This hands off responsibility
            to the renderer.
            </summary>
            <param name="hti"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.PauseAnimations(System.Boolean)">
            <summary>
            Pause (or unpause) all animations in the list
            </summary>
            <param name="isPause">true to pause, false to unpause</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.RebuildColumns">
            <summary>
            Rebuild the columns based upon its current view and column visibility settings
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.RemoveObject(System.Object)">
            <summary>
            Remove the given model object from the ListView
            </summary>
            <param name="modelObject">The model to be removed</param>
            <remarks>See RemoveObjects() for more details
            <para>This method is thread-safe.</para>
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.RemoveObjects(System.Collections.ICollection)">
            <summary>
            Remove all of the given objects from the control.
            </summary>
            <param name="modelObjects">Collection of objects to be removed</param>
            <remarks>
            <para>Nulls and model objects that are not in the ListView are silently ignored.</para>
            <para>This method is thread-safe.</para>
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.SelectAll">
            <summary>
            Select all rows in the listview
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.SetNativeBackgroundWatermark(System.Drawing.Image)">
            <summary>
            Set the given image to be fixed in the bottom right of the list view.
            This image will not scroll when the list view scrolls.
            </summary>
            <remarks>
            <para>
            This method uses ListView's native ability to display a background image.
            It has a few limitations: 
            </para>
            <list type="bullet">
            <item><description>It doesn't work well with owner drawn mode. In owner drawn mode, each cell draws itself,
            including its background, which covers the background image.</description></item>
            <item><description>It doesn't look very good when grid lines are enabled, since the grid lines are drawn over the image.</description></item>
            <item><description>It does not work at all on XP.</description></item>
            <item><description>Obviously, it doesn't look good when alternate row background colors are enabled.</description></item>
            </list>
            <para>
            If you can live with these limitations, native watermarks are quite neat. They are true backgrounds, not
            translucent overlays like the OverlayImage uses. They also have the decided advantage over overlays in that
            they work correctly even in MDI applications.
            </para>
            <para>Setting this clears any background image.</para>
            </remarks>
            <param name="image">The image to be drawn. If null, any existing image will be removed.</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.SetNativeBackgroundImage(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Set the given image to be background of the ListView so that it appears at the given
            percentage offsets within the list.
            </summary>
            <remarks>
            <para>This has the same limitations as described in <see cref="M:DevGrep.Controls.DLV.ObjectListView.SetNativeBackgroundWatermark(System.Drawing.Image)"/>. Make sure those limitations
            are understood before using the method.</para>
            <para>This is very similar to setting the <see cref="P:System.Windows.Forms.Control.BackgroundImage"/> property of the standard .NET ListView, except that the standard
            BackgroundImage does not handle images with transparent areas properly -- it renders transparent areas as black. This 
            method does not have that problem.</para>
            <para>Setting this clears any background watermark.</para>
            </remarks>
            <param name="image">The image to be drawn. If null, any existing image will be removed.</param>
            <param name="xOffset">The horizontal percentage where the image will be placed. 0 is absolute left, 100 is absolute right.</param>
            <param name="yOffset">The vertical percentage where the image will be placed.</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.SetNativeBackgroundTiledImage(System.Drawing.Image)">
            <summary>
            Set the given image to be the tiled background of the ListView.
            </summary>
            <remarks>
            <para>This has the same limitations as described in <see cref="M:DevGrep.Controls.DLV.ObjectListView.SetNativeBackgroundWatermark(System.Drawing.Image)"/> and <see cref="M:DevGrep.Controls.DLV.ObjectListView.SetNativeBackgroundImage(System.Drawing.Image,System.Int32,System.Int32)"/>.
            Make sure those limitations
            are understood before using the method.</para>
            </remarks>
            <param name="image">The image to be drawn. If null, any existing image will be removed.</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.SetObjects(System.Collections.IEnumerable)">
            <summary>
            Set the collection of objects that will be shown in this list view.
            </summary>
            <remark>This method can safely be called from background threads.</remark>
            <remarks>The list is updated immediately</remarks>
            <param name="collection">The objects to be displayed</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.SetObjects(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Set the collection of objects that will be shown in this list view.
            </summary>
            <remark>This method can safely be called from background threads.</remark>
            <remarks>The list is updated immediately</remarks>
            <param name="collection">The objects to be displayed</param>
            <param name="preserveState">Should the state of the list be preserved as far as is possible.</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.SaveState">
            <summary>
            Return a byte array that represents the current state of the ObjectListView, such
            that the state can be restored by RestoreState()
            </summary>
            <remarks>
            <para>The state of an ObjectListView includes the attributes that the user can modify:
            <list type="bullet">
            <item><description>current view (i.e. Details, Tile, Large Icon...)</description></item>
            <item><description>sort column and direction</description></item>
            <item><description>column order</description></item>
            <item><description>column widths</description></item>
            <item><description>column visibility</description></item>
            </list>
            </para>
            <para>
            It does not include selection or the scroll position.
            </para>
            </remarks>
            <returns>A byte array representing the state of the ObjectListView</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.RestoreState(System.Byte[])">
            <summary>
            Restore the state of the control from the given string, which must have been
            produced by SaveState()
            </summary>
            <param name="state">A byte array returned from SaveState()</param>
            <returns>Returns true if the state was restored</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HandleApplicationIdle(System.Object,System.EventArgs)">
            <summary>
            The application is idle. Trigger a SelectionChanged event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HandleApplicationIdle_ResizeColumns(System.Object,System.EventArgs)">
            <summary>
            The application is idle. Trigger a SelectionChanged event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HandleBeginScroll(System.Windows.Forms.Message@)">
            <summary>
            Handle the BeginScroll listview notification
            </summary>
            <param name="m"></param>
            <returns>True if the event was completely handled</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HandleEndScroll(System.Windows.Forms.Message@)">
            <summary>
            Handle the EndScroll listview notification
            </summary>
            <param name="m"></param>
            <returns>True if the event was completely handled</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HandleLinkClick(System.Windows.Forms.Message@)">
            <summary>
            Handle the LinkClick listview notification
            </summary>
            <param name="m"></param>
            <returns>True if the event was completely handled</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HandleCellToolTipShowing(System.Object,DevGrep.Controls.DLV.ToolTipShowingEventArgs)">
            <summary>
            The cell tooltip control wants information about the tool tip that it should show.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.headerToolTip_Showing(System.Object,DevGrep.Controls.DLV.ToolTipShowingEventArgs)">
            <summary>
            Allow the HeaderControl to call back into HandleHeaderToolTipShowing without making that method public
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HandleHeaderToolTipShowing(System.Object,DevGrep.Controls.DLV.ToolTipShowingEventArgs)">
            <summary>
            The header tooltip control wants information about the tool tip that it should show.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HandleColumnClick(System.Object,System.Windows.Forms.ColumnClickEventArgs)">
            <summary>
            Event handler for the column click event
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Override the basic message pump for this control
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HandleChar(System.Windows.Forms.Message@)">
            <summary>
            Handle the search for item m if possible.
            </summary>
            <param name="m">The m to be processed</param>
            <returns>bool to indicate if the m has been handled</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HandleContextMenu(System.Windows.Forms.Message@)">
            <summary>
            The user wants to see the context menu.
            </summary>
            <param name="m">The windows m</param>
            <returns>A bool indicating if this m has been handled</returns>
            <remarks>
            We want to ignore context menu requests that are triggered by right clicks on the header
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HandleCustomDraw(System.Windows.Forms.Message@)">
            <summary>
            Handle the Custom draw series of notifications
            </summary>
            <param name="m">The message</param>
            <returns>True if the message has been handled</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HandleDestroy(System.Windows.Forms.Message@)">
            <summary>
            Handle the underlying control being destroyed
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HandleFindItem(System.Windows.Forms.Message@)">
            <summary>
            Handle the search for item m if possible.
            </summary>
            <param name="m">The m to be processed</param>
            <returns>bool to indicate if the m has been handled</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.FindMatchingRow(System.String,System.Int32,System.Windows.Forms.SearchDirectionHint)">
            <summary>
            Find the first row after the given start in which the text value in the
            comparison column begins with the given text. The comparison column is column 0,
            unless IsSearchOnSortColumn is true, in which case the current sort column is used.
            </summary>
            <param name="text">The text to be prefix matched</param>
            <param name="start">The index of the first row to consider</param>
            <param name="direction">Which direction should be searched?</param>
            <returns>The index of the first row that matched, or -1</returns>
            <remarks>The text comparison is a case-insensitive, prefix match. The search will
            search the every row until a match is found, wrapping at the end if needed.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.FindMatchInRange(System.String,System.Int32,System.Int32,DevGrep.Controls.DLV.OLVColumn)">
            <summary>
            Find the first row in the given range of rows that prefix matches the string value of the given column.
            </summary>
            <param name="text"></param>
            <param name="first"></param>
            <param name="last"></param>
            <param name="column"></param>
            <returns>The index of the matched row, or -1</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HandleKeyDown(System.Windows.Forms.Message@)">
            <summary>
            Handle a key down message
            </summary>
            <param name="m"></param>
            <returns>True if the msg has been handled</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HandleLButtonDown(System.Windows.Forms.Message@)">
            <summary>
            Catch the Left Button down event.
            </summary>
            <param name="m">The m to be processed</param>
            <returns>bool to indicate if the m has been handled</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ProcessLButtonDown(DevGrep.Controls.DLV.OlvListViewHitTestInfo)">
            <summary>
            Handle a left mouse down at the given hit test location
            </summary>
            <remarks>Subclasses can override this to do something unique</remarks>
            <param name="hti"></param>
            <returns>True if the message has been handled</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HandleRButtonDown(System.Windows.Forms.Message@)">
            <summary>
            Catch the Right Button down event.
            </summary>
            <param name="m">The m to be processed</param>
            <returns>bool to indicate if the m has been handled</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ProcessRButtonDown(DevGrep.Controls.DLV.OlvListViewHitTestInfo)">
            <summary>
            Handle a left mouse down at the given hit test location
            </summary>
            <remarks>Subclasses can override this to do something unique</remarks>
            <param name="hti"></param>
            <returns>True if the message has been handled</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HandleLButtonDoubleClick(System.Windows.Forms.Message@)">
            <summary>
            Catch the Left Button double click event.
            </summary>
            <param name="m">The m to be processed</param>
            <returns>bool to indicate if the m has been handled</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ProcessLButtonDoubleClick(DevGrep.Controls.DLV.OlvListViewHitTestInfo)">
            <summary>
            Handle a mouse double click at the given hit test location
            </summary>
            <remarks>Subclasses can override this to do something unique</remarks>
            <param name="hti"></param>
            <returns>True if the message has been handled</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HandleRButtonDoubleClick(System.Windows.Forms.Message@)">
            <summary>
            Catch the right Button double click event.
            </summary>
            <param name="m">The m to be processed</param>
            <returns>bool to indicate if the m has been handled</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ProcessRButtonDoubleClick(DevGrep.Controls.DLV.OlvListViewHitTestInfo)">
            <summary>
            Handle a right mouse double click at the given hit test location
            </summary>
            <remarks>Subclasses can override this to do something unique</remarks>
            <param name="hti"></param>
            <returns>True if the message has been handled</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HandleReflectNotify(System.Windows.Forms.Message@)">
            <summary>
            In the notification messages, we handle change of state of list items
            </summary>
            <param name="m">The m to be processed</param>
            <returns>bool to indicate if the m has been handled</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HandleNotify(System.Windows.Forms.Message@)">
            <summary>
            In the notification messages, we handle attempts to change the width of our columns
            </summary>
            <param name="m">The m to be processed</param>
            <returns>bool to indicate if the m has been handled</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.CreateCellToolTip">
            <summary>
            Create a ToolTipControl to manage the tooltip control used by the listview control
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.UpdateCellToolTipHandle">
            <summary>
            Update the handle used by our cell tooltip to be the tooltip used by
            the underlying Windows listview control.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HandlePaint(System.Windows.Forms.Message@)">
            <summary>
            Handle the WM_PAINT event
            </summary>
            <param name="m"></param>
            <returns>Return true if the msg has been handled and nothing further should be done</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HandlePrePaint">
            <summary>
            Perform any steps needed before painting the control
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HandlePostPaint">
            <summary>
            Perform any steps needed after painting the control
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HandleWindowPosChanging(System.Windows.Forms.Message@)">
            <summary>
            Handle the window position changing.
            </summary>
            <param name="m">The m to be processed</param>
            <returns>bool to indicate if the m has been handled</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HandleHeaderRightClick(System.Int32)">
            <summary>
            The user has right clicked on the column headers. Do whatever is required
            </summary>
            <returns>Return true if this event has been handle</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ShowHeaderRightClickMenu(System.Int32,System.Drawing.Point)">
            <summary>
            Show a menu that is appropriate when the given column header is clicked.
            </summary>
            <param name="columnIndex">The index of the header that was clicked. This
            can be -1, indicating that the header was clicked outside of a column</param>
            <param name="pt">Where should the menu be shown</param>
            <returns>True if a menu was displayed</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.MakeHeaderRightClickMenu(System.Int32)">
            <summary>
            Create the menu that should be displayed when the user right clicks
            on the given column header.
            </summary>
            <param name="columnIndex">Index of the column that was right clicked.
            This can be negative, which indicates a click outside of any header.</param>
            <returns>The toolstrip that should be displayed</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HandleHeaderRightClick">
            <summary>
            The user has right clicked on the column headers. Do whatever is required
            </summary>
            <returns>Return true if this event has been handle</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ShowColumnSelectMenu(System.Drawing.Point)">
            <summary>
            Show a popup menu at the given point which will allow the user to choose which columns
            are visible on this listview
            </summary>
            <param name="pt">Where should the menu be placed</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ShowColumnCommandMenu(System.Int32,System.Drawing.Point)">
            <summary>
            Show a popup menu at the given point which will allow the user to choose which columns
            are visible on this listview
            </summary>
            <param name="columnIndex"></param>
            <param name="pt">Where should the menu be placed</param>
        </member>
        <member name="F:DevGrep.Controls.DLV.ObjectListView.SortAscendingImage">
            <summary>
            Gets or sets the image that will be place next to the Sort Ascending command
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.ObjectListView.SortDescendingImage">
            <summary>
            Gets or sets the image that will be placed next to the Sort Descending command
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.MakeColumnCommandMenu(System.Windows.Forms.ToolStripDropDown,System.Int32)">
            <summary>
            Append the column selection menu items to the given menu strip.
            </summary>
            <param name="strip">The menu to which the items will be added.</param>
            <param name="columnIndex"></param>
            <returns>Return the menu to which the items were added</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.MakeColumnSelectMenu(System.Windows.Forms.ToolStripDropDown)">
            <summary>
            Append the column selection menu items to the given menu strip.
            </summary>
            <param name="strip">The menu to which the items will be added.</param>
            <returns>Return the menu to which the items were added</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.AddItemsToColumnSelectMenu(System.Windows.Forms.ToolStripItemCollection)">
            <summary>
            Create the menu items that will allow columns to be choosen and add them to the 
            given collection
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.MakeFilteringMenu(System.Windows.Forms.ToolStripDropDown,System.Int32)">
            <summary>
            Create a Filtering menu
            </summary>
            <param name="strip"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnColumnReordered(System.Windows.Forms.ColumnReorderedEventArgs)">
            <summary>
            Override the OnColumnReordered method to do what we want
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HandleColumnWidthChanging(System.Object,System.Windows.Forms.ColumnWidthChangingEventArgs)">
            <summary>
            When the column widths are changing, resize the space filling columns
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HandleColumnWidthChanged(System.Object,System.Windows.Forms.ColumnWidthChangedEventArgs)">
            <summary>
            When the column widths change, resize the space filling columns
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HandleLayout(System.Object,System.Windows.Forms.LayoutEventArgs)">
            <summary>
            When the size of the control changes, we have to resize our space filling columns.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ResizeFreeSpaceFillingColumns">
            <summary>
            Resize our space filling columns so they fill any unoccupied width in the control
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ResizeFreeSpaceFillingColumns(System.Int32)">
            <summary>
            Resize our space filling columns so they fill any unoccupied width in the control
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.CheckIndeterminateObject(System.Object)">
            <summary>
            Mark the given object as indeterminate check state
            </summary>
            <param name="modelObject">The model object to be marked indeterminate</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.CheckObject(System.Object)">
            <summary>
            Mark the given object as checked in the list
            </summary>
            <param name="modelObject">The model object to be checked</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.CheckObjects(System.Collections.IEnumerable)">
            <summary>
            Mark the given objects as checked in the list
            </summary>
            <param name="modelObjects">The model object to be checked</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.CheckSubItem(System.Object,DevGrep.Controls.DLV.OLVColumn)">
            <summary>
            Put a check into the check box at the given cell
            </summary>
            <param name="rowObject"></param>
            <param name="column"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.CheckIndeterminateSubItem(System.Object,DevGrep.Controls.DLV.OLVColumn)">
            <summary>
            Put an indeterminate check into the check box at the given cell
            </summary>
            <param name="rowObject"></param>
            <param name="column"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.IsChecked(System.Object)">
            <summary>
            Return true of the given object is checked
            </summary>
            <param name="modelObject">The model object whose checkedness is returned</param>
            <returns>Is the given object checked?</returns>
            <remarks>If the given object is not in the list, this method returns false.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.IsCheckedIndeterminate(System.Object)">
            <summary>
            Return true of the given object is indeterminately checked
            </summary>
            <param name="modelObject">The model object whose checkedness is returned</param>
            <returns>Is the given object indeterminately checked?</returns>
            <remarks>If the given object is not in the list, this method returns false.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.IsSubItemChecked(System.Object,DevGrep.Controls.DLV.OLVColumn)">
            <summary>
            Is there a check at the check box at the given cell
            </summary>
            <param name="rowObject"></param>
            <param name="column"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.GetCheckState(System.Object)">
            <summary>
            Get the checkedness of an object from the model. Returning null means the
            model does not know and the value from the control will be used.
            </summary>
            <param name="modelObject"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.PutCheckState(System.Object,System.Windows.Forms.CheckState)">
            <summary>
            Record the change of checkstate for the given object in the model.
            This does not update the UI -- only the model
            </summary>
            <param name="modelObject"></param>
            <param name="state"></param>
            <returns>The check state that was recorded and that should be used to update
            the control.</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.SetObjectCheckedness(System.Object,System.Windows.Forms.CheckState)">
            <summary>
            Change the check state of the given object to be the given state.
            </summary>
            <remarks>
            If the given model object isn't in the list, we still try to remember
            its state, in case it is referenced in the future.</remarks>
            <param name="modelObject"></param>
            <param name="state"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ToggleCheckObject(System.Object)">
            <summary>
            Toggle the checkedness of the given object. A checked object becomes
            unchecked; an unchecked or indeterminate object becomes checked.
            If the list has tristate checkboxes, the order is:
               unchecked -> checked -> indeterminate -> unchecked ...
            </summary>
            <param name="modelObject">The model object to be checked</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ToggleSubItemCheckBox(System.Object,DevGrep.Controls.DLV.OLVColumn)">
            <summary>
            Toggle the check at the check box of the given cell
            </summary>
            <param name="rowObject"></param>
            <param name="column"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.UncheckObject(System.Object)">
            <summary>
            Mark the given object as unchecked in the list
            </summary>
            <param name="modelObject">The model object to be unchecked</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.UncheckObjects(System.Collections.IEnumerable)">
            <summary>
            Mark the given objects as unchecked in the list
            </summary>
            <param name="modelObjects">The model object to be checked</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.UncheckSubItem(System.Object,DevGrep.Controls.DLV.OLVColumn)">
            <summary>
            Uncheck the check at the given cell
            </summary>
            <param name="rowObject"></param>
            <param name="column"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.GetColumn(System.Int32)">
            <summary>
            Return the column at the given index
            </summary>
            <param name="index">Index of the column to be returned</param>
            <returns>An OLVColumn</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.GetColumn(System.String)">
            <summary>
            Return the column at the given title.
            </summary>
            <param name="name">Name of the column to be returned</param>
            <returns>An OLVColumn</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.GetFilteredColumns(System.Windows.Forms.View)">
            <summary>
            Return a collection of columns that are visible to the given view.
            Only Tile and Details have columns; all other views have 0 columns.
            </summary>
            <param name="view">Which view are the columns being calculate for?</param>
            <returns>A list of columns</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.GetItemCount">
            <summary>
            Return the number of items in the list
            </summary>
            <returns>the number of items in the list</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.GetItem(System.Int32)">
            <summary>
            Return the item at the given index
            </summary>
            <param name="index">Index of the item to be returned</param>
            <returns>An OLVListItem</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.GetModelObject(System.Int32)">
            <summary>
            Return the model object at the given index
            </summary>
            <param name="index">Index of the model object to be returned</param>
            <returns>A model object</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.GetItemAt(System.Int32,System.Int32,DevGrep.Controls.DLV.OLVColumn@)">
            <summary>
            Find the item and column that are under the given co-ords
            </summary>
            <param name="x">X co-ord</param>
            <param name="y">Y co-ord</param>
            <param name="selectedColumn">The column under the given point</param>
            <returns>The item under the given point. Can be null.</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.GetSubItem(System.Int32,System.Int32)">
            <summary>
            Return the sub item at the given index/column
            </summary>
            <param name="index">Index of the item to be returned</param>
            <param name="columnIndex">Index of the subitem to be returned</param>
            <returns>An OLVListSubItem</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.EnsureModelVisible(System.Object)">
            <summary>
            Ensure that the given model object is visible
            </summary>
            <param name="modelObject">The model object to be revealed</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.GetSelectedObject">
            <summary>
            Return the model object of the row that is selected or null if there is no selection or more than one selection
            </summary>
            <returns>Model object or null</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.GetSelectedObjects">
            <summary>
            Return the model objects of the rows that are selected or an empty collection if there is no selection
            </summary>
            <returns>ArrayList</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.GetCheckedObject">
            <summary>
            Return the model object of the row that is checked or null if no row is checked
            or more than one row is checked
            </summary>
            <returns>Model object or null</returns>
            <remarks>Use CheckedObject property instead of this method</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.GetCheckedObjects">
            <summary>
            Get the collection of model objects that are checked.
            </summary>
            <remarks>Use CheckedObjects property instead of this method</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.IndexOf(System.Object)">
            <summary>
            Find the given model object within the listview and return its index
            </summary>
            <param name="modelObject">The model object to be found</param>
            <returns>The index of the object. -1 means the object was not present</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.RefreshItem(DevGrep.Controls.DLV.OLVListItem)">
            <summary>
            Update the ListViewItem with the data from its associated model.
            </summary>
            <remarks>This method does not resort or regroup the view. It simply updates
            the displayed data of the given item</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.RefreshObject(System.Object)">
            <summary>
            Update the rows that are showing the given objects
            </summary>
            <remarks>This method does not resort or regroup the view.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.RefreshObjects(System.Collections.IList)">
            <summary>
            Update the rows that are showing the given objects
            </summary>
            <remarks>
            <para>This method does not resort or regroup the view.</para>
            <para>This method can safely be called from background threads.</para>
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.RefreshSelectedObjects">
            <summary>
            Update the rows that are selected
            </summary>
            <remarks>This method does not resort or regroup the view.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.EnsureGroupVisible(System.Windows.Forms.ListViewGroup)">
            <summary>
            Scroll the listview so that the given group is at the top.
            </summary>
            <param name="lvg">The group to be revealed</param>
            <remarks><para>
            If the group is already visible, the list will still be scrolled to move
            the group to the top, if that is possible.
            </para>
            <para>This only works when the list is showing groups (obviously)</para>
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.SelectObject(System.Object)">
            <summary>
            Select the row that is displaying the given model object, in addition to any current selection.
            </summary>
            <param name="modelObject">The object to be selected</param>
            <remarks>Use the <see cref="P:DevGrep.Controls.DLV.ObjectListView.SelectedObject"/> property to deselect all other rows</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.SelectObject(System.Object,System.Boolean)">
            <summary>
            Select the row that is displaying the given model object, in addition to any current selection.
            </summary>
            <param name="modelObject">The object to be selected</param>
            <param name="setFocus">Should the object be focused as well?</param>
            <remarks>Use the <see cref="P:DevGrep.Controls.DLV.ObjectListView.SelectedObject"/> property to deselect all other rows</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.SelectObjects(System.Collections.IList)">
            <summary>
            Select the rows that is displaying any of the given model object. All other rows are deselected.
            </summary>
            <param name="modelObjects">A collection of model objects</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.Freeze">
            <summary>
            Freeze the listview so that it no longer updates itself.
            </summary>
            <remarks>Freeze()/Unfreeze() calls nest correctly</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.Unfreeze">
            <summary>
            Unfreeze the listview. If this call is the outermost Unfreeze(),
            the contents of the listview will be rebuilt.
            </summary>
            <remarks>Freeze()/Unfreeze() calls nest correctly</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.DoUnfreeze">
            <summary>
            Do the actual work required when the listview is unfrozen
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.Sort">
            <summary>
            Sort the items by the last sort column and order
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.Sort(System.String)">
            <summary>
            Sort the items in the list view by the values in the given column and the last sort order
            </summary>
            <param name="columnToSortName">The name of the column whose values will be used for the sorting</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.Sort(System.Int32)">
            <summary>
            Sort the items in the list view by the values in the given column and the last sort order
            </summary>
            <param name="columnToSortIndex">The index of the column whose values will be used for the sorting</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.Sort(DevGrep.Controls.DLV.OLVColumn)">
            <summary>
            Sort the items in the list view by the values in the given column and the last sort order
            </summary>
            <param name="columnToSort">The column whose values will be used for the sorting</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.Sort(DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.SortOrder)">
            <summary>
            Sort the items in the list view by the values in the given column and by the given order.
            </summary>
            <param name="columnToSort">The column whose values will be used for the sorting.
            If null, the first column will be used.</param>
            <param name="order">The ordering to be used for sorting. If this is None,
            this.Sorting and then SortOrder.Ascending will be used</param>
            <remarks>If ShowGroups is true, the rows will be grouped by the given column.
            If AlwaysGroupsByColumn is not null, the rows will be grouped by that column,
            and the rows within each group will be sorted by the given column.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ShowSortIndicator">
            <summary>
            Put a sort indicator next to the text of the sort column
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ShowSortIndicator(DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.SortOrder)">
            <summary>
            Put a sort indicator next to the text of the given given column
            </summary>
            <param name="columnToSort">The column to be marked</param>
            <param name="sortOrder">The sort order in effect on that column</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.MakeSortIndicatorImages">
            <summary>
            If the sort indicator images don't already exist, this method will make and install them
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.Unsort">
            <summary>
            Remove any sorting and revert to the given order of the model objects
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.CreateGroups(System.Collections.Generic.IList{DevGrep.Controls.DLV.OLVGroup})">
            <summary>
            Do the actual work of creating the given list of groups
            </summary>
            <param name="groups"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.CorrectSubItemColors(System.Windows.Forms.ListViewItem)">
            <summary>
            For some reason, UseItemStyleForSubItems doesn't work for the colors
            when owner drawing the list, so we have to specifically give each subitem
            the desired colors
            </summary>
            <param name="olvi">The item whose subitems are to be corrected</param>
            <remarks>Cells drawn via BaseRenderer don't need this, but it is needed
            when an owner drawn cell uses DrawDefault=true</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.FillInValues(DevGrep.Controls.DLV.OLVListItem,System.Object)">
            <summary>
            Fill in the given OLVListItem with values of the given row
            </summary>
            <param name="lvi">the OLVListItem that is to be stuff with values</param>
            <param name="rowObject">the model object from which values will be taken</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ForceSubItemImagesExStyle">
            <summary>
            Make sure the ListView has the extended style that says to display subitem images.
            </summary>
            <remarks>This method must be called after any .NET call that update the extended styles
            since they seem to erase this setting.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.GetActualImageIndex(System.Object)">
            <summary>
            Convert the given image selector to an index into our image list.
            Return -1 if that's not possible
            </summary>
            <param name="imageSelector"></param>
            <returns>Index of the image in the imageList, or -1</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.GetHeaderToolTip(System.Int32)">
            <summary>
            Return the tooltip that should be shown when the mouse is hovered over the given column
            </summary>
            <param name="columnIndex">The column index whose tool tip is to be fetched</param>
            <returns>A string or null if no tool tip is to be shown</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.GetCellToolTip(System.Int32,System.Int32)">
            <summary>
            Return the tooltip that should be shown when the mouse is hovered over the given cell
            </summary>
            <param name="columnIndex">The column index whose tool tip is to be fetched</param>
            <param name="rowIndex">The row index whose tool tip is to be fetched</param>
            <returns>A string or null if no tool tip is to be shown</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ModelToItem(System.Object)">
            <summary>
            Return the OLVListItem that displays the given model object
            </summary>
            <param name="modelObject">The modelObject whose item is to be found</param>
            <returns>The OLVListItem that displays the model, or null</returns>
            <remarks>This method has O(n) performance.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.PostProcessRows">
            <summary>
            Do the work required after the items in a listview have been created
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.PostProcessOneRow(System.Int32,System.Int32,DevGrep.Controls.DLV.OLVListItem)">
            <summary>
            Do the work required after one item in a listview have been created
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.PrepareAlternateBackColors">
             <summary>
             Prepare the listview to show alternate row backcolors
             </summary>
             <remarks>We cannot rely on lvi.Index in this method.
             In a straight list, lvi.Index is the display index, and can be used to determine
             whether the row should be colored. But when organised by groups, lvi.Index is not
             useable because it still refers to the position in the overall list, not the display order.
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.SetAllSubItemImages">
            <summary>
            Setup all subitem images on all rows
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.SetSubItemImages(System.Int32,DevGrep.Controls.DLV.OLVListItem)">
            <summary>
            Tell the underlying list control which images to show against the subitems
            </summary>
            <param name="rowIndex">the index at which the item occurs</param>
            <param name="item">the item whose subitems are to be set</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.SetSubItemImages(System.Int32,DevGrep.Controls.DLV.OLVListItem,System.Boolean)">
            <summary>
            Tell the underlying list control which images to show against the subitems
            </summary>
            <param name="rowIndex">the index at which the item occurs</param>
            <param name="item">the item whose subitems are to be set</param>
            <param name="shouldClearImages">will existing images be cleared if no new image is provided?</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.SetSubItemImage(System.Int32,System.Int32,DevGrep.Controls.DLV.OLVListSubItem,System.Boolean)">
            <summary>
            Set the subitem image natively
            </summary>
            <param name="rowIndex"></param>
            <param name="subItemIndex"></param>
            <param name="subItem"></param>
            <param name="shouldClearImages"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.TakeOwnershipOfObjects">
            <summary>
            Take ownership of the 'objects' collection. This separats our collection from the source.
            </summary>
            <remarks>
            <para>
            This method
            separates the 'objects' instance variable from its source, so that any AddObject/RemoveObject
            calls will modify our collection and not the original colleciton.
            </para>
            <para>
            This method has the intentional side-effect of converting our list of objects to an ArrayList.
            </para>
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.TriggerFormatRowEvent(System.Int32,System.Int32,DevGrep.Controls.DLV.OLVListItem)">
            <summary>
            Trigger FormatRow and possibly FormatCell events for the given item
            </summary>
            <param name="rowIndex"></param>
            <param name="displayIndex"></param>
            <param name="olvi"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.SetupBaseImageList">
            <summary>
            Update our externally visible image list so it holds the same images as our shadow list, but sized correctly
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.MakeResizedImageList(System.Int32,System.Int32,System.Windows.Forms.ImageList)">
            <summary>
            Return a copy of the given source image list, where each image has been resized to be height x height in size.
            If source is null, an empty image list of the given size is returned
            </summary>
            <param name="width">Height and width of the new images</param>
            <param name="height">Height and width of the new images</param>
            <param name="source">Source of the images (can be null)</param>
            <returns>A new image list</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.MakeResizedImage(System.Int32,System.Int32,System.Drawing.Image,System.Drawing.Color)">
            <summary>
            Return a bitmap of the given height x height, which shows the given image, centred.
            </summary>
            <param name="width">Height and width of new bitmap</param>
            <param name="height">Height and width of new bitmap</param>
            <param name="image">Image to be centred</param>
            <param name="transparent">The background color</param>
            <returns>A new bitmap</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.InitializeStateImageList">
            <summary>
            Initialize the state image list with the required checkbox images
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.SetupSubItemCheckBoxes">
            <summary>
            Setup this control so it can display check boxes on subitems
            (or primary checkboxes in virtual mode)
            </summary>
            <remarks>This gives the ListView a small image list, if it doesn't already have one.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.InitializeCheckBoxImages">
            <summary>
            Make sure the small image list for this control has checkbox images 
            (used for sub-item checkboxes).
            </summary>
            <remarks>This gives the ListView a small image list, if it doesn't already have one.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)">
            <summary>
            Owner draw the column header
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnDrawItem(System.Windows.Forms.DrawListViewItemEventArgs)">
            <summary>
            Owner draw the item
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnDrawSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs)">
            <summary>
            Owner draw a single subitem
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            We need the click count in the mouse up event, but that is always 1.
            So we have to remember the click count from the preceding mouse down event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnMouseLeave(System.EventArgs)">
            <summary>
            When the mouse leaves the control, remove any hot item highlighting
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            When the mouse moves, we might need to change the hot item.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Check to see if we need to start editing a cell
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ProcessHyperlinkClicked(DevGrep.Controls.DLV.CellClickEventArgs)">
            <summary>
            Tell the world that a hyperlink was clicked and if the event isn't handled,
            do the default processing.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.StandardHyperlinkClickedProcessing(DevGrep.Controls.DLV.HyperlinkClickedEventArgs)">
            <summary>
            Do the default processing for a hyperlink clicked event, which
            is to try and open the url.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnRightMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            The user right clicked on the control
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            This method is called every time a row is selected or deselected. This can be
            a pain if the user shift-clicks 100 rows. We override this method so we can
            trigger one event for any number of select/deselects that come from one user action
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnHandleCreated(System.EventArgs)">
            <summary>
            Called when the handle of the underlying control is created
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnControlCreated">
            <summary>
            This method is called after the control has been fully created.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ShouldStartCellEdit(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Should we start editing the cell in response to the given mouse button event?
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            Handle a key press on this control. We specifically look for F2 which edits the primary column,
            or a Tab character during an edit operation, which tries to start editing on the next (or previous) cell.
            </summary>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.EditSubItem(DevGrep.Controls.DLV.OLVListItem,System.Int32)">
            <summary>
            Begin an edit operation on the given cell.
            </summary>
            <remarks>This performs various sanity checks and passes off the real work to StartCellEdit().</remarks>
            <param name="item">The row to be edited</param>
            <param name="subItemIndex">The index of the cell to be edited</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.StartCellEdit(DevGrep.Controls.DLV.OLVListItem,System.Int32)">
            <summary>
            Really start an edit operation on a given cell. The parameters are assumed to be sane.
            </summary>
            <param name="item">The row to be edited</param>
            <param name="subItemIndex">The index of the cell to be edited</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.CalculateCellEditorBounds(DevGrep.Controls.DLV.OLVListItem,System.Int32)">
            <summary>
            Calculate the bounds of the edit control for the given item/column
            </summary>
            <param name="item"></param>
            <param name="subItemIndex"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.CalculateCellEditorBoundsOwnerDrawn(DevGrep.Controls.DLV.OLVListItem,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Calculate the bounds of the edit control for the given item/column, when the listview
            is being owner drawn.
            </summary>
            <param name="item"></param>
            <param name="subItemIndex"></param>
            <param name="r"></param>
            <returns>A rectangle that is the bounds of the cell editor</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.CalculateCellEditorBoundsStandard(DevGrep.Controls.DLV.OLVListItem,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Calculate the bounds of the edit control for the given item/column, when the listview
            is not being owner drawn.
            </summary>
            <param name="item"></param>
            <param name="subItemIndex"></param>
            <param name="cellBounds"></param>
            <returns>A rectangle that is the bounds of the cell editor</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.SetControlValue(System.Windows.Forms.Control,System.Object,System.String)">
            <summary>
            Try to give the given value to the provided control. Fall back to assigning a string
            if the value assignment fails.
            </summary>
            <param name="control">A control</param>
            <param name="value">The value to be given to the control</param>
            <param name="stringValue">The string to be given if the value doesn't work</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ConfigureControl">
            <summary>
            Setup the given control to be a cell editor
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.GetControlValue(System.Windows.Forms.Control)">
            <summary>
            Return the value that the given control is showing
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.CellEditor_Validating(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Called when the cell editor could be about to lose focus. Time to commit the change
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.CalculateCellBounds(DevGrep.Controls.DLV.OLVListItem,System.Int32)">
            <summary>
            Return the bounds of the given cell
            </summary>
            <param name="item">The row to be edited</param>
            <param name="subItemIndex">The index of the cell to be edited</param>
            <returns>A Rectangle</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.CalculateCellTextBounds(DevGrep.Controls.DLV.OLVListItem,System.Int32)">
            <summary>
            Return the bounds of the given cell only until the edge of the current text
            </summary>
            <param name="item">The row to be edited</param>
            <param name="subItemIndex">The index of the cell to be edited</param>
            <returns>A Rectangle</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.GetCellEditor(DevGrep.Controls.DLV.OLVListItem,System.Int32)">
            <summary>
            Return a control that can be used to edit the value of the given cell.
            </summary>
            <param name="item">The row to be edited</param>
            <param name="subItemIndex">The index of the cell to be edited</param>
            <returns>A Control to edit the given cell</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.GetFirstNonNullValue(DevGrep.Controls.DLV.OLVColumn)">
            <summary>
            Get the first non-null value of the given column.
            At most 1000 rows will be considered.
            </summary>
            <param name="column"></param>
            <returns>The first non-null value, or null if no non-null values were found</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.MakeDefaultCellEditor(DevGrep.Controls.DLV.OLVColumn)">
            <summary>
            Return a TextBox that can be used as a default cell editor.
            </summary>
            <param name="column">What column does the cell belong to?</param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ConfigureAutoComplete(System.Windows.Forms.TextBox,DevGrep.Controls.DLV.OLVColumn)">
            <summary>
            Configure the given text box to autocomplete unique values
            from the given column. At most 1000 rows will be considered.
            </summary>
            <param name="tb">The textbox to configure</param>
            <param name="column">The column used to calculate values</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ConfigureAutoComplete(System.Windows.Forms.TextBox,DevGrep.Controls.DLV.OLVColumn,System.Int32)">
            <summary>
            Configure the given text box to autocomplete unique values
            from the given column. At most 1000 rows will be considered.
            </summary>
            <param name="tb">The textbox to configure</param>
            <param name="column">The column used to calculate values</param>
            <param name="maxRows">Consider only this many rows</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.CancelCellEdit">
            <summary>
            Stop editing a cell and throw away any changes.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.PossibleFinishCellEditing">
            <summary>
            If a cell edit is in progress, finish the edit.
            </summary>
            <returns>Returns false if the finishing process was cancelled
            (i.e. the cell editor is still on screen)</returns>
            <remarks>This method does not guarantee that the editing will finish. The validation
            process can cause the finishing to be aborted. Developers should check the return value
            or use IsCellEditing property after calling this method to see if the user is still
            editing a cell.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.FinishCellEdit">
            <summary>
            Finish the cell edit operation, writing changed data back to the model object
            </summary>
            <remarks>This method does not trigger a Validating event, so it always finishes
            the cell edit.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.CleanupCellEdit">
            <summary>
            Remove all trace of any existing cell edit operation
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ClearHotItem">
            <summary>
            Force the hot item to be recalculated
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.RefreshHotItem">
            <summary>
            Force the hot item to be recalculated
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.UpdateHotItem(System.Drawing.Point)">
            <summary>
            The mouse has moved to the given pt. See if the hot item needs to be updated
            </summary>
            <param name="pt">Where is the mouse?</param>
            <remarks>This is the main entry point for hot item handling</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.UpdateHotItem(DevGrep.Controls.DLV.OlvListViewHitTestInfo)">
            <summary>
            The mouse has moved to the given pt. See if the hot item needs to be updated
            </summary>
            <param name="hti"></param>
            <remarks>This is the main entry point for hot item handling</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.UpdateHotRow(DevGrep.Controls.DLV.OLVListItem)">
            <summary>
            Update the given row using the current hot item information
            </summary>
            <param name="olvi"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.UpdateHotRow(System.Int32,System.Int32,DevGrep.Controls.DLV.HitTestLocation,DevGrep.Controls.DLV.OLVListItem)">
            <summary>
            Update the given row using the given hot item information
            </summary>
            <param name="rowIndex"></param>
            <param name="columnIndex"></param>
            <param name="hitLocation"></param>
            <param name="olvi"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ApplyRowStyle(DevGrep.Controls.DLV.OLVListItem,DevGrep.Controls.DLV.IItemStyle)">
            <summary>
            Apply a style to the given row
            </summary>
            <param name="olvi"></param>
            <param name="style"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ApplyCellStyle(DevGrep.Controls.DLV.OLVListItem,System.Int32,DevGrep.Controls.DLV.IItemStyle)">
            <summary>
            Apply a style to a cell
            </summary>
            <param name="olvi"></param>
            <param name="columnIndex"></param>
            <param name="style"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.UnapplyHotItem(System.Int32)">
            <summary>
            Remove hot item styling from the given row
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnDragEnter(System.Windows.Forms.DragEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnDragLeave(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.AddDecoration(DevGrep.Controls.DLV.IDecoration)">
            <summary>
            Add the given decoration to those on this list and make it appear
            </summary>
            <param name="decoration">The decoration</param>
            <remarks>
            A decoration scrolls with the listview. An overlay stays fixed in place.
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.AddOverlay(DevGrep.Controls.DLV.IOverlay)">
            <summary>
            Add the given overlay to those on this list and make it appear
            </summary>
            <param name="overlay">The overlay</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.DrawAllDecorations(System.Drawing.Graphics,System.Collections.Generic.List{DevGrep.Controls.DLV.OLVListItem})">
            <summary>
            Draw all the decorations
            </summary>
            <param name="g">A Graphics</param>
            <param name="drawnItems">The items that were redrawn and whose decorations should also be redrawn</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HasDecoration(DevGrep.Controls.DLV.IDecoration)">
            <summary>
            Is the given decoration shown on this list
            </summary>
            <param name="decoration">The overlay</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HasOverlay(DevGrep.Controls.DLV.IOverlay)">
            <summary>
            Is the given overlay shown on this list?
            </summary>
            <param name="overlay">The overlay</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.HideOverlays">
            <summary>
            Hide any overlays.
            </summary>
            <remarks>
            This is only a temporary hiding -- the overlays will be shown
            the next time the ObjectListView redraws.
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.InitializeEmptyListMsgOverlay">
            <summary>
            Create and configure the empty list msg overlay
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.InitializeStandardOverlays">
            <summary>
            Initialize the standard image and text overlays
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ShowOverlays">
            <summary>
            Make sure that any overlays are visible.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.RefreshOverlays">
            <summary>
            Refresh the display of the overlays
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.RefreshOverlay(DevGrep.Controls.DLV.IOverlay)">
            <summary>
            Refresh the display of just one overlays
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.RemoveDecoration(DevGrep.Controls.DLV.IDecoration)">
            <summary>
            Remove the given decoration from this list
            </summary>
            <param name="decoration">The decoration to remove</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.RemoveOverlay(DevGrep.Controls.DLV.IOverlay)">
            <summary>
            Remove the given overlay to those on this list
            </summary>
            <param name="overlay">The overlay</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.CreateColumnFilter">
            <summary>
            Create a filter that will enact all the filtering currently installed
            on the visible columns.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.FilterObjects(System.Collections.IEnumerable,DevGrep.Controls.DLV.IModelFilter,DevGrep.Controls.DLV.IListFilter)">
            <summary>
            Do the actual work of filtering
            </summary>
            <param name="objects"></param>
            <param name="aModelFilter"></param>
            <param name="aListFilter"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.ResetColumnFiltering">
            <summary>
            Remove all column filtering.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.UpdateColumnFiltering">
            <summary>
            Update the filtering of this ObjectListView based on the value filtering
            defined in each column
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ObjectListView.UpdateFiltering">
            <summary>
            When some setting related to filtering changes, this method is called.
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.AfterSearching">
            <summary>
            Triggered after a ObjectListView has been searched by the user typing into the list
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.AfterSorting">
            <summary>
            Triggered after a ObjectListView has been sorted
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.BeforeSearching">
            <summary>
            Triggered before a ObjectListView is searched by the user typing into the list
            </summary>
            <remarks>
            Set Cancelled to true to prevent the searching from taking place.
            Changing StringToFind or StartSearchFrom will change the subsequent search.
            </remarks>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.BeforeSorting">
            <summary>
            Triggered before a ObjectListView is sorted
            </summary>
            <remarks>
            Set Cancelled to true to prevent the sort from taking place.
            Changing ColumnToSort or SortOrder will change the subsequent sort.
            </remarks>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.AfterCreatingGroups">
            <summary>
            Triggered after a ObjectListView has created groups
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.BeforeCreatingGroups">
            <summary>
            Triggered before a ObjectListView begins to create groups
            </summary>
            <remarks>
            Set Groups to prevent the default group creation process
            </remarks>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.AboutToCreateGroups">
            <summary>
            Triggered just before a ObjectListView creates groups
            </summary>
            <remarks>
            You can make changes to the groups, which have been created, before those
            groups are created within the listview.
            </remarks>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.CanDrop">
            <summary>
            This event is triggered when the user moves a drag over an ObjectListView that
            has a SimpleDropSink installed as the drop handler.
            </summary>
            <remarks>
            Handlers for this event should set the Effect argument and optionally the
            InfoMsg property. They can also change any of the DropTarget* setttings to change
            the target of the drop.
            </remarks>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.CellEditFinishing">
            <summary>
            Triggered when a cell is about to finish being edited.
            </summary>
            <remarks>If Cancel is already true, the user is cancelling the edit operation.
            Set Cancel to true to prevent the value from the cell being written into the model.
            You cannot prevent the editing from finishing within this event -- you need
            the CellEditValidating event for that.</remarks>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.CellEditStarting">
            <summary>
            Triggered when a cell is about to be edited.
            </summary>
            <remarks>Set Cancel to true to prevent the cell being edited.
            You can change the the Control to be something completely different.</remarks>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.CellEditValidating">
            <summary>
            Triggered when a cell editor needs to be validated
            </summary>
            <remarks>
            If this event is cancelled, focus will remain on the cell editor.
            </remarks>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.CellClick">
            <summary>
            Triggered when a cell is left clicked.
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.CellOver">
            <summary>
            Triggered when the mouse is above a cell.
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.CellRightClick">
            <summary>
            Triggered when a cell is right clicked.
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.CellToolTipShowing">
            <summary>
            This event is triggered when a cell needs a tool tip.
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.SubItemChecking">
            <summary>
            This event is triggered when a checkbox is checked/unchecked on a subitem
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.ColumnRightClick">
            <summary>
            Triggered when a column header is right clicked.
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.Dropped">
            <summary>
            This event is triggered when the user releases a drag over an ObjectListView that
            has a SimpleDropSink installed as the drop handler.
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.Filter">
            <summary>
            This event is triggered when the control needs to filter its collection of objects.
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.FormatCell">
            <summary>
            This event is triggered when a cell needs to be formatted.
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.Freezing">
            <summary>
            This event is triggered when the frozeness of the control changes.
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.FormatRow">
            <summary>
            This event is triggered when a row needs to be formatted.
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.HeaderToolTipShowing">
            <summary>
            This event is triggered when a header needs a tool tip.
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.HotItemChanged">
            <summary>
            Triggered when the "hot" item changes
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.HyperlinkClicked">
            <summary>
            Triggered when a hyperlink cell is clicked.
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.GroupTaskClicked">
            <summary>
            Triggered when the task text of a group is clicked.
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.IsHyperlink">
            <summary>
            Is the value in the given cell a hyperlink.
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.ItemsAdding">
            <summary>
            Some new objects are about to be added to an ObjectListView.
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.ItemsChanged">
            <summary>
            The contents of the ObjectListView has changed.
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.ItemsChanging">
            <summary>
            The contents of the ObjectListView is about to change via a SetObjects call
            </summary>
            <remarks>
            <para>Set Cancelled to true to prevent the contents of the list changing. This does not work with virtual lists.</para>
            </remarks>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.ItemsRemoving">
            <summary>
            Some objects are about to be removed from an ObjectListView.
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.ModelCanDrop">
            <summary>
            This event is triggered when the user moves a drag over an ObjectListView that
            has a SimpleDropSink installed as the drop handler, and when the source control
            for the drag was an ObjectListView.
            </summary>
            <remarks>
            Handlers for this event should set the Effect argument and optionally the
            InfoMsg property. They can also change any of the DropTarget* setttings to change
            the target of the drop.
            </remarks>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.ModelDropped">
            <summary>
            This event is triggered when the user releases a drag over an ObjectListView that
            has a SimpleDropSink installed as the drop handler and when the source control
            for the drag was an ObjectListView.
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.SelectionChanged">
            <summary>
            This event is triggered once per user action that changes the selection state
            of one or more rows.
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.ObjectListView.Scroll">
            <summary>
            This event is triggered when the contents of the ObjectListView has scrolled.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.IsVistaOrLater">
            <summary>
            Gets whether the program running on Vista or later?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.IsWin7OrLater">
            <summary>
            Gets whether the program running on Win7 or later?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.SmoothingMode">
            <summary>
            Gets or sets how what smoothing mode will be applied to graphic operations.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.TextRenderingHint">
            <summary>
            Gets or sets how should text be renderered.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.HelpLink">
            <summary>
            Provides a text hyperlink in to the helpfile.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.AllColumns">
            <summary>
            Get or set all the columns that this control knows about.
            Only those columns where IsVisible is true will be seen by the user.
            </summary>
            <remarks>
            <para>
            If you want to add new columns programmatically, add them to
            AllColumns and then call RebuildColumns(). Normally, you do not have to
            deal with this property directly. Just use the IDE.
            </para>
            <para>If you do add or remove columns from the AllColumns collection,
            you have to call RebuildColumns() to make those changes take effect.</para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.AlternateRowBackColor">
            <summary>
            Gets or sets the background color of every second row 
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.AlternateRowBackColorOrDefault">
            <summary>
            Gets the alternate row background color that has been set, or the default color
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.AlwaysGroupByColumn">
            <summary>
            This property forces the ObjectListView to always group items by the given column.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.AlwaysGroupBySortOrder">
            <summary>
            If AlwaysGroupByColumn is not null, this property will be used to decide how
            those groups are sorted. If this property has the value SortOrder.None, then
            the sort order will toggle according to the users last header click.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.BaseSmallImageList">
            <summary>
            Give access to the image list that is actually being used by the control
            </summary>
            <remarks>
            Normally, it is preferable to use SmallImageList. Only use this property
            if you know exactly what you are doing.
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.CellEditActivation">
            <summary>
            How does the user indicate that they want to edit a cell?
            None means that the listview cannot be edited.
            </summary>
            <remarks>Columns can also be marked as editable.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.CellEditKeyEngine">
            <summary>
            Gets or sets the engine that will handle key presses during a cell edit operation.
            Settings this to null will reset it to default value.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.CellEditor">
            <summary>
            Gets the control that is currently being used for editing a cell.
            </summary>
            <remarks>This will obviously be null if no cell is being edited.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.CellEditTabChangesRows">
            <summary>
            Gets or sets the behaviour of the Tab key when editing a cell on the left or right
            edge of the control. If this is false (the default), pressing Tab will wrap to the other side
            of the same row. If this is true, pressing Tab when editing the right most cell will advance 
            to the next row 
            and Shift-Tab when editing the left-most cell will change to the previous row.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.CellEditEnterChangesRows">
            <summary>
            Gets or sets the behaviour of the Enter keys while editing a cell.
            If this is false (the default), pressing Enter will simply finish the editing operation.
            If this is true, Enter will finish the edit operation and start a new edit operation
            on the cell below the current cell, wrapping to the top of the next row when at the bottom cell.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.CellToolTip">
            <summary>
            Gets the tool tip control that shows tips for the cells
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.CheckBoxes">
            <summary>
            Should this list show checkboxes?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.CheckedObject">
            <summary>
            Return the model object of the row that is checked or null if no row is checked
            or more than one row is checked
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.CheckedObjects">
            <summary>
            Get or set the collection of model objects that are checked.
            When setting this property, any row whose model object isn't
            in the given collection will be unchecked. Setting to null is
            equivilent to unchecking all.
            </summary>
            <remarks>
            <para>
            This property returns a simple collection. Changes made to the returned
            collection do NOT affect the list. This is different to the behaviour of
            CheckedIndicies collection.
            </para>
            <para>
            .NET's CheckedItems property is not helpful. It is just a short-hand for
            iterating through the list looking for items that are checked.
            </para>
            <para>
            The performance of the get method is O(n), where n is the number of items
            in the control. The performance of the set method is
            O(n + m) where m is the number of objects being checked. Be careful on long lists.
            </para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.CheckedObjectsEnumerable">
            <summary>
            Gets or sets the checked objects from an enumerable.
            </summary>
            <remarks>
            Useful for checking all objects in the list.
            </remarks>
            <example>
            this.olv1.CheckedObjectsEnumerable = this.olv1.Objects;
            </example>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.Columns">
            <summary>
            Gets Columns for this list. We hide the original so we can associate
            a specialised editor with it.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.ColumnsForTileView">
            <summary>
            Get/set the list of columns that should be used when the list switches to tile view.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.ColumnsInDisplayOrder">
            <summary>
            Return the visible columns in the order they are displayed to the user
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.ContentRectangle">
            <summary>
            Get the area of the control that shows the list, minus any header control
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.CopySelectionOnControlC">
            <summary>
            Gets or sets if the selected rows should be copied to the clipboard when the user presses Ctrl-C
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.CopySelectionOnControlCUsesDragSource">
            <summary>
            Gets or sets whether the Control-C copy to clipboard functionality should use
            the installed DragSource to create the data object that is placed onto the clipboard.
            </summary>
            <remarks>This is normally what is desired, unless a custom DragSource is installed 
            that does some very specialized drag-drop behaviour.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.Decorations">
            <summary>
            Gets the list of decorations that will be drawn the ListView
            </summary>
            <remarks>
            <para>
            Do not modify the contents of this list directly. Use the AddDecoration() and RemoveDecoration() methods.
            </para>
            <para>
            A decoration scrolls with the list contents. An overlay is fixed in place.
            </para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.DefaultRenderer">
            <summary>
            When owner drawing, this renderer will draw columns that do not have specific renderer
            given to them
            </summary>
            <remarks>If you try to set this to null, it will revert to a BaseRenderer</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.DragSource">
            <summary>
            Gets or sets the object that controls how drags start from this control
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.DropSink">
            <summary>
            Gets or sets the object that controls how drops are accepted and processed
            by this ListView.
            </summary>
            <remarks>
            <para>
            If the given sink is an instance of SimpleDropSink, then events from the drop sink
            will be automatically forwarded to the ObjectListView (which means that handlers
            for those event can be configured within the IDE).
            </para>
            <para>If this is set to null, the control will not accept drops.</para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.EmptyListMsg">
            <summary>
            Gets or sets the text that should be shown when there are no items in this list view.
            </summary>
            <remarks>If the EmptyListMsgOverlay has been changed to something other than a TextOverlay,
            this property does nothing</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.EmptyListMsgFont">
            <summary>
            Gets or sets the font in which the List Empty message should be drawn
            </summary>
            <remarks>If the EmptyListMsgOverlay has been changed to something other than a TextOverlay,
            this property does nothing</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.EmptyListMsgFontOrDefault">
            <summary>
            Return the font for the 'list empty' message or a reasonable default
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.EmptyListMsgOverlay">
            <summary>
            Gets or sets the overlay responsible for drawing the List Empty msg.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.FilteredObjects">
            <summary>
            Gets the collection of objects that survive any filtering that may be in place.
            </summary>
            <remarks>
            <para>
            This collection is the result of filtering the current list of objects. 
            It is not a snapshot of the filtered list that was last used to build the control. 
            </para>
            <para>
            Normal warnings apply when using this with virtual lists. It will work, but it
            may take a while.
            </para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.FilterMenuBuildStrategy">
            <summary>
            Gets or sets the strategy object that will be used to build the Filter menu
            </summary>
            <remarks>If this is null, no filter menu will be built.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.Frozen">
            <summary>
            Get or set whether or not the listview is frozen. When the listview is
            frozen, it will not update itself.
            </summary>
            <remarks><para>The Frozen property is similar to the methods Freeze()/Unfreeze()
            except that changes to the Frozen property do not nest.</para></remarks>
            <example>objectListView1.Frozen = false; // unfreeze the control regardless of the number of Freeze() calls
            </example>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.Groups">
            <summary>
            Hide the Groups collection so it's not visible in the Properties grid.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.GroupImageList">
            <summary>
            Gets or sets the image list from which group header will take their images
            </summary>
            <remarks>If this is not set, then group headers will not show any images.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.GroupWithItemCountFormat">
            <summary>
            Gets how the group label should be formatted when a group is empty or
            contains more than one item
            </summary>
            <remarks>
            The given format string must have two placeholders:
            <list type="bullet">
            <item><description>{0} - the original group title</description></item>
            <item><description>{1} - the number of items in the group</description></item>
            </list>
            </remarks>
            <example>"{0} [{1} items]"</example>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.GroupWithItemCountFormatOrDefault">
            <summary>
            Return this.GroupWithItemCountFormat or a reasonable default
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.GroupWithItemCountSingularFormat">
            <summary>
            Gets how the group label should be formatted when a group contains only a single item
            </summary>
            <remarks>
            The given format string must have two placeholders:
            <list type="bullet">
            <item><description>{0} - the original group title</description></item>
            <item><description>{1} - the number of items in the group (always 1)</description></item>
            </list>
            </remarks>
            <example>"{0} [{1} item]"</example>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.GroupWithItemCountSingularFormatOrDefault">
            <summary>
            Gets GroupWithItemCountSingularFormat or a reasonable default
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.HasCollapsibleGroups">
            <summary>
            Gets or sets whether or not the groups in this ObjectListView should be collapsible.
            </summary>
            <remarks>
            This feature only works under Vista and later.
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.HasEmptyListMsg">
            <summary>
            Does this listview have a message that should be drawn when the list is empty?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.HasOverlays">
            <summary>
            Get whether there are any overlays to be drawn
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.HeaderControl">
            <summary>
            Gets the header control for the ListView
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.HeaderFont">
            <summary>
            Gets or sets the font in which the text of the column headers will be drawn
            </summary>
            <remarks>Individual columns can override this through their HeaderFormatStyle property.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.HeaderFormatStyle">
            <summary>
            Gets or sets the style that will be used to draw the columm headers of the listview
            </summary>
            <remarks>
            <para>
            This is only used when HeaderUsesThemes is false.
            </para>
            <para>
            Individual columns can override this through their HeaderFormatStyle property.
            </para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.HeaderMaximumHeight">
            <summary>
            Gets or sets the maximum height of the header. -1 means no maximum.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.HeaderUsesThemes">
            <summary>
            Gets or sets whether the header will be drawn strictly according to the OS's theme. 
            </summary>
            <remarks>
            <para>
            If this is set to true, the header will be rendered completely by the system, without
            any of ObjectListViews fancy processing -- no images in header, no filter indicators,
            no word wrapping, no header styling.
            </para>
            <para>If this is set to false, ObjectListView will render the header as it thinks best.
            If no special features are required, then ObjectListView will delegate rendering to the OS.
            Otherwise, ObjectListView will draw the header according to the configuration settings.
            </para>
            <para>
            The effect of not being themed will be different from OS to OS. At
            very least, the sort indicator will not be standard. 
            </para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.HeaderWordWrap">
            <summary>
            Gets or sets the whether the text in the header will be word wrapped.
            </summary>
            <remarks>
            <para>THIS FEATURE IS EXPERIMENTAL (August 2009)</para>
            <para>Line breaks will be applied between words. Words that are too long
            will still be ellipsed.</para>
            <para>
            As with all settings that make the header look different, HeaderUsesThemes must be set to false, otherwise
            the OS will be responsible for drawing the header, and it does not allow word wrapped text.
            </para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.HeaderToolTip">
            <summary>
            Gets the tool tip that shows tips for the column headers
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.HotRowIndex">
            <summary>
            Gets the index of the row that the mouse is currently over
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.HotColumnIndex">
            <summary>
            Gets the index of the subitem that the mouse is currently over
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.HotCellHitLocation">
            <summary>
            Gets the part of the item/subitem that the mouse is currently over
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.HotItemIndex">
            <summary>
            The index of the item that is 'hot', i.e. under the cursor. -1 means no item.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.HotItemStyle">
            <summary>
            What sort of formatting should be applied to the row under the cursor?
            </summary>
            <remarks>This only takes effect when UseHotItem is true.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.HyperlinkStyle">
            <summary>
            What sort of formatting should be applied to hyperlinks?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.HighlightBackgroundColor">
            <summary>
            What color should be used for the background of selected rows?
            </summary>
            <remarks>Windows does not give the option of changing the selection background.
            So the control has to be owner drawn to see the result of this setting.
            Setting UseCustomSelectionColors = true will do this for you.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.HighlightBackgroundColorOrDefault">
            <summary>
            Return the color should be used for the background of selected rows or a reasonable default
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.HighlightForegroundColor">
            <summary>
            What color should be used for the foreground of selected rows?
            </summary>
            <remarks>Windows does not give the option of changing the selection foreground (text color).
            So the control has to be owner drawn to see the result of this setting.
            Setting UseCustomSelectionColors = true will do this for you.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.HighlightForegroundColorOrDefault">
            <summary>
            Return the color should be used for the foreground of selected rows or a reasonable default
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.IncludeHiddenColumnsInDataTransfer">
            <summary>
            Gets or sets whether or not hidden columns should be included in the text representation
            of rows that are copied or dragged to another application. If this is false (the default),
            only visible columns will be included.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.IncludeColumnHeadersInCopy">
            <summary>
            Gets or sets whether or not hidden columns should be included in the text representation
            of rows that are copied or dragged to another application. If this is false (the default),
            only visible columns will be included.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.IsCellEditing">
            <summary>
            Return true if a cell edit operation is currently happening
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.IsDesignMode">
            <summary>
            Return true if the ObjectListView is being used within the development environment.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.IsFiltering">
            <summary>
            Gets whether or not the current list is filtering its contents
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.IsSearchOnSortColumn">
            <summary>
            When the user types into a list, should the values in the current sort column be searched to find a match?
            If this is false, the primary column will always be used regardless of the sort column.
            </summary>
            <remarks>When this is true, the behavior is like that of ITunes.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.IsSimpleDropSink">
            <summary>
            Gets or sets if this control will use a SimpleDropSink to receive drops
            </summary>
            <remarks>
            <para>
            Setting this replaces any previous DropSink.
            </para>
            <para>
            After setting this to true, the SimpleDropSink will still need to be configured
            to say when it can accept drops and what should happen when something is dropped.
            The need to do these things makes this property mostly useless :(
            </para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.IsSimpleDragSource">
            <summary>
            Gets or sets if this control will use a SimpleDragSource to initiate drags
            </summary>
            <remarks>Setting this replaces any previous DragSource</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.Items">
            <summary>
            Hide the Items collection so it's not visible in the Properties grid.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.ItemRenderer">
            <summary>
            This renderer draws the items when in the list is in non-details view.
            In details view, the renderers for the individuals columns are responsible.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.LastSortColumn">
            <summary>
            Which column did we last sort by
            </summary>
            <remarks>This is an alias for PrimarySortColumn</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.LastSortOrder">
            <summary>
            Which direction did we last sort
            </summary>
            <remarks>This is an alias for PrimarySortOrder</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.ListFilter">
            <summary>
            Gets or  sets the filter that is applied to our whole list of objects.
            </summary>
            <remarks>
            The list is updated immediately to reflect this filter. 
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.ModelFilter">
            <summary>
            Gets or  sets the filter that is applied to each model objects in the list
            </summary>
            <remarks>
            The list is updated immediately to reflect this filter. 
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.MouseMoveHitTest">
            <summary>
            Gets the hit test info last time the mouse was moved.
            </summary>
            <remarks>Useful for hot item processing.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.OLVGroups">
            <summary>
            Gets or sets the list of groups shown by the listview.
            </summary>
            <remarks>
            This property does not work like the .NET Groups property. It should
            be treated as a read-only property.
            Changes made to the list are NOT reflected in the ListView itself -- it is pointless to add
            or remove groups to/from this list. Such modifications will do nothing.
            To do such things, you must listen for
            BeforeCreatingGroups or AboutToCreateGroups events, and change the list of
            groups in those events.
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.OwnerDrawnHeader">
            <summary>
            Gets or sets whether the user wants to owner draw the header control
            themselves. If this is false (the default), ObjectListView will use
            custom drawing to render the header, if needed.
            </summary>
            <remarks>
            If you listen for the DrawColumnHeader event, you need to set this to true,
            otherwise your event handler will not be called.
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.Objects">
            <summary>
            Get/set the collection of objects that this list will show
            </summary>
            <remarks>
            <para>
            The contents of the control will be updated immediately after setting this property.
            </para>
            <para>This method preserves selection, if possible. Use SetObjects() if
            you do not want to preserve the selection. Preserving selection is the slowest part of this
            code and performance is O(n) where n is the number of selected rows.</para>
            <para>This method is not thread safe.</para>
            <para>The property DOES work on virtual lists: setting is problem-free, but if you try to get it
            and the list has 10 million objects, it may take some time to return.</para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.OverlayImage">
            <summary>
            Gets or sets the image that will be drawn over the top of the ListView
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.OverlayText">
            <summary>
            Gets or sets the text that will be drawn over the top of the ListView
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.OverlayTransparency">
            <summary>
            Gets or sets the transparency of all the overlays.
            0 is completely transparent, 255 is completely opaque.
            </summary>
            <remarks>
            This is obsolete. Use Transparency on each overlay.
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.Overlays">
            <summary>
            Gets the list of overlays that will be drawn on top of the ListView
            </summary>
            <remarks>
            You can add new overlays and remove overlays that you have added, but
            don't mess with the overlays that you didn't create.
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.PrimarySortColumn">
            <summary>
            Which column did we last sort by
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.PrimarySortOrder">
            <summary>
            Which direction did we last sort
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.RenderNonEditableCheckboxesAsDisabled">
            <summary>
            Gets or sets if non-editable checkboxes are drawn as disabled.
            </summary>
            <remarks>
            <para>This only has effect in owner drawn mode.</para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.RowHeight">
            <summary>
            Specify the height of each row in the control in pixels.
            </summary>
            <remarks><para>The row height in a listview is normally determined by the font size and the small image list size.
            This setting allows that calculation to be overridden (within reason: you still cannot set the line height to be
            less than the line height of the font used in the control). </para>
            <para>Setting it to -1 means use the normal calculation method.</para>
            <para><bold>This feature is experiemental!</bold> Strange things may happen to your program,
            your spouse or your pet if you use it.</para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.RowHeightEffective">
            <summary>
            How many pixels high is each row?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.RowsPerPage">
            <summary>
            How many rows appear on each page of this control
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.SecondarySortColumn">
            <summary>
            Get/set the column that will be used to resolve comparisons that are equal when sorting.
            </summary>
            <remarks>There is no user interface for this setting. It must be set programmatically.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.SecondarySortOrder">
            <summary>
            When the SecondarySortColumn is used, in what order will it compare results?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.SelectAllOnControlA">
            <summary>
            Gets or sets if all rows should be selected when the user presses Ctrl-A
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.SelectColumnsOnRightClick">
            <summary>
            When the user right clicks on the column headers, should a menu be presented which will allow
            them to choose which columns will be shown in the view?
            </summary>
            <remarks>This is just a compatibility wrapper for the SelectColumnsOnRightClickBehaviour
            property.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.SelectColumnsOnRightClickBehaviour">
            <summary>
            Gets or sets how the user will be able to select columns when the header is right clicked
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.SelectColumnsMenuStaysOpen">
            <summary>
            When the column select menu is open, should it stay open after an item is selected?
            Staying open allows the user to turn more than one column on or off at a time.
            </summary>
            <remarks>This only works when SelectColumnsOnRightClickBehaviour is set to InlineMenu.
            It has no effect when the behaviour is set to SubMenu.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.SelectedColumn">
            <summary>
            Gets or sets the column that is drawn with a slight tint.
            </summary>
            <remarks>
            <para>
            If TintSortColumn is true, the sort column will automatically
            be made the selected column.
            </para>
            <para>
            The colour of the tint is controlled by SelectedColumnTint.
            </para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.SelectedRowDecoration">
            <summary>
            Gets or sets the decoration that will be drawn on all selected rows
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.SelectedColumnTint">
            <summary>
            What color should be used to tint the selected column?
            </summary>
            <remarks>
            The tint color must be alpha-blendable, so if the given color is solid
            (i.e. alpha = 255), it will be changed to have a reasonable alpha value.
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.SelectedIndex">
            <summary>
            Gets or sets the index of the row that is currently selected. 
            When getting the index, if no row is selected,or more than one is selected, return -1.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.SelectedItem">
            <summary>
            Gets or sets the ListViewItem that is currently selected . If no row is selected, or more than one is selected, return null.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.SelectedObject">
            <summary>
            Gets the model object from the currently selected row, if there is only one row selected. 
            If no row is selected, or more than one is selected, returns null.
            When setting, this will select the row that is displaying the given model object and focus on it. 
            All other rows are deselected.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.SelectedObjects">
            <summary>
            Get the model objects from the currently selected rows. If no row is selected, the returned List will be empty.
            When setting this value, select the rows that is displaying the given model objects. All other rows are deselected.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.ShowCommandMenuOnRightClick">
            <summary>
            When the user right clicks on the column headers, should a menu be presented which will allow
            them to choose common tasks to perform on the listview?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.ShowFilterMenuOnRightClick">
            <summary>
            Gets or sets whether this ObjectListView will show Excel like filtering
            menus when the header control is right clicked
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.ShowGroups">
            <summary>
            Should this list show its items in groups?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.ShowSortIndicators">
            <summary>
            Should the list view show a bitmap in the column header to show the sort direction?
            </summary>
            <remarks>
            The only reason for not wanting to have sort indicators is that, on pre-XP versions of
            Windows, having sort indicators required the ListView to have a small image list, and
            as soon as you give a ListView a SmallImageList, the text of column 0 is bumped 16
            pixels to the right, even if you never used an image.
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.ShowImagesOnSubItems">
            <summary>
            Should the list view show images on subitems?
            </summary>
            <remarks>
            <para>Virtual lists have to be owner drawn in order to show images on subitems</para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.ShowItemCountOnGroups">
            <summary>
            This property controls whether group labels will be suffixed with a count of items.
            </summary>
            <remarks>
            The format of the suffix is controlled by GroupWithItemCountFormat/GroupWithItemCountSingularFormat properties
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.ShowHeaderInAllViews">
            <summary>
            Gets or sets whether the control will show column headers in all
            views (true), or only in Details view (false)
            </summary>
            <remarks>
            <para>
            This property is not working correctly. JPP 2010/04/06.
            It works fine if it is set before the control is created.
            But if it turned off once the control is created, the control
            loses its checkboxes (weird!)
            </para>
            <para>
            To changed this setting after the control is created, things
            are complicated. If it is off and we want it on, we have
            to change the View and the header will appear. If it is currently
            on and we want to turn it off, we have to both change the view
            AND recreate the handle. Recreating the handle is a problem 
            since it makes our checkbox style disappear. 
            </para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.SmallImageList">
            <summary>
            Override the SmallImageList property so we can correctly shadow its operations.
            </summary>
            <remarks><para>If you use the RowHeight property to specify the row height, the SmallImageList
            must be fully initialised before setting/changing the RowHeight. If you add new images to the image
            list after setting the RowHeight, you must assign the imagelist to the control again. Something as simple
            as this will work:
            <code>listView1.SmallImageList = listView1.SmallImageList;</code></para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.SmallImageSize">
            <summary>
            Return the size of the images in the small image list or a reasonable default
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.SortGroupItemsByPrimaryColumn">
            <summary>
            When the listview is grouped, should the items be sorted by the primary column?
            If this is false, the items will be sorted by the same column as they are grouped.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.SpaceBetweenGroups">
            <summary>
            When the listview is grouped, how many pixels should exist between the end of one group and the
            beginning of the next?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.TintSortColumn">
            <summary>
            Should the sort column show a slight tinge?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.TriStateCheckBoxes">
            <summary>
            Should each row have a tri-state checkbox?
            </summary>
            <remarks>
            If this is true, the user can choose the third state (normally Indeterminate). Otherwise, user clicks
            alternate between checked and unchecked. CheckStateGetter can still return Indeterminate when this
            setting is false.
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.TopItemIndex">
            <summary>
            Get or set the index of the top item of this listview
            </summary>
            <remarks>
            <para>
            This property only works when the listview is in Details view and not showing groups.
            </para>
            <para>
            The reason that it does not work when showing groups is that, when groups are enabled,
            the Windows msg LVM_GETTOPINDEX always returns 0, regardless of the
            scroll position.
            </para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.UpdateSpaceFillingColumnsWhenDraggingColumnDivider">
            <summary>
            When resizing a column by dragging its divider, should any space filling columns be
            resized at each mouse move? If this is false, the filling columns will be
            updated when the mouse is released.
            </summary>
            <remarks>
            <para>
            In previous versions, setting this to true produced ugly behaviour, because every
            column to the right of the divider being dragged was updated twice: once when
            the column be resized changes size (this moves all the columns slightly to the right);
            then again when the filling columns are updated - they are shrunk
            so that the combined width is not more than the control, so everything jumps slightly back to the left again.
            </para>
            <para>
            But, as of v2.0, the change the Windows messages in place, so there is now only one update,
            and everything looks nice and smooth.
            </para>
            <para>
            However, it still looks odd when the space filling column
            is in the left of the column that is being resized: the right edge of the column is dragged, but
            its <b>left</b> edge moves, since the space filling column is shrinking.
            </para>
            <para>Given the above behavior is probably best to turn this property off if your space filling
            columns aren't the right-most columns.</para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.UnfocusedHighlightBackgroundColor">
            <summary>
            What color should be used for the background of selected rows when the control doesn't have the focus?
            </summary>
            <remarks>Windows does not give the option of changing the selection background.
            So the control has to be owner drawn to see the result of this setting.
            Setting UseCustomSelectionColors = true will do this for you.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.UnfocusedHighlightBackgroundColorOrDefault">
            <summary>
            Return the color should be used for the background of selected rows when the control doesn't have the focus or a reasonable default
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.UnfocusedHighlightForegroundColor">
            <summary>
            What color should be used for the foreground of selected rows when the control doesn't have the focus?
            </summary>
            <remarks>Windows does not give the option of changing the selection foreground (text color).
            So the control has to be owner drawn to see the result of this setting.
            Setting UseCustomSelectionColors = true will do this for you.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.UnfocusedHighlightForegroundColorOrDefault">
            <summary>
            Return the color should be used for the foreground of selected rows when the control doesn't have the focus or a reasonable default
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.UseAlternatingBackColors">
            <summary>
            Should the list give a different background color to every second row?
            </summary>
            <remarks><para>The color of the alternate rows is given by AlternateRowBackColor.</para>
            <para>There is a "feature" in .NET for listviews in non-full-row-select mode, where
            selected rows are not drawn with their correct background color.</para></remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.UseCellFormatEvents">
            <summary>
            Should FormatCell events be called for each cell in the control?
            </summary>
            <remarks>Individual rows can decide whether to call FormatCell
            events. This is simply the default behaviour.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.UseCustomSelectionColors">
            <summary>
            Should the selected row be drawn with non-standard foreground and background colors?
            </summary>
            <remarks>
            When this is enabled, the control becomes owner drawn.
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.UseExplorerTheme">
            <summary>
            Gets or sets whether this ObjectListView will use the same hot item and selection 
            mechanism that Vista Explorer does.
            </summary>
            <remarks>This property has many imperfections:
            <list type="bullet">
            <item><description>This only works on Vista and later</description></item>
            <item><description>It does nothing for owner drawn lists.
            Owner drawn lists are (naturally) controlled by their renderers.</description></item>
            <item><description>It does not work well with AlternateRowBackColors.</description></item>
            <item><description>It does not play well with HotItemStyles.</description></item>
            <item><description>It looks a little bit silly is FullRowSelect is false.</description></item>
            </list>
            But if you absolutely have to look like Vista, this is your property. 
            Do not complain if settings this messes up other things.
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.UseFiltering">
            <summary>
            Gets or sets whether the list should enable filtering
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.UseFilterIndicator">
            <summary>
            Gets or sets whether the list should put an indicator into a column's header to show that
            it is filtering on that column
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.UseHotItem">
            <summary>
            Should the item under the cursor be formatted in a special way?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.UseHyperlinks">
            <summary>
            Gets or sets whether this listview should show hyperlinks in the cells.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.UseOverlays">
            <summary>
            Should this control show overlays
            </summary>
            <remarks>Overlays are enabled by default and would only need to be disabled
            if they were causing problems in your development environment.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.UseSubItemCheckBoxes">
            <summary>
            Should this control be configured to show check boxes on subitems?
            </summary>
            <remarks>If this is set to True, the control will be given a SmallImageList if it
            doesn't already have one. Also, if it is a virtual list, it will be set to owner
            drawn, since virtual lists can't draw check boxes without being owner drawn.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.UseTranslucentSelection">
            <summary>
            Gets or sets if the ObjectListView will use a translucent selection mechanism like Vista.
            </summary>
            <remarks>
            <para>
            Unlike UseExplorerTheme, this Vista-like scheme works on XP and for both
            owner and non-owner drawn lists.
            </para>
            <para>
            This will replace any SelectedRowDecoration that has been installed.
            </para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.UseTranslucentHotItem">
            <summary>
            Gets or sets if the ObjectListView will use a translucent hot row highlighting mechanism like Vista.
            </summary>
            <remarks>Setting this will replace any HotItemStyle that has been </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.View">
            <summary>
            Get/set the style of view that this listview is using
            </summary>
            <remarks>Switching to tile or details view installs the columns appropriate to that view.
            Confusingly, in tile view, every column is shown as a row of information.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.BooleanCheckStateGetter">
            <summary>
            This delegate fetches the checkedness of an object as a boolean only.
            </summary>
            <remarks>Use this if you never want to worry about the
            Indeterminate state (which is fairly common).
            <para>
            This is a convenience wrapper around the CheckStateGetter property.
            </para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.BooleanCheckStatePutter">
            <summary>
            This delegate sets the checkedness of an object as a boolean only. It must return
            true or false indicating if the object was checked or not.
            </summary>
            <remarks>Use this if you never want to worry about the
            Indeterminate state (which is fairly common).
            <para>
            This is a convenience wrapper around the CheckStatePutter property.
            </para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.CanShowGroups">
            <summary>
            Gets whether or not this listview is capabale of showing groups
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.CellToolTipGetter">
            <summary>
            This delegate is called when the list wants to show a tooltip for a particular cell.
            The delegate should return the text to display, or null to use the default behavior
            (which is to show the full text of truncated cell values).
            </summary>
            <remarks>
            Displaying the full text of truncated cell values only work for FullRowSelect listviews.
            This is MS's behavior, not mine. Don't complain to me :)
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.CheckedAspectName">
            <summary>
            The name of the property (or field) that holds whether or not a model is checked.
            </summary>
            <remarks>
            <para>The property be modifiable. It must have a return type of bool (or of bool? if
            TriStateCheckBoxes is true).</para>
            <para>Setting this property replaces any CheckStateGetter or CheckStatePutter that have been installed.
            Conversely, later setting the CheckStateGetter or CheckStatePutter properties will take precedence
            over the behavior of this property.</para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.CheckStateGetter">
            <summary>
            This delegate will be called whenever the ObjectListView needs to know the check state
            of the row associated with a given model object.
            </summary>
            <remarks>
            <para>.NET has no support for indeterminate values, but as of v2.0, this class allows
            indeterminate values.</para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.CheckStatePutter">
            <summary>
            This delegate will be called whenever the user tries to change the check state of a row.
            The delegate should return the state that was actually set, which may be different
            to the state given.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.CustomSorter">
            <summary>
            This delegate can be used to sort the table in a custom fasion.
            </summary>
            <remarks>
            <para>
            The delegate must install a ListViewItemSorter on the ObjectListView.
            Installing the ItemSorter does the actual work of sorting the ListViewItems.
            See ColumnComparer in the code for an example of what an ItemSorter has to do.
            </para>
            <para>
            Do not install a CustomSorter on a VirtualObjectListView. Override the SortObjects()
            method of the IVirtualListDataSource instead.
            </para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.HeaderToolTipGetter">
            <summary>
            This delegate is called when the list wants to show a tooltip for a particular header.
            The delegate should return the text to display, or null to use the default behavior
            (which is to not show any tooltip).
            </summary>
            <remarks>
            Installing a HeaderToolTipGetter takes precedence over any text in OLVColumn.ToolTipText.
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.RowFormatter">
            <summary>
            This delegate can be used to format a OLVListItem before it is added to the control.
            </summary>
            <remarks>
            <para>The model object for the row can be found through the RowObject property of the OLVListItem object.</para>
            <para>All subitems normally have the same style as list item, so setting the forecolor on one
            subitem changes the forecolor of all subitems.
            To allow subitems to have different attributes, do this:
            <code>myListViewItem.UseItemStyleForSubItems = false;</code>.
            </para>
            <para>If UseAlternatingBackColors is true, the backcolor of the listitem will be calculated
            by the control and cannot be controlled by the RowFormatter delegate.
            In general, trying to use a RowFormatter
            when UseAlternatingBackColors is true does not work well.</para>
            <para>As it says in the summary, this is called <b>before</b> the item is added to the control.
            Many properties of the OLVListItem itself are not available at that point, including:
            Index, Selected, Focused, Bounds, Checked, DisplayIndex.</para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.MenuLabelSortAscending">
            <summary>
            Gets or set the text to be used for the sorting ascending command
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.MenuLabelSortDescending">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.MenuLabelGroupBy">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.MenuLabelLockGroupingOn">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.MenuLabelUnlockGroupingOn">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.MenuLabelTurnOffGroups">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.MenuLabelUnsort">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.MenuLabelColumns">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ObjectListView.MenuLabelSelectColumns">
            <summary>
            
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.ObjectListView.CellEditActivateMode">
            <summary>
            How does a user indicate that they want to edit cells?
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.ObjectListView.CellEditActivateMode.None">
            <summary>
            This list cannot be edited. F2 does nothing.
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.ObjectListView.CellEditActivateMode.SingleClick">
            <summary>
            A single click on  a <strong>subitem</strong> will edit the value. Single clicking the primary column,
            selects the row just like normal. The user must press F2 to edit the primary column.
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.ObjectListView.CellEditActivateMode.DoubleClick">
            <summary>
            Double clicking a subitem or the primary column will edit that cell.
            F2 will edit the primary column.
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.ObjectListView.CellEditActivateMode.F2Only">
            <summary>
            Pressing F2 is the only way to edit the cells. Once the primary column is being edited,
            the other cells in the row can be edited by pressing Tab.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.ObjectListView.ColumnSelectBehaviour">
            <summary>
            These values specify how column selection will be presented to the user
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.ObjectListView.ColumnSelectBehaviour.None">
            <summary>
            No column selection will be presented 
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.ObjectListView.ColumnSelectBehaviour.InlineMenu">
            <summary>
            The columns will be show in the main menu
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.ObjectListView.ColumnSelectBehaviour.Submenu">
            <summary>
            The columns will be shown in a submenu
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.ObjectListView.ColumnSelectBehaviour.ModelDialog">
            <summary>
            A model dialog will be presented to allow the user to choose columns
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.ObjectListView.ObjectListViewState">
            <summary>
            Instances of this class are used to store the state of an ObjectListView.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.DataListView.#ctor">
            <summary>
            Make a DataListView
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.DataListView.CreateDataSourceAdapter">
            <summary>
            Create the DataSourceAdapter that this control will use.
            </summary>
            <returns>A DataSourceAdapter configured for this list</returns>
            <remarks>Subclasses should overrride this to create their
            own specialized adapters</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.DataListView.AddObjects(System.Collections.ICollection)">
            <summary>
            Add the given collection of model objects to this control.
            </summary>
            <param name="modelObjects">A collection of model objects</param>
            <remarks>This is a no-op for data lists, since the data
            is controlled by the VirtualListDataSource. Manipulate the data source
            rather than this view of the data source.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.DataListView.RemoveObjects(System.Collections.ICollection)">
            <summary>
            Remove the given collection of model objects from this control.
            </summary>
            <remarks>This is a no-op for data lists, since the data
            is controlled by the VirtualListDataSource. Manipulate the data source
            rather than this view of the data source.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.DataListView.OnParentBindingContextChanged(System.EventArgs)">
            <summary>
            Handles parent binding context changes
            </summary>
            <param name="e">Unused EventArgs.</param>
        </member>
        <member name="P:DevGrep.Controls.DLV.DataListView.DataSource">
            <summary>
            Get or set the VirtualListDataSource that will be displayed in this list view.
            </summary>
            <remarks>The VirtualListDataSource should implement either <see cref="T:System.Collections.IList"/>, <see cref="T:System.ComponentModel.IBindingList"/>,
            or <see cref="T:System.ComponentModel.IListSource"/>. Some common examples are the following types of objects:
            <list type="unordered">
            <item><description><see cref="T:System.Data.DataView"/></description></item>
            <item><description><see cref="T:System.Data.DataTable"/></description></item>
            <item><description><see cref="T:System.Data.DataSet"/></description></item>
            <item><description><see cref="T:System.Data.DataViewManager"/></description></item>
            <item><description><see cref="T:System.Windows.Forms.BindingSource"/></description></item>
            </list>
            <para>When binding to a list container (i.e. one that implements the
            <see cref="T:System.ComponentModel.IListSource"/> interface, such as <see cref="T:System.Data.DataSet"/>)
            you must also set the <see cref="P:DevGrep.Controls.DLV.DataListView.DataMember"/> property in order
            to identify which particular list you would like to display. You
            may also set the <see cref="P:DevGrep.Controls.DLV.DataListView.DataMember"/> property even when
            VirtualListDataSource refers to a list, since <see cref="P:DevGrep.Controls.DLV.DataListView.DataMember"/> can
            also be used to navigate relations between lists.</para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.DataListView.DataMember">
            <summary>
            Gets or sets the name of the list or table in the data source for which the DataListView is displaying data.
            </summary>
            <remarks>If the data source is not a DataSet or DataViewManager, this property has no effect</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.DataListView.Adapter">
            <summary>
            Gets or sets the DataSourceAdaptor that does the bulk of the work needed
            for data binding.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.IDragSource">
            <summary>
            An IDragSource controls how drag out from the ObjectListView will behave
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.IDragSource.StartDrag(DevGrep.Controls.DLV.ObjectListView,System.Windows.Forms.MouseButtons,DevGrep.Controls.DLV.OLVListItem)">
            <summary>
            A drag operation is beginning. Return the data object that will be used 
            for data transfer. Return null to prevent the drag from starting. The data
            object will normally include all the selected objects.
            </summary>
            <remarks>
            The returned object is later passed to the GetAllowedEffect() and EndDrag()
            methods.
            </remarks>
            <param name="olv">What ObjectListView is being dragged from.</param>
            <param name="button">Which mouse button is down?</param>
            <param name="item">What item was directly dragged by the user? There may be more than just this 
            item selected.</param>
            <returns>The data object that will be used for data transfer. This will often be a subclass
            of DataObject, but does not need to be.</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.IDragSource.GetAllowedEffects(System.Object)">
            <summary>
            What operations are possible for this drag? This controls the icon shown during the drag
            </summary>
            <param name="dragObject">The data object returned by StartDrag()</param>
            <returns>A combination of DragDropEffects flags</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.IDragSource.EndDrag(System.Object,System.Windows.Forms.DragDropEffects)">
            <summary>
            The drag operation is complete. Do whatever is necessary to complete the action.
            </summary>
            <param name="dragObject">The data object returned by StartDrag()</param>
            <param name="effect">The value returned from GetAllowedEffects()</param>
        </member>
        <member name="T:DevGrep.Controls.DLV.AbstractDragSource">
            <summary>
            A do-nothing implementation of IDragSource that can be safely subclassed.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractDragSource.StartDrag(DevGrep.Controls.DLV.ObjectListView,System.Windows.Forms.MouseButtons,DevGrep.Controls.DLV.OLVListItem)">
            <summary>
            See IDragSource documentation
            </summary>
            <param name="olv"></param>
            <param name="button"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractDragSource.GetAllowedEffects(System.Object)">
            <summary>
            See IDragSource documentation
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractDragSource.EndDrag(System.Object,System.Windows.Forms.DragDropEffects)">
            <summary>
            See IDragSource documentation
            </summary>
            <param name="dragObject"></param>
            <param name="effect"></param>
        </member>
        <member name="T:DevGrep.Controls.DLV.SimpleDragSource">
            <summary>
            A reasonable implementation of IDragSource that provides normal
            drag source functionality. It creates a data object that supports
            inter-application dragging of text and HTML representation of 
            the dragged rows. It can optionally force a refresh of all dragged
            rows when the drag is complete.
            </summary>
            <remarks>Subclasses can override GetDataObject() to add new
            data formats to the data transfer object.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleDragSource.#ctor">
            <summary>
            Construct a SimpleDragSource
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleDragSource.#ctor(System.Boolean)">
            <summary>
            Construct a SimpleDragSource that refreshes the dragged rows when
            the drag is complete
            </summary>
            <param name="refreshAfterDrop"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleDragSource.StartDrag(DevGrep.Controls.DLV.ObjectListView,System.Windows.Forms.MouseButtons,DevGrep.Controls.DLV.OLVListItem)">
            <summary>
            Create a DataObject when the user does a left mouse drag operation.
            See IDragSource for further information.
            </summary>
            <param name="olv"></param>
            <param name="button"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleDragSource.GetAllowedEffects(System.Object)">
            <summary>
            Which operations are allowed in the operation? By default, all operations are supported.
            </summary>
            <param name="data"></param>
            <returns>All opertions are supported</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleDragSource.EndDrag(System.Object,System.Windows.Forms.DragDropEffects)">
            <summary>
            The drag operation is finished. Refreshe the dragged rows if so configured.
            </summary>
            <param name="dragObject"></param>
            <param name="effect"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleDragSource.CreateDataObject(DevGrep.Controls.DLV.ObjectListView)">
            <summary>
            Create a data object that will be used to as the data object
            for the drag operation.
            </summary>
            <remarks>
            Subclasses can override this method add new formats to the data object.
            </remarks>
            <param name="olv">The ObjectListView that is the source of the drag</param>
            <returns>A data object for the drag</returns>
        </member>
        <member name="P:DevGrep.Controls.DLV.SimpleDragSource.RefreshAfterDrop">
            <summary>
            Gets or sets whether the dragged rows should be refreshed when the 
            drag operation is complete.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.IDropSink">
            <summary>
            Objects that implement this interface can acts as the receiver for drop
            operation for an ObjectListView.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.IDropSink.DrawFeedback(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw any feedback that is appropriate to the current drop state.
            </summary>
            <remarks>
            Any drawing is done over the top of the ListView. This operation should disturb
            the Graphic as little as possible. Specifically, do not erase the area into which
            you draw. 
            </remarks>
            <param name="g">A Graphic for drawing</param>
            <param name="bounds">The contents bounds of the ListView (not including any header)</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.IDropSink.Drop(System.Windows.Forms.DragEventArgs)">
            <summary>
            The user has released the drop over this control
            </summary>
            <remarks>
            Implementators should set args.Effect to the appropriate DragDropEffects. This value is returned
            to the originator of the drag.
            </remarks>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.IDropSink.Enter(System.Windows.Forms.DragEventArgs)">
            <summary>
            A drag has entered this control.
            </summary>
            <remarks>Implementators should set args.Effect to the appropriate DragDropEffects.</remarks>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.IDropSink.GiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
            <summary>
            Change the cursor to reflect the current drag operation.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.IDropSink.Leave">
            <summary>
            The drag has left the bounds of this control
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.IDropSink.Over(System.Windows.Forms.DragEventArgs)">
            <summary>
            The drag is moving over this control.
            </summary>
            <remarks>This is where any drop target should be calculated.
            Implementators should set args.Effect to the appropriate DragDropEffects.
            </remarks>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.IDropSink.QueryContinue(System.Windows.Forms.QueryContinueDragEventArgs)">
            <summary>
            Should the drag be allowed to continue?
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:DevGrep.Controls.DLV.IDropSink.ListView">
            <summary>
            Gets or sets the ObjectListView that is the drop sink
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.AbstractDropSink">
            <summary>
            This is a do-nothing implementation of IDropSink that is a useful
            base class for more sophisticated implementations.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractDropSink.DrawFeedback(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw any feedback that is appropriate to the current drop state.
            </summary>
            <remarks>
            Any drawing is done over the top of the ListView. This operation should disturb
            the Graphic as little as possible. Specifically, do not erase the area into which
            you draw. 
            </remarks>
            <param name="g">A Graphic for drawing</param>
            <param name="bounds">The contents bounds of the ListView (not including any header)</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractDropSink.Drop(System.Windows.Forms.DragEventArgs)">
            <summary>
            The user has released the drop over this control
            </summary>
            <remarks>
            Implementators should set args.Effect to the appropriate DragDropEffects. This value is returned
            to the originator of the drag.
            </remarks>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractDropSink.Enter(System.Windows.Forms.DragEventArgs)">
            <summary>
            A drag has entered this control.
            </summary>
            <remarks>Implementators should set args.Effect to the appropriate DragDropEffects.</remarks>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractDropSink.Leave">
            <summary>
            The drag has left the bounds of this control
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractDropSink.Over(System.Windows.Forms.DragEventArgs)">
            <summary>
            The drag is moving over this control.
            </summary>
            <remarks>This is where any drop target should be calculated.
            Implementators should set args.Effect to the appropriate DragDropEffects.
            </remarks>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractDropSink.GiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
            <summary>
            Change the cursor to reflect the current drag operation.
            </summary>
            <remarks>You only need to override this if you want non-standard cursors.
            The standard cursors are supplied automatically.</remarks>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractDropSink.QueryContinue(System.Windows.Forms.QueryContinueDragEventArgs)">
            <summary>
            Should the drag be allowed to continue?
            </summary>
            <remarks>
            You only need to override this if you want the user to be able
            to end the drop in some non-standard way, e.g. dragging to a
            certain point even without releasing the mouse, or going outside
            the bounds of the application. 
            </remarks>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractDropSink.Cleanup">
            <summary>
            This is called when the mouse leaves the drop region and after the
            drop has completed.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.AbstractDropSink.ListView">
            <summary>
            Gets or sets the ObjectListView that is the drop sink
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.DropTargetLocation">
            <summary>
            The enum indicates which target has been found for a drop operation
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.DropTargetLocation.None">
            <summary>
            No applicable target has been found
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.DropTargetLocation.Background">
            <summary>
            The list itself is the target of the drop
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.DropTargetLocation.Item">
            <summary>
            An item is the target
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.DropTargetLocation.BetweenItems">
            <summary>
            Between two items (or above the top item or below the bottom item)
            can be the target. This is not actually ever a target, only a value indicate
            that it is valid to drop between items
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.DropTargetLocation.AboveItem">
            <summary>
            Above an item is the target
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.DropTargetLocation.BelowItem">
            <summary>
            Below an item is the target
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.DropTargetLocation.SubItem">
            <summary>
            A subitem is the target of the drop
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.DropTargetLocation.RightOfItem">
            <summary>
            On the right of an item is the target (not currently used)
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.DropTargetLocation.LeftOfItem">
            <summary>
            On the left of an item is the target (not currently used)
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.SimpleDropSink">
            <summary>
            This class represents a simple implementation of a drop sink.
            </summary>
            <remarks>
            Actually, it's far from simple and can do quite a lot in its own right.
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleDropSink.#ctor">
            <summary>
            Make a new drop sink
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleDropSink.Cleanup">
            <summary>
            Cleanup the drop sink when the mouse has left the control or 
            the drag has finished.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleDropSink.DrawFeedback(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw any feedback that is appropriate to the current drop state.
            </summary>
            <remarks>
            Any drawing is done over the top of the ListView. This operation should disturb
            the Graphic as little as possible. Specifically, do not erase the area into which
            you draw. 
            </remarks>
            <param name="g">A Graphic for drawing</param>
            <param name="bounds">The contents bounds of the ListView (not including any header)</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleDropSink.Drop(System.Windows.Forms.DragEventArgs)">
            <summary>
            The user has released the drop over this control
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleDropSink.Enter(System.Windows.Forms.DragEventArgs)">
            <summary>
            A drag has entered this control.
            </summary>
            <remarks>Implementators should set args.Effect to the appropriate DragDropEffects.</remarks>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleDropSink.Over(System.Windows.Forms.DragEventArgs)">
            <summary>
            The drag is moving over this control.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleDropSink.TriggerDroppedEvent(System.Windows.Forms.DragEventArgs)">
            <summary>
            Trigger the Dropped events
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleDropSink.OnCanDrop(DevGrep.Controls.DLV.OlvDropEventArgs)">
            <summary>
            Trigger CanDrop
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleDropSink.OnDropped(DevGrep.Controls.DLV.OlvDropEventArgs)">
            <summary>
            Trigger Dropped
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleDropSink.OnModelCanDrop(DevGrep.Controls.DLV.ModelDropEventArgs)">
            <summary>
            Trigger ModelCanDrop
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleDropSink.OnModelDropped(DevGrep.Controls.DLV.ModelDropEventArgs)">
            <summary>
            Trigger ModelDropped
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleDropSink.HandleTimerTick">
            <summary>
            Handle the timer tick event, which is sent when the listview should
            scroll
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleDropSink.CalculateDropTarget(DevGrep.Controls.DLV.OlvDropEventArgs,System.Drawing.Point)">
            <summary>
            When the mouse is at the given point, what should the target of the drop be?
            </summary>
            <remarks>This method should update the DropTarget* members of the given arg block</remarks>
            <param name="args"></param>
            <param name="pt">The mouse point, in client co-ordinates</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleDropSink.CalculateDropAction(System.Windows.Forms.DragEventArgs,System.Drawing.Point)">
            <summary>
            What sort of action is possible when the mouse is at the given point?
            </summary>
            <remarks>
            </remarks>
            <param name="args"></param>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleDropSink.CalculateStandardDropActionFromKeys">
            <summary>
            Based solely on the state of the modifier keys, what drop operation should
            be used?
            </summary>
            <returns>The drop operation that matches the state of the keys</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleDropSink.CheckScrolling(System.Drawing.Point)">
            <summary>
            Should the listview be made to scroll when the mouse is at the given point?
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleDropSink.UpdateAfterCanDropEvent(DevGrep.Controls.DLV.OlvDropEventArgs)">
            <summary>
            Update the state of our sink to reflect the information that 
            may have been written into the drop event args.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleDropSink.DrawFeedbackBackgroundTarget(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw the feedback that shows that the background is the target
            </summary>
            <param name="g"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleDropSink.DrawFeedbackItemTarget(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw the feedback that shows that an item (or a subitem) is the target
            </summary>
            <param name="g"></param>
            <param name="bounds"></param>
            <remarks>
            DropTargetItem and DropTargetSubItemIndex tells what is the target
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleDropSink.DrawFeedbackAboveItemTarget(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw the feedback that shows the drop will occur before target
            </summary>
            <param name="g"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleDropSink.DrawFeedbackBelowItemTarget(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw the feedback that shows the drop will occur after target
            </summary>
            <param name="g"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleDropSink.GetRoundedRect(System.Drawing.Rectangle,System.Single)">
            <summary>
            Return a GraphicPath that is round corner rectangle.
            </summary>
            <param name="rect"></param>
            <param name="diameter"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleDropSink.CalculateDropTargetRectangle(DevGrep.Controls.DLV.OLVListItem,System.Int32)">
            <summary>
            Calculate the target rectangle when the given item (and possible subitem)
            is the target of the drop.
            </summary>
            <param name="item"></param>
            <param name="subItem"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleDropSink.DrawBetweenLine(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw a "between items" line at the given co-ordinates
            </summary>
            <param name="g"></param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
        </member>
        <member name="P:DevGrep.Controls.DLV.SimpleDropSink.AcceptableLocations">
            <summary>
            Get or set the locations where a drop is allowed to occur (OR-ed together)
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.SimpleDropSink.AcceptExternal">
            <summary>
            Gets or sets whether this sink allows model objects to be dragged from other lists
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.SimpleDropSink.AutoScroll">
            <summary>
            Gets or sets whether the ObjectListView should scroll when the user drags
            something near to the top or bottom rows.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.SimpleDropSink.Billboard">
            <summary>
            Gets the billboard overlay that will be used to display feedback
            messages during a drag operation. 
            </summary>
            <remarks>Set this to null to stop the feedback.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.SimpleDropSink.CanDropBetween">
            <summary>
            Get or set whether a drop can occur between items of the list
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.SimpleDropSink.CanDropOnBackground">
            <summary>
            Get or set whether a drop can occur on the listview itself
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.SimpleDropSink.CanDropOnItem">
            <summary>
            Get or set whether a drop can occur on items in the list
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.SimpleDropSink.CanDropOnSubItem">
            <summary>
            Get or set whether a drop can occur on a subitem in the list
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.SimpleDropSink.DropTargetIndex">
            <summary>
            Get or set the index of the item that is the target of the drop
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.SimpleDropSink.DropTargetItem">
            <summary>
            Get the item that is the target of the drop
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.SimpleDropSink.DropTargetLocation">
            <summary>
            Get or set the location of the target of the drop
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.SimpleDropSink.DropTargetSubItemIndex">
            <summary>
            Get or set the index of the subitem that is the target of the drop
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.SimpleDropSink.FeedbackColor">
            <summary>
            Get or set the color that will be used to provide drop feedback
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.SimpleDropSink.IsAltDown">
            <summary>
            Get whether the alt key was down during this drop event
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.SimpleDropSink.IsAnyModifierDown">
            <summary>
            Get whether any modifier key was down during this drop event
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.SimpleDropSink.IsControlDown">
            <summary>
            Get whether the control key was down during this drop event
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.SimpleDropSink.IsLeftMouseButtonDown">
            <summary>
            Get whether the left mouse button was down during this drop event
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.SimpleDropSink.IsMiddleMouseButtonDown">
            <summary>
            Get whether the right mouse button was down during this drop event
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.SimpleDropSink.IsRightMouseButtonDown">
            <summary>
            Get whether the right mouse button was down during this drop event
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.SimpleDropSink.IsShiftDown">
            <summary>
            Get whether the shift key was down during this drop event
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.SimpleDropSink.KeyState">
            <summary>
            Get or set the state of the keys during this drop event
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.SimpleDropSink.CanDrop">
            <summary>
            Triggered when the sink needs to know if a drop can occur.
            </summary>
            <remarks>
            Handlers should set Effect to indicate what is possible.
            Handlers can change any of the DropTarget* setttings to change
            the target of the drop.
            </remarks>
        </member>
        <member name="E:DevGrep.Controls.DLV.SimpleDropSink.Dropped">
            <summary>
            Triggered when the drop is made.
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.SimpleDropSink.ModelCanDrop">
            <summary>
            Triggered when the sink needs to know if a drop can occur
            AND the source is an ObjectListView
            </summary>
            <remarks>
            Handlers should set Effect to indicate what is possible.
            Handlers can change any of the DropTarget* setttings to change
            the target of the drop.
            </remarks>
        </member>
        <member name="E:DevGrep.Controls.DLV.SimpleDropSink.ModelDropped">
            <summary>
            Triggered when the drop is made.
            AND the source is an ObjectListView
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.RearrangingDropSink">
            <summary>
            This drop sink allows items within the same list to be rearranged,
            as well as allowing items to be dropped from other lists.
            </summary>
            <remarks>
            <para>
            This class can only be used on plain ObjectListViews and FastObjectListViews.
            The other flavours have no way to implement the insert operation that is required.
            </para>
            <para>
            This class does not work with grouping.
            </para>
            <para>
            This class works when the OLV is sorted, but it is up to the programmer
            to decide what rearranging such lists "means". Example: if the control is sorting
            students by academic grade, and the user drags a "Fail" grade student up amonst the "A+"
            students, it is the responsibility of the programmer to makes the appropriate changes
            to the model and redraw/rebuild the control so that the users action makes sense.
            </para>
            <para>
            Users of this class should listen for the CanDrop event to decide
            if models from another OLV can be moved to OLV under this sink.
            </para>
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.RearrangingDropSink.#ctor">
            <summary>
            Create a RearrangingDropSink
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.RearrangingDropSink.#ctor(System.Boolean)">
            <summary>
            Create a RearrangingDropSink
            </summary>
            <param name="acceptDropsFromOtherLists"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.RearrangingDropSink.OnModelCanDrop(DevGrep.Controls.DLV.ModelDropEventArgs)">
            <summary>
            Trigger OnModelCanDrop
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.RearrangingDropSink.OnModelDropped(DevGrep.Controls.DLV.ModelDropEventArgs)">
            <summary>
            Trigger OnModelDropped
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.RearrangingDropSink.RearrangeModels(DevGrep.Controls.DLV.ModelDropEventArgs)">
            <summary>
            Do the work of processing the dropped items
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:DevGrep.Controls.DLV.OlvDropEventArgs">
            <summary>
            When a drop sink needs to know if something can be dropped, or
            to notify that a drop has occured, it uses an instance of this class.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.OlvDropEventArgs.#ctor">
            <summary>
            Create a OlvDropEventArgs
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OlvDropEventArgs.DataObject">
            <summary>
            Get the data object that is being dragged
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OlvDropEventArgs.DropSink">
            <summary>
            Get the drop sink that originated this event
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OlvDropEventArgs.DropTargetIndex">
            <summary>
            Get or set the index of the item that is the target of the drop
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OlvDropEventArgs.DropTargetLocation">
            <summary>
            Get or set the location of the target of the drop
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OlvDropEventArgs.DropTargetSubItemIndex">
            <summary>
            Get or set the index of the subitem that is the target of the drop
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OlvDropEventArgs.DropTargetItem">
            <summary>
            Get the item that is the target of the drop
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OlvDropEventArgs.Effect">
            <summary>
            Get or set the drag effect that should be used for this operation
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OlvDropEventArgs.Handled">
            <summary>
            Get or set if this event was handled. No further processing will be done for a handled event.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OlvDropEventArgs.InfoMessage">
            <summary>
            Get or set the feedback message for this operation
            </summary>
            <remarks>
            If this is not null, it will be displayed as a feedback message
            during the drag.
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OlvDropEventArgs.ListView">
            <summary>
            Get the ObjectListView that is being dropped on
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OlvDropEventArgs.MouseLocation">
            <summary>
            Get the location of the mouse (in target ListView co-ords)
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OlvDropEventArgs.StandardDropActionFromKeys">
            <summary>
            Get the drop action indicated solely by the state of the modifier keys
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.ModelDropEventArgs">
            <summary>
            These events are triggered when the drag source is an ObjectListView.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ModelDropEventArgs.#ctor">
            <summary>
            Create a ModelDropEventArgs
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ModelDropEventArgs.RefreshObjects">
            <summary>
            Refresh all the objects involved in the operation
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ModelDropEventArgs.SourceModels">
            <summary>
            Gets the model objects that are being dragged.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ModelDropEventArgs.SourceListView">
            <summary>
            Gets the ObjectListView that is the source of the dragged objects.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ModelDropEventArgs.TargetModel">
            <summary>
            Get the model object that is being dropped upon.
            </summary>
            <remarks>This is only value for TargetLocation == Item</remarks>
        </member>
        <member name="T:DevGrep.Controls.DLV.OLVDataObject">
            <summary>
            A data transfer object that knows how to transform a list of model
            objects into a text and HTML representation.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVDataObject.#ctor(DevGrep.Controls.DLV.ObjectListView)">
            <summary>
            Create a data object from the selected objects in the given ObjectListView
            </summary>
            <param name="olv">The source of the data object</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVDataObject.#ctor(DevGrep.Controls.DLV.ObjectListView,System.Collections.IList)">
            <summary>
            Create a data object which operates on the given model objects 
            in the given ObjectListView
            </summary>
            <param name="olv">The source of the data object</param>
            <param name="modelObjects">The model objects to be put into the data object</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVDataObject.CreateTextFormats">
            <summary>
            Put a text and HTML representation of our model objects
            into the data object.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVDataObject.CreateHtml">
            <summary>
            Make a HTML representation of our model objects
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVDataObject.ConvertToHtmlFragment(System.String)">
            <summary>
            Convert the fragment of HTML into the Clipboards HTML format.
            </summary>
            <remarks>The HTML format is found here http://msdn2.microsoft.com/en-us/library/aa767917.aspx
            </remarks>
            <param name="fragment">The HTML to put onto the clipboard. It must be valid HTML!</param>
            <returns>A string that can be put onto the clipboard and will be recognized as HTML</returns>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVDataObject.IncludeHiddenColumns">
            <summary>
            Gets or sets whether hidden columns will also be included in the text
            and HTML representation. If this is false, only visible columns will
            be included.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVDataObject.IncludeColumnHeaders">
            <summary>
            Gets or sets whether column headers will also be included in the text
            and HTML representation.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVDataObject.ListView">
            <summary>
            Gets the ObjectListView that is being used as the source of the data
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVDataObject.ModelObjects">
            <summary>
            Gets the model objects that are to be placed in the data object
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.FastDataListView">
            <summary>
            A FastDataListView virtualizes the display of data from a DataSource. It operates on
            DataSets and DataTables in the same way as a DataListView, but does so much more efficiently.
            </summary>
            <remarks>
            <para>
            A FastDataListView still has to load all its data from the DataSource. If you have SQL statement
            that returns 1 million rows, all 1 million rows will still need to read from the database.
            However, once the rows are loaded, the FastDataListView will only build rows as they are displayed.
            </para>
            </remarks>
        </member>
        <member name="T:DevGrep.Controls.DLV.FastObjectListView">
            <summary>
            A FastObjectListView trades function for speed.
            </summary>
            <remarks>
            <para>On my mid-range laptop, this view builds a list of 10,000 objects in 0.1 seconds,
            as opposed to a normal ObjectListView which takes 10-15 seconds. Lists of up to 50,000 items should be
            able to be handled with sub-second response times even on low end machines.</para>
            <para>
            A FastObjectListView is implemented as a virtual list with many of the virtual modes limits (e.g. no sorting)
            fixed through coding. There are some functions that simply cannot be provided. Specifically, a FastObjectListView cannot:
            <list type="bullet">
            <item><description>use Tile view</description></item>
            <item><description>show groups on XP</description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="T:DevGrep.Controls.DLV.VirtualObjectListView">
            <summary>
            A virtual object list view operates in virtual mode, that is, it only gets model objects for
            a row when it is needed. This gives it the ability to handle very large numbers of rows with
            minimal resources.
            </summary>
            <remarks><para>A listview is not a great user interface for a large number of items. But if you've
            ever wanted to have a list with 10 million items, go ahead, knock yourself out.</para>
            <para>Virtual lists can never iterate their contents. That would defeat the whole purpose.</para>
            <para>Animated GIFs should not be used in virtual lists. Animated GIFs require some state
            information to be stored for each animation, but virtual lists specifically do not keep any state information.
            In any case, you really do not want to keep state information for 10 million animations!</para>
            <para>
            Although it isn't documented, .NET virtual lists cannot have checkboxes. This class codes around this limitation,
            but you must use the functions provided by ObjectListView: CheckedObjects, CheckObject(), UncheckObject() and their friends. 
            If you use the normal check box properties (CheckedItems or CheckedIndicies), they will throw an exception, since the
            list is in virtual mode, and .NET "knows" it can't handle checkboxes in virtual mode.
            </para>
            <para>
            The "CheckBoxes" property itself can be set once, but trying to unset it later will throw an exception.
            </para>
            <para>Due to the limits of the underlying Windows control, virtual lists do not trigger ItemCheck/ItemChecked events. 
            Use a CheckStatePutter instead.</para>
            <para>To enable grouping, you must provide an implmentation of IVirtualGroups interface, via the GroupingStrategy property.</para>
            <para>Similarly, to enable filtering on the list, your VirtualListDataSource must also implement the IFilterableDataSource interface.</para>
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.#ctor">
            <summary>
            Create a VirtualObjectListView
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.GetItemCount">
            <summary>
            Return the number of items in the list
            </summary>
            <returns>the number of items in the list</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.GetModelObject(System.Int32)">
            <summary>
            Return the model object at the given index
            </summary>
            <param name="index">Index of the model object to be returned</param>
            <returns>A model object</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.IndexOf(System.Object)">
            <summary>
            Find the given model object within the listview and return its index
            </summary>
            <param name="modelObject">The model object to be found</param>
            <returns>The index of the object. -1 means the object was not present</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.ModelToItem(System.Object)">
            <summary>
            Return the OLVListItem that displays the given model object
            </summary>
            <param name="modelObject">The modelObject whose item is to be found</param>
            <returns>The OLVListItem that displays the model, or null</returns>
            <remarks>This method has O(n) performance.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.AddObjects(System.Collections.ICollection)">
            <summary>
            Add the given collection of model objects to this control.
            </summary>
            <param name="modelObjects">A collection of model objects</param>
            <remarks>
            <para>The added objects will appear in their correct sort position, if sorting
            is active. Otherwise, they will appear at the end of the list.</para>
            <para>No check is performed to see if any of the objects are already in the ListView.</para>
            <para>Null objects are silently ignored.</para>
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.ClearObjects">
            <summary>
            Remove all items from this list
            </summary>
            <remark>This method can safely be called from background threads.</remark>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.RefreshObjects(System.Collections.IList)">
            <summary>
            Update the rows that are showing the given objects
            </summary>
            <remarks>This method does not resort the items.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.RefreshSelectedObjects">
            <summary>
            Update the rows that are selected
            </summary>
            <remarks>This method does not resort or regroup the view.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.RemoveObjects(System.Collections.ICollection)">
            <summary>
            Remove all of the given objects from the control
            </summary>
            <param name="modelObjects">Collection of objects to be removed</param>
            <remarks>
            <para>Nulls and model objects that are not in the ListView are silently ignored.</para>
            <para>Due to problems in the underlying ListView, if you remove all the objects from
            the control using this method and the list scroll vertically when you do so,
            then when you subsequenially add more objects to the control,
            the vertical scroll bar will become confused and the control will draw one or more
            blank lines at the top of the list. </para>
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.SelectObject(System.Object,System.Boolean)">
            <summary>
            Select the row that is displaying the given model object. All other rows are deselected.
            </summary>
            <param name="modelObject">Model object to select</param>
            <param name="setFocus">Should the object be focused as well?</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.SelectObjects(System.Collections.IList)">
            <summary>
            Select the rows that is displaying any of the given model object. All other rows are deselected.
            </summary>
            <param name="modelObjects">A collection of model objects</param>
            <remarks>This method has O(n) performance where n is the number of model objects passed.
            Do not use this to select all the rows in the list -- use SelectAll() for that.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.SetObjects(System.Collections.IEnumerable)">
            <summary>
            Set the collection of objects that this control will show.
            </summary>
            <param name="collection"></param>
            <remark>This method can safely be called from background threads.</remark>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.BuildList(System.Boolean)">
            <summary>
            Rebuild the list with its current contents.
            </summary>
            <remarks>
            Invalidate any cached information when we rebuild the list.
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.ClearCachedInfo">
            <summary>
            Clear any cached info this list may have been using
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.CreateGroups(System.Collections.Generic.IList{DevGrep.Controls.DLV.OLVGroup})">
            <summary>
            Do the work of creating groups for this control
            </summary>
            <param name="groups"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.DisableVirtualGroups">
            <summary>
            Do the plumbing to disable groups on a virtual list
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.EnableVirtualGroups">
            <summary>
            Do the plumbing to enable groups on a virtual list
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.GetCheckState(System.Object)">
            <summary>
            Get the checkedness of an object from the model. Returning null means the
            model does know and the value from the control will be used.
            </summary>
            <param name="modelObject"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.GetItemIndexInDisplayOrder(System.Int32)">
            <summary>
            Return the position of the given itemIndex in the list as it currently shown to the user.
            If the control is not grouped, the display order is the same as the
            sorted list order. But if the list is grouped, the display order is different.
            </summary>
            <param name="itemIndex"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.GetNextItem(DevGrep.Controls.DLV.OLVListItem)">
            <summary>
            Return the ListViewItem that appears immediately after the given item.
            If the given item is null, the first item in the list will be returned.
            Return null if the given item is the last item.
            </summary>
            <param name="itemToFind">The item that is before the item that is returned, or null</param>
            <returns>A OLVListItem</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.GetPreviousItem(DevGrep.Controls.DLV.OLVListItem)">
            <summary>
            Return the ListViewItem that appears immediately before the given item.
            If the given item is null, the last item in the list will be returned.
            Return null if the given item is the first item.
            </summary>
            <param name="itemToFind">The item that is before the item that is returned</param>
            <returns>A ListViewItem</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.MakeGroups(DevGrep.Controls.DLV.GroupingParameters)">
            <summary>
            Make a list of groups that should be shown according to the given parameters
            </summary>
            <param name="parms"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.MakeListViewItem(System.Int32)">
            <summary>
            Create a OLVListItem for given row index
            </summary>
            <param name="itemIndex">The index of the row that is needed</param>
            <returns>An OLVListItem</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.PostProcessRows">
            <summary>
            On virtual lists, this cannot work.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.PutCheckState(System.Object,System.Windows.Forms.CheckState)">
            <summary>
            Record the change of checkstate for the given object in the model.
            This does not update the UI -- only the model
            </summary>
            <param name="modelObject"></param>
            <param name="state"></param>
            <returns>The check state that was recorded and that should be used to update
            the control.</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.RefreshItem(DevGrep.Controls.DLV.OLVListItem)">
            <summary>
            Refresh the given item in the list
            </summary>
            <param name="olvi">The item to refresh</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.SetVirtualListSize(System.Int32)">
            <summary>
            Change the size of the list
            </summary>
            <param name="newSize"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.TakeOwnershipOfObjects">
            <summary>
            Take ownership of the 'objects' collection. This separates our collection from the source.
            </summary>
            <remarks>
            <para>
            This method
            separates the 'objects' instance variable from its source, so that any AddObject/RemoveObject
            calls will modify our collection and not the original colleciton.
            </para>
            <para>
            VirtualObjectListViews always own their collections, so this is a no-op.
            </para>
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.UpdateFiltering">
            <summary>
            Change the state of the control to reflect changes in filtering
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.UpdateVirtualListSize">
            <summary>
            Change the size of the virtual list so that it matches its data source
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.HandleCacheVirtualItems(System.Object,System.Windows.Forms.CacheVirtualItemsEventArgs)">
            <summary>
            Handle the CacheVirtualItems event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.HandleRetrieveVirtualItem(System.Object,System.Windows.Forms.RetrieveVirtualItemEventArgs)">
            <summary>
            Handle a RetrieveVirtualItem
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.HandleSearchForVirtualItem(System.Object,System.Windows.Forms.SearchForVirtualItemEventArgs)">
            <summary>
            Handle the SearchForVirtualList event, which is called when the user types into a virtual list
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualObjectListView.FindMatchInRange(System.String,System.Int32,System.Int32,DevGrep.Controls.DLV.OLVColumn)">
            <summary>
            Find the first row in the given range of rows that prefix matches the string value of the given column.
            </summary>
            <param name="text"></param>
            <param name="first"></param>
            <param name="last"></param>
            <param name="column"></param>
            <returns>The index of the matched row, or -1</returns>
        </member>
        <member name="P:DevGrep.Controls.DLV.VirtualObjectListView.CanShowGroups">
            <summary>
            Gets whether or not this listview is capabale of showing groups
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.VirtualObjectListView.CheckBoxes">
            <summary>
            Gets or sets whether this ObjectListView will show checkboxes in the primary column
            </summary>
            <remarks>Due to code in the base ListView class, turning off CheckBoxes on a virtual
            list always throws an InvalidOperationException. This implementation codes around
            that limitation.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.VirtualObjectListView.CheckedObjects">
            <summary>
            Get or set the collection of model objects that are checked.
            When setting this property, any row whose model object isn't
            in the given collection will be unchecked. Setting to null is
            equivilent to unchecking all.
            </summary>
            <remarks>
            <para>
            This property returns a simple collection. Changes made to the returned
            collection do NOT affect the list. This is different to the behaviour of
            CheckedIndicies collection.
            </para>
            <para>
            When getting CheckedObjects, the performance of this method is O(n) where n is the number of checked objects.
            When setting CheckedObjects, the performance of this method is O(n) where n is the number of checked objects plus
            the number of objects to be checked.
            </para>
            <para>
            If the ListView is not currently showing CheckBoxes, this property does nothing. It does
            not remember any check box settings made.
            </para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.VirtualObjectListView.FilteredObjects">
            <summary>
            Gets the collection of objects that survive any filtering that may be in place.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.VirtualObjectListView.GroupingStrategy">
            <summary>
            Gets or sets the strategy that will be used to create groups
            </summary>
            <remarks>
            This must be provided for a virtual list to show groups.
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.VirtualObjectListView.IsFiltering">
            <summary>
            Gets whether or not the current list is filtering its contents
            </summary>
            <remarks>
            This is only possible if our underlying data source supports filtering.
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.VirtualObjectListView.Objects">
            <summary>
            Get/set the collection of objects that this list will show
            </summary>
            <remarks>
            <para>
            The contents of the control will be updated immediately after setting this property.
            </para>
            <para>Setting this property preserves selection, if possible. Use SetObjects() if
            you do not want to preserve the selection. Preserving selection is the slowest part of this
            code -- performance is O(n) where n is the number of selected rows.</para>
            <para>This method is not thread safe.</para>
            <para>The property DOES work on virtual lists, but if you try to iterate through a list 
            of 10 million objects, it may take some time :)</para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.VirtualObjectListView.RowGetter">
            <summary>
            This delegate is used to fetch a rowObject, given it's index within the list
            </summary>
            <remarks>Only use this property if you are not using a VirtualListDataSource.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.VirtualObjectListView.ShowGroups">
            <summary>
            Should this list show its items in groups?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.VirtualObjectListView.VirtualListDataSource">
            <summary>
            Get/set the data source that is behind this virtual list
            </summary>
            <remarks>Setting this will cause the list to redraw.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.FastObjectListView.#ctor">
            <summary>
            Make a FastObjectListView
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.FastObjectListView.Unsort">
            <summary>
            Remove any sorting and revert to the given order of the model objects
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.FastObjectListView.Objects">
            <summary>
            Get/set the collection of objects that this list will show
            </summary>
            <remarks>
            <para>
            The contents of the control will be updated immediately after setting this property.
            </para>
            <para>This method preserves selection, if possible. Use SetObjects() if
            you do not want to preserve the selection. Preserving selection is the slowest part of this
            code and performance is O(n) where n is the number of selected rows.</para>
            <para>This method is not thread safe.</para>
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.FastDataListView.CreateDataSourceAdapter">
            <summary>
            Create the DataSourceAdapter that this control will use.
            </summary>
            <returns>A DataSourceAdapter configured for this list</returns>
            <remarks>Subclasses should overrride this to create their
            own specialized adapters</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.FastDataListView.DataSource">
            <summary>
            Get or set the VirtualListDataSource that will be displayed in this list view.
            </summary>
            <remarks>The VirtualListDataSource should implement either <see cref="T:System.Collections.IList"/>, <see cref="T:System.ComponentModel.IBindingList"/>,
            or <see cref="T:System.ComponentModel.IListSource"/>. Some common examples are the following types of objects:
            <list type="unordered">
            <item><description><see cref="T:System.Data.DataView"/></description></item>
            <item><description><see cref="T:System.Data.DataTable"/></description></item>
            <item><description><see cref="T:System.Data.DataSet"/></description></item>
            <item><description><see cref="T:System.Data.DataViewManager"/></description></item>
            <item><description><see cref="T:System.Windows.Forms.BindingSource"/></description></item>
            </list>
            <para>When binding to a list container (i.e. one that implements the
            <see cref="T:System.ComponentModel.IListSource"/> interface, such as <see cref="T:System.Data.DataSet"/>)
            you must also set the <see cref="P:DevGrep.Controls.DLV.FastDataListView.DataMember"/> property in order
            to identify which particular list you would like to display. You
            may also set the <see cref="P:DevGrep.Controls.DLV.FastDataListView.DataMember"/> property even when
            VirtualListDataSource refers to a list, since <see cref="P:DevGrep.Controls.DLV.FastDataListView.DataMember"/> can
            also be used to navigate relations between lists.</para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.FastDataListView.DataMember">
            <summary>
            Gets or sets the name of the list or table in the data source for which the DataListView is displaying data.
            </summary>
            <remarks>If the data source is not a DataSet or DataViewManager, this property has no effect</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.FastDataListView.Adapter">
            <summary>
            Gets or sets the DataSourceAdaptor that does the bulk of the work needed
            for data binding.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.FastObjectListDataSource">
            <summary>
            Provide a data source for a FastObjectListView
            </summary>
            <remarks>
            This class isn't intended to be used directly, but it is left as a public
            class just in case someone wants to subclass it.
            </remarks>
        </member>
        <member name="T:DevGrep.Controls.DLV.AbstractVirtualListDataSource">
            <summary>
            A do-nothing implementation of the VirtualListDataSource interface.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.IVirtualListDataSource">
            <summary>
            A VirtualListDataSource is a complete manner to provide functionality to a virtual list.
            An object that implements this interface provides a VirtualObjectListView with all the
            information it needs to be fully functional.
            </summary>
            <remarks>Implementors must provide functioning implementations of at least GetObjectCount()
            and GetNthObject(), otherwise nothing will appear in the list.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.IVirtualListDataSource.GetNthObject(System.Int32)">
            <summary>
            Return the object that should be displayed at the n'th row.
            </summary>
            <param name="n">The index of the row whose object is to be returned.</param>
            <returns>The model object at the n'th row, or null if the fetching was unsuccessful.</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.IVirtualListDataSource.GetObjectCount">
            <summary>
            Return the number of rows that should be visible in the virtual list
            </summary>
            <returns>The number of rows the list view should have.</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.IVirtualListDataSource.GetObjectIndex(System.Object)">
            <summary>
            Get the index of the row that is showing the given model object
            </summary>
            <param name="model">The model object sought</param>
            <returns>The index of the row showing the model, or -1 if the object could not be found.</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.IVirtualListDataSource.PrepareCache(System.Int32,System.Int32)">
            <summary>
            The ListView is about to request the given range of items. Do
            whatever caching seems appropriate.
            </summary>
            <param name="first"></param>
            <param name="last"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.IVirtualListDataSource.SearchText(System.String,System.Int32,System.Int32,DevGrep.Controls.DLV.OLVColumn)">
            <summary>
            Find the first row that "matches" the given text in the given range.
            </summary>
            <param name="value">The text typed by the user</param>
            <param name="first">Start searching from this index. This may be greater than the 'to' parameter, 
            in which case the search should descend</param>
            <param name="last">Do not search beyond this index. This may be less than the 'from' parameter.</param>
            <param name="column">The column that should be considered when looking for a match.</param>
            <returns>Return the index of row that was matched, or -1 if no match was found</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.IVirtualListDataSource.Sort(DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.SortOrder)">
            <summary>
            Sort the model objects in the data source.
            </summary>
            <param name="column"></param>
            <param name="order"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.IVirtualListDataSource.AddObjects(System.Collections.ICollection)">
            <summary>
            Add the given collection of model objects to this control.
            </summary>
            <param name="modelObjects">A collection of model objects</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.IVirtualListDataSource.RemoveObjects(System.Collections.ICollection)">
            <summary>
            Remove all of the given objects from the control
            </summary>
            <param name="modelObjects">Collection of objects to be removed</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.IVirtualListDataSource.SetObjects(System.Collections.IEnumerable)">
            <summary>
            Set the collection of objects that this control will show.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="T:DevGrep.Controls.DLV.IFilterableDataSource">
            <summary>
            This extension allow virtual lists to filter their contents
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.IFilterableDataSource.ApplyFilters(DevGrep.Controls.DLV.IModelFilter,DevGrep.Controls.DLV.IListFilter)">
            <summary>
            All subsequent retrievals on this data source should be filtered
            through the given filters. null means no filtering of that kind.
            </summary>
            <param name="modelFilter"></param>
            <param name="listFilter"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractVirtualListDataSource.#ctor(DevGrep.Controls.DLV.VirtualObjectListView)">
            <summary>
            Creates an AbstractVirtualListDataSource
            </summary>
            <param name="listView"></param>
        </member>
        <member name="F:DevGrep.Controls.DLV.AbstractVirtualListDataSource.listView">
            <summary>
            The list view that this data source is giving information to.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractVirtualListDataSource.GetNthObject(System.Int32)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractVirtualListDataSource.GetObjectCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractVirtualListDataSource.GetObjectIndex(System.Object)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractVirtualListDataSource.PrepareCache(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractVirtualListDataSource.SearchText(System.String,System.Int32,System.Int32,DevGrep.Controls.DLV.OLVColumn)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="first"></param>
            <param name="last"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractVirtualListDataSource.Sort(DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.SortOrder)">
            <summary>
            
            </summary>
            <param name="column"></param>
            <param name="order"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractVirtualListDataSource.AddObjects(System.Collections.ICollection)">
            <summary>
            
            </summary>
            <param name="modelObjects"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractVirtualListDataSource.RemoveObjects(System.Collections.ICollection)">
            <summary>
            
            </summary>
            <param name="modelObjects"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractVirtualListDataSource.SetObjects(System.Collections.IEnumerable)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractVirtualListDataSource.DefaultSearchText(System.String,System.Int32,System.Int32,DevGrep.Controls.DLV.OLVColumn,DevGrep.Controls.DLV.IVirtualListDataSource)">
            <summary>
            This is a useful default implementation of SearchText method, intended to be called
            by implementors of IVirtualListDataSource.
            </summary>
            <param name="value"></param>
            <param name="first"></param>
            <param name="last"></param>
            <param name="column"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractVirtualListDataSource.ApplyFilters(DevGrep.Controls.DLV.IModelFilter,DevGrep.Controls.DLV.IListFilter)">
            <summary>
            
            </summary>
            <param name="modelFilter"></param>
            <param name="listFilter"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.FastObjectListDataSource.#ctor(DevGrep.Controls.DLV.FastObjectListView)">
            <summary>
            Create a FastObjectListDataSource
            </summary>
            <param name="listView"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.FastObjectListDataSource.GetNthObject(System.Int32)">
            <summary>
            Get n'th object
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.FastObjectListDataSource.GetObjectCount">
            <summary>
            How many items are in the data source
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.FastObjectListDataSource.GetObjectIndex(System.Object)">
            <summary>
            Get the index of the given model
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.FastObjectListDataSource.SearchText(System.String,System.Int32,System.Int32,DevGrep.Controls.DLV.OLVColumn)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="first"></param>
            <param name="last"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.FastObjectListDataSource.Sort(DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.SortOrder)">
            <summary>
            
            </summary>
            <param name="column"></param>
            <param name="sortOrder"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.FastObjectListDataSource.AddObjects(System.Collections.ICollection)">
            <summary>
            
            </summary>
            <param name="modelObjects"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.FastObjectListDataSource.RemoveObjects(System.Collections.ICollection)">
            <summary>
            Remove the given collection of models from this source.
            </summary>
            <param name="modelObjects"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.FastObjectListDataSource.SetObjects(System.Collections.IEnumerable)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.FastObjectListDataSource.ApplyFilters(DevGrep.Controls.DLV.IModelFilter,DevGrep.Controls.DLV.IListFilter)">
            <summary>
            Apply the given filters to this data source. One or both may be null.
            </summary>
            <param name="iModelFilter"></param>
            <param name="iListFilter"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.FastObjectListDataSource.RebuildIndexMap">
            <summary>
            Rebuild the map that remembers which model object is displayed at which line
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.FastObjectListDataSource.FilterObjects">
            <summary>
            Build our filtered list from our full list.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.Cluster">
            <summary>
            Concrete implementation of the ICluster interface.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.ICluster">
            <summary>
            A cluster is a like collection of objects that can be usefully filtered
            as whole using the filtering UI provided by the ObjectListView.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ICluster.Count">
            <summary>
            Gets or sets how many items belong to this cluster
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ICluster.DisplayLabel">
            <summary>
            Gets or sets the label that will be shown to the user to represent
            this cluster
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ICluster.ClusterKey">
            <summary>
            Gets or sets the actual data object that all members of this cluster
            have commonly returned.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.Cluster.#ctor(System.Object)">
            <summary>
            Create a cluster
            </summary>
            <param name="key">The key for the cluster</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.Cluster.ToString">
            <summary>
            Return a string representation of this cluster
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.Cluster.CompareTo(System.Object)">
            <summary>
            Return an indication of the ordering between this object and the given one
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:DevGrep.Controls.DLV.Cluster.Count">
            <summary>
            Gets or sets how many items belong to this cluster
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.Cluster.DisplayLabel">
            <summary>
            Gets or sets the label that will be shown to the user to represent
            this cluster
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.Cluster.ClusterKey">
            <summary>
            Gets or sets the actual data object that all members of this cluster
            have commonly returned.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.ClusteringStrategy">
            <summary>
            This class provides a useful base implemention of a clustering
            strategy where the clusters are grouped around the value of a given column.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.IClusteringStrategy">
            <summary>
            Implementation of this interface control the selecting of cluster keys
            and how those clusters will be presented to the user
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.IClusteringStrategy.GetClusterKey(System.Object)">
            <summary>
            Get the cluster key by which the given model will be partitioned by this strategy
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.IClusteringStrategy.CreateCluster(System.Object)">
            <summary>
            Create a cluster to hold the given cluster key
            </summary>
            <param name="clusterKey"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.IClusteringStrategy.GetClusterDisplayLabel(DevGrep.Controls.DLV.ICluster)">
            <summary>
            Gets the display label that the given cluster should use
            </summary>
            <param name="cluster"></param>
            <returns></returns>
        </member>
        <member name="P:DevGrep.Controls.DLV.IClusteringStrategy.Column">
            <summary>
            Gets or sets the column upon which this strategy will operate
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.ClusteringStrategy.NULL_LABEL">
            <summary>
            This field is the text that will be shown to the user when a cluster
            key is null. It is exposed so it can be localized.
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.ClusteringStrategy.EMPTY_LABEL">
            <summary>
            This field is the text that will be shown to the user when a cluster
            key is empty (i.e. a string of zero length). It is exposed so it can be localized.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ClusteringStrategy.#ctor">
            <summary>
            Create a clustering strategy
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ClusteringStrategy.GetClusterKey(System.Object)">
            <summary>
            Get the cluster key by which the given model will be partitioned by this strategy
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ClusteringStrategy.CreateCluster(System.Object)">
            <summary>
            Create a cluster to hold the given cluster key
            </summary>
            <param name="clusterKey"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ClusteringStrategy.GetClusterDisplayLabel(DevGrep.Controls.DLV.ICluster)">
            <summary>
            Gets the display label that the given cluster should use
            </summary>
            <param name="cluster"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ClusteringStrategy.ApplyDisplayFormat(DevGrep.Controls.DLV.ICluster,System.String)">
            <summary>
            Create a label that combines the string representation of the cluster
            key with a format string that holds an "X [N items in cluster]" type layout.
            </summary>
            <param name="cluster"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="P:DevGrep.Controls.DLV.ClusteringStrategy.DefaultDisplayLabelFormatSingular">
            <summary>
            Gets or sets the format that will be used by default for clusters that only
            contain 1 item. The format string must accept two placeholders:
            - {0} is the cluster key converted to a string
            - {1} is the number of items in the cluster (always 1 in this case)
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ClusteringStrategy.DefaultDisplayLabelFormatPlural">
            <summary>
            Gets or sets the format that will be used by default for clusters that 
            contain 0 or two or more items. The format string must accept two placeholders:
            - {0} is the cluster key converted to a string
            - {1} is the number of items in the cluster
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ClusteringStrategy.Column">
            <summary>
            Gets or sets the column upon which this strategy is operating
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ClusteringStrategy.DisplayLabelFormatSingular">
            <summary>
            Gets or sets the format that will be used when the cluster
            contains only 1 item. The format string must accept two placeholders:
            - {0} is the cluster key converted to a string
            - {1} is the number of items in the cluster (always 1 in this case)
            </summary>
            <remarks>If this is not set, the value from 
            ClusteringStrategy.DefaultDisplayLabelFormatSingular will be used</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ClusteringStrategy.DisplayLabelFormatPlural">
            <summary>
            Gets or sets the format that will be used when the cluster 
            contains 0 or two or more items. The format string must accept two placeholders:
            - {0} is the cluster key converted to a string
            - {1} is the number of items in the cluster
            </summary>
            <remarks>If this is not set, the value from 
            ClusteringStrategy.DefaultDisplayLabelFormatPlural will be used</remarks>
        </member>
        <member name="T:DevGrep.Controls.DLV.ClustersFromGroupsStrategy">
            <summary>
            This class calculates clusters from the groups that the column uses.
            </summary>
            <remarks>
            <para>
            This is the default strategy for all non-date, filterable columns.
            </para>
            <para>
            This class does not strictly mimic the groups created by the given column.
            In particular, if the programmer changes the default grouping technique
            by listening for grouping events, this class will not mimic that behaviour.
            </para>
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ClustersFromGroupsStrategy.GetClusterKey(System.Object)">
            <summary>
            Get the cluster key by which the given model will be partitioned by this strategy
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ClustersFromGroupsStrategy.GetClusterDisplayLabel(DevGrep.Controls.DLV.ICluster)">
            <summary>
            Gets the display label that the given cluster should use
            </summary>
            <param name="cluster"></param>
            <returns></returns>
        </member>
        <member name="T:DevGrep.Controls.DLV.DateTimePortion">
            <summary>
            This enum is used to indicate various portions of a datetime
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.DateTimePortion.Year">
            <summary>
            Year
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.DateTimePortion.Month">
            <summary>
            Month
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.DateTimePortion.Day">
            <summary>
            Day of the month
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.DateTimePortion.Hour">
            <summary>
            Hour
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.DateTimePortion.Minute">
            <summary>
            Minute
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.DateTimePortion.Second">
            <summary>
            Second
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.DateTimeClusteringStrategy">
            <summary>
            This class implements a strategy where the model objects are clustered
            according to some portion of the datetime value in the configured column.
            </summary>
            <remarks>To create a strategy that grouped people who were born in
            the same month, you would create a strategy that extracted just
            the month, and formatted it to show just the month's name. Like this:
            </remarks>
            <example>
            someColumn.ClusteringStrategy = new DateTimeClusteringStrategy(DateTimePortion.Month, "MMMM");
            </example>
        </member>
        <member name="M:DevGrep.Controls.DLV.DateTimeClusteringStrategy.#ctor">
            <summary>
            Create a strategy that clusters by month/year
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.DateTimeClusteringStrategy.#ctor(DevGrep.Controls.DLV.DateTimePortion,System.String)">
            <summary>
            Create a strategy that clusters around the given parts
            </summary>
            <param name="portions"></param>
            <param name="format"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.DateTimeClusteringStrategy.GetClusterKey(System.Object)">
            <summary>
            Get the cluster key by which the given model will be partitioned by this strategy
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.DateTimeClusteringStrategy.GetClusterDisplayLabel(DevGrep.Controls.DLV.ICluster)">
            <summary>
            Gets the display label that the given cluster should use
            </summary>
            <param name="cluster"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.DateTimeClusteringStrategy.DateToString(System.DateTime)">
            <summary>
            Convert the given date into a user presentable string
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="P:DevGrep.Controls.DLV.DateTimeClusteringStrategy.Format">
            <summary>
            Gets or sets the format string will will be used to create a user-presentable
            version of the cluster key.
            </summary>
            <remarks>The format should use the date/time format strings, as documented
            in the Windows SDK. Both standard formats and custom format will work.</remarks>
            <example>"D" - long date pattern</example>
            <example>"MMMM, yyyy" - "January, 1999"</example>
        </member>
        <member name="P:DevGrep.Controls.DLV.DateTimeClusteringStrategy.Portions">
            <summary>
            Gets or sets the parts of the DateTime that will be extracted when
            determining the clustering key for an object.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.FilterMenuBuilder">
            <summary>
            Instances of this class know how to build a Filter menu.
            It is responsible for clustering the values in the target column,
            build a menu that shows those clusters, and then constructing
            a filter that will enact the users choices.
            </summary>
            <remarks>
            Almost all of the methods in this class are declared as "virtual protected"
            so that subclasses can provide alternative behaviours.
            </remarks>
        </member>
        <member name="F:DevGrep.Controls.DLV.FilterMenuBuilder.APPLY_LABEL">
            <summary>
            Gets or sets the string that labels the Apply button.
            Exposed so it can be localized.
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.FilterMenuBuilder.CLEAR_ALL_FILTERS_LABEL">
            <summary>
            Gets or sets the string that labels the Clear All menu item.
            Exposed so it can be localized.
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.FilterMenuBuilder.FILTERING_LABEL">
            <summary>
            Gets or sets the string that labels the Filtering menu as a whole..
            Exposed so it can be localized.
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.FilterMenuBuilder.SELECT_ALL_LABEL">
            <summary>
            Gets or sets the string that represents Select All values.
            If this is set to null or empty, no Select All option will be included.
            Exposed so it can be localized.
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.FilterMenuBuilder.ClearFilteringImage">
            <summary>
            Gets or sets the image that will be placed next to the Clear Filtering menu item
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.FilterMenuBuilder.FilteringImage">
            <summary>
            Gets or sets the image that will be placed next to all "Apply" menu items on the filtering menu
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.FilterMenuBuilder.MakeFilterMenu(System.Windows.Forms.ToolStripDropDown,DevGrep.Controls.DLV.ObjectListView,DevGrep.Controls.DLV.OLVColumn)">
            <summary>
            Create a Filter menu on the given tool tip for the given column in the given ObjectListView.
            </summary>
            <remarks>This is the main entry point into this class.</remarks>
            <param name="strip"></param>
            <param name="listView"></param>
            <param name="column"></param>
            <returns>The strip that should be shown to the user</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.FilterMenuBuilder.Cluster(DevGrep.Controls.DLV.IClusteringStrategy,DevGrep.Controls.DLV.ObjectListView,DevGrep.Controls.DLV.OLVColumn)">
            <summary>
            Create a collection of clusters that should be presented to the user
            </summary>
            <param name="strategy"></param>
            <param name="listView"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.FilterMenuBuilder.SortClusters(DevGrep.Controls.DLV.IClusteringStrategy,System.Collections.Generic.List{DevGrep.Controls.DLV.ICluster})">
            <summary>
            Order the given list of clusters in the manner in which they should be presented to the user.
            </summary>
            <param name="strategy"></param>
            <param name="clusters"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.FilterMenuBuilder.CreateFilteringMenuItem(DevGrep.Controls.DLV.OLVColumn,System.Collections.Generic.List{DevGrep.Controls.DLV.ICluster})">
            <summary>
            Do the work of making a menu that shows the clusters to the users
            </summary>
            <param name="column"></param>
            <param name="clusters"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.FilterMenuBuilder.HandleItemCheckedWrapped(System.Object,System.Windows.Forms.ItemCheckEventArgs)">
            <summary>
            Wrap a protected section around the real HandleItemChecked method, so that if
            that method tries to change a "checkedness" of an item, we don't get a recursive 
            stack error. Effectively, this ensure that HandleItemChecked is only called
            in response to a user action.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.FilterMenuBuilder.HandleItemChecked(System.Object,System.Windows.Forms.ItemCheckEventArgs)">
            <summary>
            Handle a user-generated ItemCheck event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.FilterMenuBuilder.HandleSelectAllItem(System.Windows.Forms.ItemCheckEventArgs,DevGrep.Controls.DLV.ToolStripCheckedListBox,System.Int32)">
            <summary>
            Handle any checking/unchecking of the Select All option, and keep
            its checkedness in sync with everything else that is checked.
            </summary>
            <param name="e"></param>
            <param name="checkedList"></param>
            <param name="selectAllIndex"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.FilterMenuBuilder.ClearAllFilters(DevGrep.Controls.DLV.OLVColumn)">
            <summary>
            Clear all the filters that are applied to the given column
            </summary>
            <param name="column">The column from which filters are to be removed</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.FilterMenuBuilder.EnactFilter(DevGrep.Controls.DLV.ToolStripCheckedListBox,DevGrep.Controls.DLV.OLVColumn)">
            <summary>
            Apply the selected values from the given list as a filter on the given column
            </summary>
            <param name="checkedList">A list in which the checked items should be used as filters</param>
            <param name="column">The column for which a filter should be generated</param>
        </member>
        <member name="P:DevGrep.Controls.DLV.FilterMenuBuilder.TreatNullAsDataValue">
            <summary>
            Gets or sets whether null should be considered as a valid data value.
            If this is true (the default), then a cluster will null as a key will be allow.
            If this is false, object that return a cluster key of null will ignored.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.FilterMenuBuilder.MaxObjectsToConsider">
            <summary>
            Gets or sets the maximum number of objects that the clustering strategy
            will consider. This should be large enough to collect all unique clusters,
            but small enough to finish in a reasonable time.
            </summary>
            <remarks>The default value is 10,000. This should be perfectly
            acceptable for almost all lists.</remarks>
        </member>
        <member name="T:DevGrep.Controls.DLV.IModelFilter">
            <summary>
            Interface for model-by-model filtering
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.IModelFilter.Filter(System.Object)">
            <summary>
            Should the given model be included when this filter is installed
            </summary>
            <param name="modelObject">The model object to consider</param>
            <returns>Returns true if the model will be included by the filter</returns>
        </member>
        <member name="T:DevGrep.Controls.DLV.IListFilter">
            <summary>
            Interface for whole list filtering
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.IListFilter.Filter(System.Collections.IEnumerable)">
            <summary>
            Return a subset of the given list of model objects as the new
            contents of the ObjectListView
            </summary>
            <param name="modelObjects">The collection of model objects that the list will possibly display</param>
            <returns>The filtered collection that holds the model objects that will be displayed.</returns>
        </member>
        <member name="T:DevGrep.Controls.DLV.AbstractModelFilter">
            <summary>
            Base class for model-by-model filters
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractModelFilter.Filter(System.Object)">
            <summary>
            Should the given model be included when this filter is installed
            </summary>
            <param name="modelObject">The model object to consider</param>
            <returns>Returns true if the model will be included by the filter</returns>
        </member>
        <member name="T:DevGrep.Controls.DLV.ModelFilter">
            <summary>
            This filter calls a given Predicate to decide if a model object should be included
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ModelFilter.#ctor(System.Predicate{System.Object})">
            <summary>
            Create a filter based on the given predicate
            </summary>
            <param name="predicate">The function that will filter objects</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ModelFilter.Filter(System.Object)">
            <summary>
            Should the given model object be included?
            </summary>
            <param name="modelObject"></param>
            <returns></returns>
        </member>
        <member name="P:DevGrep.Controls.DLV.ModelFilter.Predicate">
            <summary>
            Gets or sets the predicate used to filter model objects
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.CompositeFilter">
            <summary>
            A CompositeFilter joins several other filters together.
            If there are no filters, all model objects are included
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.CompositeFilter.#ctor">
            <summary>
            Create an empty filter
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.CompositeFilter.#ctor(System.Collections.Generic.IList{DevGrep.Controls.DLV.IModelFilter})">
            <summary>
            Create a composite filter from the given list of filters
            </summary>
            <param name="filters">A list of filters</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.CompositeFilter.Filter(System.Object)">
            <summary>
            Decide whether or not the given model should be included by the filter
            </summary>
            <param name="modelObject"></param>
            <returns>True if the object is included by the filter</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.CompositeFilter.FilterObject(System.Object)">
            <summary>
            Decide whether or not the given model should be included by the filter
            </summary>
            <remarks>Filters is guaranteed to be non-empty when this method is called</remarks>
            <param name="modelObject">The model object under consideration</param>
            <returns>True if the object is included by the filter</returns>
        </member>
        <member name="P:DevGrep.Controls.DLV.CompositeFilter.Filters">
            <summary>
            Gets or sets the filters used by this composite
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.CompositeAllFilter">
            <summary>
            A CompositeAllFilter joins several other filters together.
            A model object must satisfy all filters to be included.
            If there are no filters, all model objects are included
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.CompositeAllFilter.#ctor(System.Collections.Generic.List{DevGrep.Controls.DLV.IModelFilter})">
            <summary>
            Create a filter
            </summary>
            <param name="filters"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.CompositeAllFilter.FilterObject(System.Object)">
            <summary>
            Decide whether or not the given model should be included by the filter
            </summary>
            <remarks>Filters is guaranteed to be non-empty when this method is called</remarks>
            <param name="modelObject">The model object under consideration</param>
            <returns>True if the object is included by the filter</returns>
        </member>
        <member name="T:DevGrep.Controls.DLV.CompositeAnyFilter">
            <summary>
            A CompositeAllFilter joins several other filters together.
            A model object must only satisfy one of the filters to be included.
            If there are no filters, all model objects are included
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.CompositeAnyFilter.#ctor(System.Collections.Generic.List{DevGrep.Controls.DLV.IModelFilter})">
            <summary>
            Create a filter from the given filters
            </summary>
            <param name="filters"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.CompositeAnyFilter.FilterObject(System.Object)">
            <summary>
            Decide whether or not the given model should be included by the filter
            </summary>
            <remarks>Filters is guaranteed to be non-empty when this method is called</remarks>
            <param name="modelObject">The model object under consideration</param>
            <returns>True if the object is included by the filter</returns>
        </member>
        <member name="T:DevGrep.Controls.DLV.OneOfFilter">
            <summary>
            Instances of this class extract a value from the model object
            and compare that value to a list of fixed values. The model
            object is included if the extracted value is in the list
            </summary>
            <remarks>If there is no delegate installed or there are
            no values to match, no model objects will be matched</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.OneOfFilter.#ctor(DevGrep.Controls.DLV.AspectGetterDelegate)">
            <summary>
            Create a filter that will use the given delegate to extract values
            </summary>
            <param name="valueGetter"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.OneOfFilter.#ctor(DevGrep.Controls.DLV.AspectGetterDelegate,System.Collections.ICollection)">
            <summary>
            Create a filter that will extract values using the given delegate
            and compare them to the values in the given list.
            </summary>
            <param name="valueGetter"></param>
            <param name="possibleValues"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.OneOfFilter.Filter(System.Object)">
            <summary>
            Should the given model object be included?
            </summary>
            <param name="modelObject"></param>
            <returns></returns>
        </member>
        <member name="P:DevGrep.Controls.DLV.OneOfFilter.ValueGetter">
            <summary>
            Gets or sets the delegate that will be used to extract values
            from model objects
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OneOfFilter.PossibleValues">
            <summary>
            Gets or sets the list of values that the value extracted from
            the model object must match in order to be included.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.AbstractListFilter">
            <summary>
            Base class for whole list filters
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractListFilter.Filter(System.Collections.IEnumerable)">
            <summary>
            Return a subset of the given list of model objects as the new
            contents of the ObjectListView
            </summary>
            <param name="modelObjects">The collection of model objects that the list will possibly display</param>
            <returns>The filtered collection that holds the model objects that will be displayed.</returns>
        </member>
        <member name="T:DevGrep.Controls.DLV.ListFilter">
            <summary>
            Instance of this class implement delegate based whole list filtering
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ListFilter.#ctor(DevGrep.Controls.DLV.ListFilter.ListFilterDelegate)">
            <summary>
            Create a ListFilter
            </summary>
            <param name="function"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ListFilter.Filter(System.Collections.IEnumerable)">
            <summary>
            Do the actual work of filtering
            </summary>
            <param name="modelObjects"></param>
            <returns></returns>
        </member>
        <member name="P:DevGrep.Controls.DLV.ListFilter.Function">
            <summary>
            Gets or sets the delegate that will filter the list
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.ListFilter.ListFilterDelegate">
            <summary>
            A delegate that filters on a whole list
            </summary>
            <param name="rowObjects"></param>
            <returns></returns>
        </member>
        <member name="T:DevGrep.Controls.DLV.TailFilter">
            <summary>
            Filter the list so only the last N entries are displayed
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TailFilter.#ctor">
            <summary>
            Create a no-op tail filter
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TailFilter.#ctor(System.Int32)">
            <summary>
            Create a filter that includes on the last N model objects
            </summary>
            <param name="numberOfObjects"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TailFilter.Filter(System.Collections.IEnumerable)">
            <summary>
            Return the last N subset of the model objects
            </summary>
            <param name="modelObjects"></param>
            <returns></returns>
        </member>
        <member name="P:DevGrep.Controls.DLV.TailFilter.Count">
            <summary>
            Gets or sets the number of model objects that will be 
            returned from the tail of the list
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.TextMatchFilter">
            <summary>
            Instances of this class include only those rows of the listview
            that match one or more given strings.
            </summary>
            <remarks>This class can match strings by prefix, regex, or simple containment.
            There are factory methods for each of these matching strategies.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextMatchFilter.Regex(DevGrep.Controls.DLV.ObjectListView,System.String[])">
            <summary>
            Create a text filter that will include rows where any cell matches 
            any of the given regex expressions.
            </summary>
            <param name="olv"></param>
            <param name="texts"></param>
            <returns></returns>
            <remarks>Any string that is not a valid regex expression will be ignored.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextMatchFilter.Prefix(DevGrep.Controls.DLV.ObjectListView,System.String[])">
            <summary>
            Create a text filter that includes rows where any cell begins with one of the given strings
            </summary>
            <param name="olv"></param>
            <param name="texts"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextMatchFilter.Contains(DevGrep.Controls.DLV.ObjectListView,System.String[])">
            <summary>
            Create a text filter that includes rows where any cell contains any of the given strings.
            </summary>
            <param name="olv"></param>
            <param name="texts"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextMatchFilter.#ctor(DevGrep.Controls.DLV.ObjectListView)">
            <summary>
            Create a TextFilter
            </summary>
            <param name="olv"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextMatchFilter.#ctor(DevGrep.Controls.DLV.ObjectListView,System.String)">
            <summary>
            Create a TextFilter that finds the given string
            </summary>
            <param name="olv"></param>
            <param name="text"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextMatchFilter.#ctor(DevGrep.Controls.DLV.ObjectListView,System.String,System.StringComparison)">
            <summary>
            Create a TextFilter that finds the given string using the given comparison
            </summary>
            <param name="olv"></param>
            <param name="text"></param>
            <param name="comparison"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextMatchFilter.IterateColumns">
            <summary>
            Loop over the columns that are being considering by the filter
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextMatchFilter.Filter(System.Object)">
            <summary>
            Do the actual work of filtering
            </summary>
            <param name="modelObject"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextMatchFilter.FindAllMatchedRanges(System.String)">
            <summary>
            Find all the ways in which this filter matches the given string.
            </summary>
            <remarks>This is used by the renderer to decide which bits of
            the string should be highlighted</remarks>
            <param name="cellText"></param>
            <returns>A list of character ranges indicating the matched substrings</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextMatchFilter.IsIncluded(DevGrep.Controls.DLV.OLVColumn)">
            <summary>
            Is the given column one of the columns being used by this filter?
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextMatchFilter.Columns">
            <summary>
            Which columns will be used for the comparisons? If this is null, all columns will be used
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextMatchFilter.ContainsStrings">
            <summary>
            Gets or sets the collection of strings that will be used for 
            contains matching. Setting this replaces all previous texts
            of any kind.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextMatchFilter.HasComponents">
            <summary>
            Gets whether or not this filter has any search criteria
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextMatchFilter.ListView">
            <summary>
            Gets or set the ObjectListView upon which this filter will work
            </summary>
            <remarks>
            You cannot really rebase a filter after it is created, so do not change this value.
            It is included so that it can be set in an object initializer.
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextMatchFilter.PrefixStrings">
            <summary>
            Gets or sets the collection of strings that will be used for 
            prefix matching. Setting this replaces all previous texts
            of any kind.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextMatchFilter.RegexOptions">
            <summary>
            Gets or sets the options that will be used when compiling the regular expression.
            </summary>
            <remarks>
            This is only used when doing Regex matching (obviously).
            If this is not set specifically, the appropriate options are chosen to match the
            StringComparison setting (culture invariant, case sensitive).
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextMatchFilter.RegexStrings">
            <summary>
            Gets or sets the collection of strings that will be used for 
            regex pattern matching. Setting this replaces all previous texts
            of any kind.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextMatchFilter.StringComparison">
            <summary>
            Gets or  sets how the filter will match text
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.TextMatchFilter.TextMatchingStrategy">
            <summary>
            Base class for the various types of string matching that TextMatchFilter provides
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextMatchFilter.TextMatchingStrategy.FindAllMatchedRanges(System.String)">
            <summary>
            Find all the ways in which this filter matches the given string.
            </summary>
            <remarks>This is used by the renderer to decide which bits of
            the string should be highlighted</remarks>
            <param name="cellText"></param>
            <returns>A list of character ranges indicating the matched substrings</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextMatchFilter.TextMatchingStrategy.MatchesText(System.String)">
            <summary>
            Does the given text match the filter
            </summary>
            <param name="cellText"></param>
            <returns></returns>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextMatchFilter.TextMatchingStrategy.StringComparison">
            <summary>
            Gets how the filter will match text
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextMatchFilter.TextMatchingStrategy.TextFilter">
            <summary>
            Gets the text filter to which this component belongs
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextMatchFilter.TextMatchingStrategy.Text">
            <summary>
            Gets or sets the text that will be matched
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.TextMatchFilter.TextContainsMatchingStrategy">
            <summary>
            This component provides text contains matching strategy.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextMatchFilter.TextContainsMatchingStrategy.#ctor(DevGrep.Controls.DLV.TextMatchFilter,System.String)">
            <summary>
            Create a text contains strategy
            </summary>
            <param name="filter"></param>
            <param name="text"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextMatchFilter.TextContainsMatchingStrategy.MatchesText(System.String)">
            <summary>
            Does the given text match the filter
            </summary>
            <param name="cellText"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextMatchFilter.TextContainsMatchingStrategy.FindAllMatchedRanges(System.String)">
            <summary>
            Find all the ways in which this filter matches the given string.
            </summary>
            <remarks>This is used by the renderer to decide which bits of
            the string should be highlighted</remarks>
            <param name="cellText"></param>
            <returns>A list of character ranges indicating the matched substrings</returns>
        </member>
        <member name="T:DevGrep.Controls.DLV.TextMatchFilter.TextBeginsMatchingStrategy">
            <summary>
            This component provides text begins with matching strategy.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextMatchFilter.TextBeginsMatchingStrategy.#ctor(DevGrep.Controls.DLV.TextMatchFilter,System.String)">
            <summary>
            Create a text begins strategy
            </summary>
            <param name="filter"></param>
            <param name="text"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextMatchFilter.TextBeginsMatchingStrategy.MatchesText(System.String)">
            <summary>
            Does the given text match the filter
            </summary>
            <param name="cellText"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextMatchFilter.TextBeginsMatchingStrategy.FindAllMatchedRanges(System.String)">
            <summary>
            Find all the ways in which this filter matches the given string.
            </summary>
            <remarks>This is used by the renderer to decide which bits of
            the string should be highlighted</remarks>
            <param name="cellText"></param>
            <returns>A list of character ranges indicating the matched substrings</returns>
        </member>
        <member name="T:DevGrep.Controls.DLV.TextMatchFilter.TextRegexMatchingStrategy">
            <summary>
            This component provides regex matching strategy.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextMatchFilter.TextRegexMatchingStrategy.#ctor(DevGrep.Controls.DLV.TextMatchFilter,System.String)">
            <summary>
            Creates a regex strategy
            </summary>
            <param name="filter"></param>
            <param name="text"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextMatchFilter.TextRegexMatchingStrategy.MatchesText(System.String)">
            <summary>
            Does the given text match the filter
            </summary>
            <param name="cellText"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextMatchFilter.TextRegexMatchingStrategy.FindAllMatchedRanges(System.String)">
            <summary>
            Find all the ways in which this filter matches the given string.
            </summary>
            <remarks>This is used by the renderer to decide which bits of
            the string should be highlighted</remarks>
            <param name="cellText"></param>
            <returns>A list of character ranges indicating the matched substrings</returns>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextMatchFilter.TextRegexMatchingStrategy.RegexOptions">
            <summary>
            Gets or sets the options that will be used when compiling the regular expression.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextMatchFilter.TextRegexMatchingStrategy.Regex">
            <summary>
            Gets or sets a compilex regular expression, based on our current Text and RegexOptions.
            </summary>
            <remarks>
            If Text fails to compile as a regular expression, this will return a Regex object
            that will match all strings.
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextMatchFilter.TextRegexMatchingStrategy.IsRegexInvalid">
            <summary>
            Gets whether or not our current regular expression is a valid regex
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.OLVColumnAttribute">
            <summary>
            This attribute is used to mark a field, property, or parameter-less method of a model
            class that should be noticed by Generator class.
            </summary>
            <remarks>
            All the attributes of this class match their equivilent properties on OLVColumn.
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVColumnAttribute.#ctor">
            <summary>
            Create a new OLVColumnAttribute
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVColumnAttribute.#ctor(System.String)">
            <summary>
            Create a new OLVColumnAttribute with the given title
            </summary>
            <param name="title">The title of the column</param>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumnAttribute.AspectToStringFormat">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumnAttribute.CheckBoxes">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumnAttribute.DisplayIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumnAttribute.FillsFreeSpace">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumnAttribute.FreeSpaceProportion">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumnAttribute.GroupCutoffs">
            <summary>
            An array of IComparables that mark the cutoff points for values when
            grouping on this column. 
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumnAttribute.GroupDescriptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumnAttribute.GroupWithItemCountFormat">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumnAttribute.GroupWithItemCountSingularFormat">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumnAttribute.Hyperlink">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumnAttribute.ImageAspectName">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumnAttribute.IsEditable">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumnAttribute.IsVisible">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumnAttribute.IsTileViewColumn">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumnAttribute.MaximumWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumnAttribute.MinimumWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumnAttribute.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumnAttribute.TextAlign">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumnAttribute.Tag">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumnAttribute.Title">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumnAttribute.ToolTipText">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumnAttribute.TriStateCheckBoxes">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumnAttribute.UseInitialLetterForGroup">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumnAttribute.Width">
            <summary>
            
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.ColumnComparer">
            <summary>
            ColumnComparer is the workhorse for all comparison between two values of a particular column.
            If the column has a specific comparer, use that to compare the values. Otherwise, do
            a case insensitive string compare of the string representations of the values.
            </summary>
            <remarks><para>This class inherits from both IComparer and its generic counterpart
            so that it can be used on untyped and typed collections.</para></remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ColumnComparer.#ctor(DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.SortOrder)">
            <summary>
            Create a ColumnComparer that will order the rows in a list view according
            to the values in a given column
            </summary>
            <param name="col">The column whose values will be compared</param>
            <param name="order">The ordering for column values</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ColumnComparer.#ctor(DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.SortOrder,DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.SortOrder)">
            <summary>
            Create a ColumnComparer that will order the rows in a list view according
            to the values in a given column, and by a secondary column if the primary
            column is equal.
            </summary>
            <param name="col">The column whose values will be compared</param>
            <param name="order">The ordering for column values</param>
            <param name="col2">The column whose values will be compared for secondary sorting</param>
            <param name="order2">The ordering for secondary column values</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ColumnComparer.Compare(System.Object,System.Object)">
            <summary>
            Compare two rows
            </summary>
            <param name="x">row1</param>
            <param name="y">row2</param>
            <returns>An ordering indication: -1, 0, 1</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ColumnComparer.Compare(DevGrep.Controls.DLV.OLVListItem,DevGrep.Controls.DLV.OLVListItem)">
            <summary>
            Compare two rows
            </summary>
            <param name="x">row1</param>
            <param name="y">row2</param>
            <returns>An ordering indication: -1, 0, 1</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ColumnComparer.CompareValues(System.Object,System.Object)">
            <summary>
            Compare the actual values to be used for sorting
            </summary>
            <param name="x">The aspect extracted from the first row</param>
            <param name="y">The aspect extracted from the second row</param>
            <returns>An ordering indication: -1, 0, 1</returns>
        </member>
        <member name="T:DevGrep.Controls.DLV.OLVGroupComparer">
            <summary>
            This comparer sort list view groups. OLVGroups have a "SortValue" property,
            which is used if present. Otherwise, the titles of the groups will be compared.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVGroupComparer.#ctor(System.Windows.Forms.SortOrder)">
            <summary>
            Create a group comparer
            </summary>
            <param name="order">The ordering for column values</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVGroupComparer.Compare(DevGrep.Controls.DLV.OLVGroup,DevGrep.Controls.DLV.OLVGroup)">
            <summary>
            Compare the two groups. OLVGroups have a "SortValue" property,
            which is used if present. Otherwise, the titles of the groups will be compared.
            </summary>
            <param name="x">group1</param>
            <param name="y">group2</param>
            <returns>An ordering indication: -1, 0, 1</returns>
        </member>
        <member name="T:DevGrep.Controls.DLV.ModelObjectComparer">
            <summary>
            This comparer can be used to sort a collection of model objects by a given column
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ModelObjectComparer.#ctor(DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.SortOrder)">
            <summary>
            Create a model object comparer
            </summary>
            <param name="col"></param>
            <param name="order"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ModelObjectComparer.#ctor(DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.SortOrder,DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.SortOrder)">
            <summary>
            Create a model object comparer with a secondary sorting column
            </summary>
            <param name="col"></param>
            <param name="order"></param>
            <param name="col2"></param>
            <param name="order2"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ModelObjectComparer.Compare(System.Object,System.Object)">
            <summary>
            Compare the two model objects
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ModelObjectComparer.CompareValues(System.Object,System.Object)">
            <summary>
            Compare the actual values
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:DevGrep.Controls.DLV.DataSourceAdapter">
            <summary>
            A helper class that translates DataSource events for an ObjectListView
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.DataSourceAdapter.#ctor(DevGrep.Controls.DLV.ObjectListView)">
            <summary>
            Make a DataSourceAdapter
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.DataSourceAdapter.Dispose">
            <summary>
            Release all the resources used by this instance
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.DataSourceAdapter.Dispose(System.Boolean)">
            <summary>
            Release all the resources used by this instance
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.DataSourceAdapter.RebindDataSource">
            <summary>
            Our data source has changed. Figure out how to handle the new source
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.DataSourceAdapter.RebindDataSource(System.Boolean)">
            <summary>
            Our data source has changed. Figure out how to handle the new source
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.DataSourceAdapter.InitializeDataSource">
            <summary>
            The data source for this control has changed. Reconfigure the control for the new source
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.DataSourceAdapter.SetListContents">
            <summary>
            Take the contents of the currently bound list and put them into the control
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.DataSourceAdapter.InitializeColumnWidths">
            <summary>
            Set up any automatically initialized column widths
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.DataSourceAdapter.CreateColumnsFromSource">
            <summary>
            Create columns for the listview based on what properties are available in the data source
            </summary>
            <remarks>
            <para>This method will not replace existing columns.</para>
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.DataSourceAdapter.CalculateColumnWidth(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Calculate how wide the column for the given property should be
            when it is first created. 
            </summary>
            <param name="property">The property for which a column is being created</param>
            <returns>The initial width of the column. 0 means auto size to contents. -1 means auto
            size to column header.</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.DataSourceAdapter.DisplayNameToColumnTitle(System.String)">
            <summary>
            Convert the given property display name into a column title
            </summary>
            <param name="displayName">The display name of the property</param>
            <returns>The title of the column</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.DataSourceAdapter.ConfigureColumn(DevGrep.Controls.DLV.OLVColumn,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Configure the given column to show the given property.
            The title and aspect name of the column are already filled in.
            </summary>
            <param name="column"></param>
            <param name="property"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.DataSourceAdapter.CreateMissingAspectGettersAndPutters">
            <summary>
            Generate aspect getters and putters for any columns that are missing them (and for which we have
            enough information to actually generate a getter)
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.DataSourceAdapter.currencyManager_ListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            CurrencyManager ListChanged event handler.
            Deals with fine-grained changes to list items.
            </summary>
            <remarks>
            It's actually difficult to deal with these changes in a fine-grained manner.
            If our listview is grouped, then any change may make a new group appear or
            an old group disappear. It is rarely enough to simply update the affected row.
            </remarks>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.DataSourceAdapter.HandleListChanged_MetadataChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Handle PropertyDescriptor* events
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.DataSourceAdapter.HandleListChanged_ItemMoved(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Handle ItemMoved event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.DataSourceAdapter.HandleListChanged_ItemDeleted(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Handle the ItemDeleted event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.DataSourceAdapter.HandleListChanged_ItemAdded(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Handle an ItemAdded event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.DataSourceAdapter.HandleListChanged_Reset(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Handle the Reset event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.DataSourceAdapter.HandleListChanged_ItemChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Handle ItemChanged event. This is triggered when a single item
            has changed, so just refresh that one item.
            </summary>
            <param name="e"></param>
            <remarks>Even in this simple case, we should probably rebuild the list.
            For example, the change could put the item into its own new group.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.DataSourceAdapter.currencyManager_MetaDataChanged(System.Object,System.EventArgs)">
            <summary>
            The CurrencyManager calls this if the data source looks
            different. We just reload everything.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks>
            CHECK: Do we need this if we are handle ListChanged metadata events?
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.DataSourceAdapter.currencyManager_PositionChanged(System.Object,System.EventArgs)">
            <summary>
            Called by the CurrencyManager when the currently selected item
            changes. We update the ListView selection so that we stay in sync
            with any other controls bound to the same source.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.DataSourceAdapter.listView_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the selection changing in our ListView.
            We need to tell our currency manager about the new position.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.DataSourceAdapter.listView_Freezing(System.Object,DevGrep.Controls.DLV.FreezeEventArgs)">
            <summary>
            Handle the frozenness of our ListView changing. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.DataSourceAdapter.listView_BindingContextChanged(System.Object,System.EventArgs)">
            <summary>
            Handle a change to the BindingContext of our ListView.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:DevGrep.Controls.DLV.DataSourceAdapter.DataSource">
            <summary>
            Get or set the DataSource that will be displayed in this list view.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.DataSourceAdapter.DataMember">
            <summary>
            Gets or sets the name of the list or table in the data source for which the DataListView is displaying data.
            </summary>
            <remarks>If the data source is not a DataSet or DataViewManager, this property has no effect</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.DataSourceAdapter.ListView">
            <summary>
            Gets the ObjectListView upon which this adaptor will operate
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.DataSourceAdapter.CurrencyManager">
            <summary>
            Gets or sets the currency manager which is handling our binding context
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.AspectGetterDelegate">
            <summary>
            These delegates are used to extract an aspect from a row object
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.AspectPutterDelegate">
            <summary>
            These delegates are used to put a changed value back into a model object
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.AspectToStringConverterDelegate">
            <summary>
            These delegates can be used to convert an aspect value to a display string,
            instead of using the default ToString()
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.CellToolTipGetterDelegate">
            <summary>
            These delegates are used to get the tooltip for a cell
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.CheckStateGetterDelegate">
            <summary>
            These delegates are used to the state of the checkbox for a row object.
            </summary>
            <remarks><para>
            For reasons known only to someone in Microsoft, we can only set
            a boolean on the ListViewItem to indicate it's "checked-ness", but when
            we receive update events, we have to use a tristate CheckState. So we can
            be told about an indeterminate state, but we can't set it ourselves.
            </para>
            <para>As of version 2.0, we can now return indeterminate state.</para>
            </remarks>
        </member>
        <member name="T:DevGrep.Controls.DLV.BooleanCheckStateGetterDelegate">
            <summary>
            These delegates are used to get the state of the checkbox for a row object.
            </summary>
            <param name="rowObject"></param>
            <returns></returns>
        </member>
        <member name="T:DevGrep.Controls.DLV.CheckStatePutterDelegate">
            <summary>
            These delegates are used to put a changed check state back into a model object
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.BooleanCheckStatePutterDelegate">
            <summary>
            These delegates are used to put a changed check state back into a model object
            </summary>
            <param name="rowObject"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="T:DevGrep.Controls.DLV.ColumnRightClickEventHandler">
            <summary>
            The callbacks for RightColumnClick events
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.HeaderDrawingDelegate">
            <summary>
            This delegate will be used to own draw header column.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.GroupFormatterDelegate">
            <summary>
            This delegate is called when a group has been created but not yet made
            into a real ListViewGroup. The user can take this opportunity to fill
            in lots of other details about the group.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.GroupKeyGetterDelegate">
            <summary>
            These delegates are used to retrieve the object that is the key of the group to which the given row belongs.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.GroupKeyToTitleConverterDelegate">
            <summary>
            These delegates are used to convert a group key into a title for the group
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.HeaderToolTipGetterDelegate">
            <summary>
            These delegates are used to get the tooltip for a column header
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.ImageGetterDelegate">
            <summary>
            These delegates are used to fetch the image selector that should be used
            to choose an image for this column.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.RenderDelegate">
            <summary>
            These delegates are used to draw a cell
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.RowGetterDelegate">
            <summary>
            These delegates are used to fetch a row object for virtual lists
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.RowFormatterDelegate">
            <summary>
            These delegates are used to format a listviewitem before it is added to the control.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.SortDelegate">
            <summary>
            These delegates are used to sort the listview in some custom fashion
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.CellEditEventHandler">
            <summary>
            The callbacks for CellEditing events
            </summary>
            <remarks> this 
            We could replace this with EventHandler&lt;CellEditEventArgs&gt; but that would break all
            cell editing event code from v1.x.
            </remarks>
        </member>
        <member name="T:DevGrep.Controls.DLV.TreeListView">
            <summary>
            A TreeListView combines an expandable tree structure with list view columns.
            </summary>
            <remarks>
            <para>To support tree operations, two delegates must be provided:</para>
            <list type="table">
            <item>
            <term>
            CanExpandGetter
            </term> 
            <description>
            This delegate must accept a model object and return a boolean indicating
            if that model should be expandable. 
            </description>
            </item>
            <item>
            <term>
            ChildrenGetter
            </term> 
            <description>
            This delegate must accept a model object and return an IEnumerable of model
            objects that will be displayed as children of the parent model. This delegate will only be called
            for a model object if the CanExpandGetter has already returned true for that model.
            </description>
            </item>
            </list>
            <para>
            The top level branches of the tree are set via the Roots property. SetObjects(), AddObjects() 
            and RemoveObjects() are interpreted as operations on this collection of roots.
            </para>
            <para>
            To add new children to an existing branch, make changes to your model objects and then
            call RefreshObject() on the parent.
            </para>
            <para>The tree must be a directed acyclic graph -- no cycles are allowed. Put more mundanely, 
            each model object must appear only once in the tree. If the same model object appears in two
            places in the tree, the control will become confused.</para>
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.OnExpanding(DevGrep.Controls.DLV.TreeBranchExpandingEventArgs)">
            <summary>
            Trigger the expanding event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.OnCollapsing(DevGrep.Controls.DLV.TreeBranchCollapsingEventArgs)">
            <summary>
            Trigger the collapsing event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.OnExpanded(DevGrep.Controls.DLV.TreeBranchExpandedEventArgs)">
            <summary>
            Trigger the expanded event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.OnCollapsed(DevGrep.Controls.DLV.TreeBranchCollapsedEventArgs)">
            <summary>
            Trigger the collapsed event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.#ctor">
            <summary>
            Make a default TreeListView
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.IsExpanded(System.Object)">
            <summary>
            Return true if the branch at the given model is expanded
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Collapse(System.Object)">
            <summary>
            Collapse the subtree underneath the given model
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.CollapseAll">
            <summary>
            Collapse all subtrees within this control
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.DiscardAllState">
            <summary>
            Collapse all roots and forget everything we know about all models
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.RebuildAll(System.Boolean)">
            <summary>
            Completely rebuild the tree structure
            </summary>
            <param name="preserveState">If true, the control will try to preserve selection and expansion</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.RebuildAll(System.Collections.IList,System.Collections.IEnumerable)">
            <summary>
            Completely rebuild the tree structure
            </summary>
            <param name="selected">If not null, this list of objects will be selected after the tree is rebuilt</param>
            <param name="expanded">If not null, this collection of objects will be expanded after the tree is rebuilt</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Expand(System.Object)">
            <summary>
            Expand the subtree underneath the given model object
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.ExpandAll">
            <summary>
            Expand all the branches within this tree recursively.
            </summary>
            <remarks>Be careful: this method could take a long time for large trees.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.RefreshObjects(System.Collections.IList)">
            <summary>
            Update the rows that are showing the given objects
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.ToggleExpansion(System.Object)">
            <summary>
            Toggle the expanded state of the branch at the given model object
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.GetParent(System.Object)">
            <summary>
            Return the model object that is the parent of the given model object.
            </summary>
            <param name="model"></param>
            <returns></returns>
            <remarks>The given model must have already been seen in the tree.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.GetChildren(System.Object)">
            <summary>
            Return the collection of model objects that are the children of the 
            given model.
            </summary>
            <param name="model"></param>
            <remarks>The given model must have already been seen in the tree and
            must be expandable</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.ProcessLButtonDown(DevGrep.Controls.DLV.OlvListViewHitTestInfo)">
            <summary>
            Handle a left button down event
            </summary>
            <param name="hti"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.MakeListViewItem(System.Int32)">
            <summary>
            Create a OLVListItem for given row index
            </summary>
            <param name="itemIndex">The index of the row that is needed</param>
            <returns>An OLVListItem</returns>
            <remarks>This differs from the base method by also setting up the IndentCount property.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Decide if the given key event should be handled as a normal key input to the control?
            </summary>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handle the keyboard input to mimic a TreeView.
            </summary>
            <param name="e"></param>
            <returns>Was the key press handled?</returns>
        </member>
        <member name="E:DevGrep.Controls.DLV.TreeListView.Expanding">
            <summary>
            This event is triggered when user input requests the expansion of a list item.
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.TreeListView.Collapsing">
            <summary>
            This event is triggered when user input requests the collapse of a list item.
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.TreeListView.Expanded">
            <summary>
            This event is triggered after the expansion of a list item due to user input.
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.TreeListView.Collapsed">
            <summary>
            This event is triggered after the collapse of a list item due to user input.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.CanExpandGetter">
            <summary>
            This is the delegate that will be used to decide if a model object can be expanded.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.CanShowGroups">
            <summary>
            Gets whether or not this listview is capabale of showing groups
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.ChildrenGetter">
            <summary>
            This is the delegate that will be used to fetch the children of a model object
            </summary>
            <remarks>This delegate will only be called if the CanExpand delegate has 
            returned true for the model object.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.ExpandedObjects">
            <summary>
            Gets or sets the model objects that are expanded.
            </summary>
            <remarks>
            <para>This can be used to expand model objects before they are seen.</para>
            <para>
            Setting this does *not* force the control to rebuild
            its display. You need to call RebuildAll(true).
            </para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.ListFilter">
            <summary>
            Gets or  sets the filter that is applied to our whole list of objects.
            TreeListViews do not currently support whole list filters.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.Objects">
            <summary>
            Gets or sets the collection of root objects of the tree
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.RevealAfterExpand">
            <summary>
            After expanding a branch, should the TreeListView attempts to show as much of the 
            revealed descendents as possible.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.Roots">
            <summary>
            The model objects that form the top level branches of the tree.
            </summary>
            <remarks>Setting this does <b>NOT</b> reset the state of the control.
            In particular, it does not collapse branches.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.TreeColumnRenderer">
            <summary>
            Gets or sets the renderer that will be used to draw the tree structure.
            Setting this to null resets the renderer to default.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.UseWaitCursorWhenExpanding">
            <summary>
            Should a wait cursor be shown when a branch is being expanded?
            </summary>
            <remarks>When this is true, the wait cursor will be shown whilst the children of the 
            branch are being fetched. If the children of the branch have already been cached, 
            the cursor will not change.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.TreeModel">
            <summary>
            The model that is used to manage the tree structure
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.TreeListView.TreeRenderer">
            <summary>
            This class handles drawing the tree structure of the primary column.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.HighlightTextRenderer">
            <summary>
            This renderer highlights substrings that match a given text filter. 
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.BaseRenderer">
            <summary>
            A BaseRenderer provides useful base level functionality for any custom renderer.
            </summary>
            <remarks>
            <para>Subclasses will normally override the Render or OptionalRender method, and use the other
            methods as helper functions.</para>
            </remarks>
        </member>
        <member name="T:DevGrep.Controls.DLV.AbstractRenderer">
            <summary>
            An AbstractRenderer is a do-nothing implementation of the IRenderer interface.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.IRenderer">
            <summary>
            Renderers are the mechanism used for owner drawing cells. As such, they can also handle
            hit detection and positioning of cell editing rectangles.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.IRenderer.RenderItem(System.Windows.Forms.DrawListViewItemEventArgs,System.Drawing.Graphics,System.Drawing.Rectangle,System.Object)">
            <summary>
            Render the whole item within an ObjectListView. This is only used in non-Details views.
            </summary>
            <param name="e">The event</param>
            <param name="g">A Graphics for rendering</param>
            <param name="itemBounds">The bounds of the item</param>
            <param name="rowObject">The model object to be drawn</param>
            <returns>Return true to indicate that the event was handled and no further processing is needed.</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.IRenderer.RenderSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs,System.Drawing.Graphics,System.Drawing.Rectangle,System.Object)">
            <summary>
            Render one cell within an ObjectListView when it is in Details mode.
            </summary>
            <param name="e">The event</param>
            <param name="g">A Graphics for rendering</param>
            <param name="cellBounds">The bounds of the cell</param>
            <param name="rowObject">The model object to be drawn</param>
            <returns>Return true to indicate that the event was handled and no further processing is needed.</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.IRenderer.HitTest(DevGrep.Controls.DLV.OlvListViewHitTestInfo,System.Int32,System.Int32)">
            <summary>
            What is under the given point?
            </summary>
            <param name="hti"></param>
            <param name="x">x co-ordinate</param>
            <param name="y">y co-ordinate</param>
            <remarks>This method should only alter HitTestLocation and/or UserData.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.IRenderer.GetEditRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,DevGrep.Controls.DLV.OLVListItem,System.Int32)">
            <summary>
            When the value in the given cell is to be edited, where should the edit rectangle be placed?
            </summary>
            <param name="g"></param>
            <param name="cellBounds"></param>
            <param name="item"></param>
            <param name="subItemIndex"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractRenderer.RenderItem(System.Windows.Forms.DrawListViewItemEventArgs,System.Drawing.Graphics,System.Drawing.Rectangle,System.Object)">
            <summary>
            Render the whole item within an ObjectListView. This is only used in non-Details views.
            </summary>
            <param name="e">The event</param>
            <param name="g">A Graphics for rendering</param>
            <param name="itemBounds">The bounds of the item</param>
            <param name="rowObject">The model object to be drawn</param>
            <returns>Return true to indicate that the event was handled and no further processing is needed.</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractRenderer.RenderSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs,System.Drawing.Graphics,System.Drawing.Rectangle,System.Object)">
            <summary>
            Render one cell within an ObjectListView when it is in Details mode.
            </summary>
            <param name="e">The event</param>
            <param name="g">A Graphics for rendering</param>
            <param name="cellBounds">The bounds of the cell</param>
            <param name="rowObject">The model object to be drawn</param>
            <returns>Return true to indicate that the event was handled and no further processing is needed.</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractRenderer.HitTest(DevGrep.Controls.DLV.OlvListViewHitTestInfo,System.Int32,System.Int32)">
            <summary>
            What is under the given point?
            </summary>
            <param name="hti"></param>
            <param name="x">x co-ordinate</param>
            <param name="y">y co-ordinate</param>
            <remarks>This method should only alter HitTestLocation and/or UserData.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractRenderer.GetEditRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,DevGrep.Controls.DLV.OLVListItem,System.Int32)">
            <summary>
            When the value in the given cell is to be edited, where should the edit rectangle be placed?
            </summary>
            <param name="g"></param>
            <param name="cellBounds"></param>
            <param name="item"></param>
            <param name="subItemIndex"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.AlignRectangle(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Align the second rectangle with the first rectangle,
            according to the alignment of the column
            </summary>
            <param name="outer">The cell's bounds</param>
            <param name="inner">The rectangle to be aligned within the bounds</param>
            <returns>An aligned rectangle</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.CalculateAlignedRectangle(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Calculate the space that our rendering will occupy and then align that space
            with the given rectangle, according to the Column alignment
            </summary>
            <param name="g"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.CalculateCheckBoxWidth(System.Drawing.Graphics)">
            <summary>
            How much space will the check box for this cell occupy?
            </summary>
            <remarks>Only column 0 can have check boxes. Sub item checkboxes are
            treated as images</remarks>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.CalculateImageWidth(System.Drawing.Graphics,System.Object)">
            <summary>
            How much horizontal space will the image of this cell occupy?
            </summary>
            <param name="g"></param>
            <param name="imageSelector"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.CalculateTextWidth(System.Drawing.Graphics,System.String)">
            <summary>
            How much horizontal space will the text of this cell occupy?
            </summary>
            <param name="g"></param>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.GetBackgroundColor">
            <summary>
            Return the Color that is the background color for this item's cell
            </summary>
            <returns>The background color of the subitem</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.GetForegroundColor">
            <summary>
            Return the color to be used for text in this cell
            </summary>
            <returns>The text color of the subitem</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.GetImage">
            <summary>
            Return the image that should be drawn against this subitem
            </summary>
            <returns>An Image or null if no image should be drawn.</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.GetImage(System.Object)">
            <summary>
            Return the actual image that should be drawn when keyed by the given image selector.
            An image selector can be: <list type="bullet">
            <item><description>an int, giving the index into the image list</description></item>
            <item><description>a string, giving the image key into the image list</description></item>
            <item><description>an Image, being the image itself</description></item>
            </list>
            </summary>
            <param name="imageSelector">The value that indicates the image to be used</param>
            <returns>An Image or null</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.GetImageSelector">
            <summary>
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.GetText">
            <summary>
            Return the string that should be drawn within this
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.GetTextBackgroundColor">
            <summary>
            Return the Color that is the background color for this item's text
            </summary>
            <returns>The background color of the subitem's text</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.RenderItem(System.Windows.Forms.DrawListViewItemEventArgs,System.Drawing.Graphics,System.Drawing.Rectangle,System.Object)">
            <summary>
            Render the whole item in a non-details view.
            </summary>
            <param name="e"></param>
            <param name="g"></param>
            <param name="itemBounds"></param>
            <param name="rowObject"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.RenderSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs,System.Drawing.Graphics,System.Drawing.Rectangle,System.Object)">
            <summary>
            Render one cell
            </summary>
            <param name="e"></param>
            <param name="g"></param>
            <param name="cellBounds"></param>
            <param name="rowObject"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.HitTest(DevGrep.Controls.DLV.OlvListViewHitTestInfo,System.Int32,System.Int32)">
            <summary>
            Calculate which part of this cell was hit
            </summary>
            <param name="hti"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.GetEditRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,DevGrep.Controls.DLV.OLVListItem,System.Int32)">
            <summary>
            Calculate the edit rectangle
            </summary>
            <param name="g"></param>
            <param name="cellBounds"></param>
            <param name="item"></param>
            <param name="subItemIndex"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.OptionalRender(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw our data into the given rectangle using the given graphics context.
            </summary>
            <remarks>
            <para>Subclasses should override this method.</para></remarks>
            <param name="g">The graphics context that should be used for drawing</param>
            <param name="r">The bounds of the subitem cell</param>
            <returns>Returns whether the renderering has already taken place.
            If this returns false, the default processing will take over.
            </returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw our data into the given rectangle using the given graphics context.
            </summary>
            <remarks>
            <para>Subclasses should override this method if they never want
            to fall back on the default processing</para></remarks>
            <param name="g">The graphics context that should be used for drawing</param>
            <param name="r">The bounds of the subitem cell</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.HandleHitTest(System.Drawing.Graphics,DevGrep.Controls.DLV.OlvListViewHitTestInfo,System.Int32,System.Int32)">
            <summary>
            Do the actual work of hit testing. Subclasses should override this rather than HitTest()
            </summary>
            <param name="g"></param>
            <param name="hti"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.HandleGetEditRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,DevGrep.Controls.DLV.OLVListItem,System.Int32)">
            <summary>
            Handle a HitTest request after all state information has been initialized
            </summary>
            <param name="g"></param>
            <param name="cellBounds"></param>
            <param name="item"></param>
            <param name="subItemIndex"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.StandardRender(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw the standard "[checkbox] [image] [text]" cell after the state properties have been initialized.
            </summary>
            <param name="g"></param>
            <param name="r"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.StandardHitTest(System.Drawing.Graphics,DevGrep.Controls.DLV.OlvListViewHitTestInfo,System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            Perform normal hit testing relative to the given bounds
            </summary>
            <param name="g"></param>
            <param name="hti"></param>
            <param name="bounds"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.StandardGetEditRectangle(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            This method calculates the bounds of the text within a standard layout
            (i.e. optional checkbox, optional image, text)
            </summary>
            <remarks>This method only works correctly if the state of the renderer
            has been fully initialized (see BaseRenderer.GetEditRectangle)</remarks>
            <param name="g"></param>
            <param name="cellBounds"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.DrawAlignedImage(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Image)">
            <summary>
            Draw the given image aligned horizontally within the column.
            </summary>
            <remarks>
            Over tall images are scaled to fit. Over-wide images are
            truncated. This is by design!
            </remarks>
            <param name="g">Graphics context to use for drawing</param>
            <param name="r">Bounds of the cell</param>
            <param name="image">The image to be drawn</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.DrawAlignedImageAndText(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw our subitems image and text
            </summary>
            <param name="g">Graphics context to use for drawing</param>
            <param name="r">Bounds of the cell</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Fill in the background of this cell
            </summary>
            <param name="g">Graphics context to use for drawing</param>
            <param name="r">Bounds of the cell</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.DrawCheckBox(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw the check box of this row
            </summary>
            <param name="g">Graphics context to use for drawing</param>
            <param name="r">Bounds of the cell</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.DrawImage(System.Drawing.Graphics,System.Drawing.Rectangle,System.Object)">
            <summary>
            Draw the given text and optional image in the "normal" fashion
            </summary>
            <param name="g">Graphics context to use for drawing</param>
            <param name="r">Bounds of the cell</param>
            <param name="imageSelector">The optional image to be drawn</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.DrawImageAndText(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw our subitems image and text
            </summary>
            <param name="g">Graphics context to use for drawing</param>
            <param name="r">Bounds of the cell</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.DrawImages(System.Drawing.Graphics,System.Drawing.Rectangle,System.Collections.ICollection)">
            <summary>
            Draw the given collection of image selectors
            </summary>
            <param name="g"></param>
            <param name="r"></param>
            <param name="imageSelectors"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.DrawText(System.Drawing.Graphics,System.Drawing.Rectangle,System.String)">
            <summary>
            Draw the given text and optional image in the "normal" fashion
            </summary>
            <param name="g">Graphics context to use for drawing</param>
            <param name="r">Bounds of the cell</param>
            <param name="txt">The string to be drawn</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.DrawTextGdi(System.Drawing.Graphics,System.Drawing.Rectangle,System.String)">
            <summary>
            Print the given text in the given rectangle using only GDI routines
            </summary>
            <param name="g"></param>
            <param name="r"></param>
            <param name="txt"></param>
            <remarks>
            The native list control uses GDI routines to do its drawing, so using them
            here makes the owner drawn mode looks more natural.
            <para>This method doesn't honour the CanWrap setting on the renderer. All
            text is single line</para>
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.BaseRenderer.DrawTextGdiPlus(System.Drawing.Graphics,System.Drawing.Rectangle,System.String)">
            <summary>
            Print the given text in the given rectangle using normal GDI+ .NET methods
            </summary>
            <remarks>Printing to a printer dc has to be done using this method.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.BaseRenderer.CanWrap">
            <summary>
            Can the renderer wrap lines that do not fit completely within the cell?
            </summary>
            <remarks>Wrapping text doesn't work with the GDI renderer.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.BaseRenderer.ImageList">
            <summary>
            Gets or sets the image list from which keyed images will be fetched
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BaseRenderer.Spacing">
            <summary>
            When rendering multiple images, how many pixels should be between each image?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BaseRenderer.UseGdiTextRendering">
            <summary>
            Should text be rendered using GDI routines? This makes the text look more
            like a native List view control.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BaseRenderer.Aspect">
            <summary>
            Get or set the aspect of the model object that this renderer should draw
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BaseRenderer.Bounds">
            <summary>
            What are the bounds of the cell that is being drawn?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BaseRenderer.Column">
            <summary>
            Get or set the OLVColumn that this renderer will draw
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BaseRenderer.DrawItemEvent">
            <summary>
            Get/set the event that caused this renderer to be called
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BaseRenderer.Event">
            <summary>
            Get/set the event that caused this renderer to be called
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BaseRenderer.Font">
            <summary>
            Return the font to be used for text in this cell
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BaseRenderer.ImageListOrDefault">
            <summary>
            Gets the image list from which keyed images will be fetched
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BaseRenderer.IsDrawBackground">
            <summary>
            Should this renderer fill in the background before drawing?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BaseRenderer.IsItemSelected">
            <summary>
            Cache whether or not our item is selected
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BaseRenderer.IsPrinting">
            <summary>
            Is this renderer being used on a printer context?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BaseRenderer.ListItem">
            <summary>
            Get or set the listitem that this renderer will be drawing
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BaseRenderer.ListView">
            <summary>
            Get/set the listview for which the drawing is to be done
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BaseRenderer.OLVSubItem">
            <summary>
            Get the specialized OLVSubItem that this renderer is drawing
            </summary>
            <remarks>This returns null for column 0.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.BaseRenderer.RowObject">
            <summary>
            Get or set the model object that this renderer should draw
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BaseRenderer.SubItem">
            <summary>
            Get or set the list subitem that this renderer will be drawing
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BaseRenderer.TextBrush">
            <summary>
            The brush that will be used to paint the text
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BaseRenderer.StringFormatForGdiPlus">
            <summary>
            Gets the StringFormat needed when drawing text using GDI+
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.HighlightTextRenderer.#ctor">
            <summary>
            Create a HighlightTextRenderer
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.HighlightTextRenderer.#ctor(DevGrep.Controls.DLV.TextMatchFilter)">
            <summary>
            Create a HighlightTextRenderer
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.HighlightTextRenderer.#ctor(System.String)">
            <summary>
            Create a HighlightTextRenderer
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.HighlightTextRenderer.DrawTextGdi(System.Drawing.Graphics,System.Drawing.Rectangle,System.String)">
            <summary>
            Draw text using GDI
            </summary>
            <param name="g"></param>
            <param name="r"></param>
            <param name="txt"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.HighlightTextRenderer.DrawGdiTextHighlighting(System.Drawing.Graphics,System.Drawing.Rectangle,System.String)">
            <summary>
            Draw the highlighted text using GDI
            </summary>
            <param name="g"></param>
            <param name="r"></param>
            <param name="txt"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.HighlightTextRenderer.DrawSubstringFrame(System.Drawing.Graphics,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw an indication around the given frame that shows a text match
            </summary>
            <param name="g"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.HighlightTextRenderer.DrawTextGdiPlus(System.Drawing.Graphics,System.Drawing.Rectangle,System.String)">
            <summary>
            Draw the text using GDI+
            </summary>
            <param name="g"></param>
            <param name="r"></param>
            <param name="txt"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.HighlightTextRenderer.DrawGdiPlusTextHighlighting(System.Drawing.Graphics,System.Drawing.Rectangle,System.String)">
            <summary>
            Draw the highlighted text using GDI+
            </summary>
            <param name="g"></param>
            <param name="r"></param>
            <param name="txt"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.HighlightTextRenderer.GetRoundedRect(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Return a GraphicPath that is a round cornered rectangle
            </summary>
            <returns>A round cornered rectagle path</returns>
            <remarks>If I could rely on people using C# 3.0+, this should be
            an extension method of GraphicsPath.</remarks>        
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="diameter"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.HighlightTextRenderer.GetRoundedRect(System.Drawing.RectangleF,System.Single)">
            <summary>
            Return a GraphicPath that is a round cornered rectangle
            </summary>
            <param name="rect">The rectangle</param>
            <param name="diameter">The diameter of the corners</param>
            <returns>A round cornered rectagle path</returns>
            <remarks>If I could rely on people using C# 3.0+, this should be
            an extension method of GraphicsPath.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.HighlightTextRenderer.CornerRoundness">
            <summary>
            Gets or set how rounded will be the corners of the text match frame
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HighlightTextRenderer.FillBrush">
            <summary>
            Gets or set the brush will be used to paint behind the matched substrings.
            Set this to null to not fill the frame.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HighlightTextRenderer.Filter">
            <summary>
            Gets or sets the filter that is filtering the ObjectListView and for
            which this renderer should highlight text
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HighlightTextRenderer.FramePen">
            <summary>
            Gets or set the pen will be used to frame the matched substrings.
            Set this to null to not draw a frame.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HighlightTextRenderer.UseRoundedRectangle">
            <summary>
            Gets or sets whether the frame around a text match will have rounded corners
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HighlightTextRenderer.TextToHighlight">
            <summary>
            Gets or set the text that will be highlighted
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HighlightTextRenderer.StringComparison">
            <summary>
            Gets or sets the manner in which substring will be compared.
            </summary>
            <remarks>
            Use this to control if substring matches are case sensitive or insensitive.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.HighlightTextRenderer.ShouldDrawHighlighting">
            <summary>
            Gets whether the renderer should actually draw highlighting
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.TreeRenderer.#ctor">
            <summary>
            Create a TreeRenderer
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.TreeListView.TreeRenderer.PIXELS_PER_LEVEL">
            <summary>
            How many pixels will be reserved for each level of indentation?
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.TreeRenderer.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            The real work of drawing the tree is done in this method
            </summary>
            <param name="g"></param>
            <param name="r"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.TreeRenderer.DrawExpansionGlyph(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Draw the expansion indicator
            </summary>
            <param name="g"></param>
            <param name="r"></param>
            <param name="isExpanded"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.TreeRenderer.DrawExpansionGlyphStyled(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Draw the expansion indicator using styles
            </summary>
            <param name="g"></param>
            <param name="r"></param>
            <param name="isExpanded"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.TreeRenderer.DrawExpansionGlyphManual(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Draw the expansion indicator without using styles
            </summary>
            <param name="g"></param>
            <param name="r"></param>
            <param name="isExpanded"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.TreeRenderer.DrawLines(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Pen,DevGrep.Controls.DLV.TreeListView.Branch)">
            <summary>
            Draw the lines of the tree
            </summary>
            <param name="g"></param>
            <param name="r"></param>
            <param name="p"></param>
            <param name="br"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.TreeRenderer.HandleHitTest(System.Drawing.Graphics,DevGrep.Controls.DLV.OlvListViewHitTestInfo,System.Int32,System.Int32)">
            <summary>
            Do the hit test
            </summary>
            <param name="g"></param>
            <param name="hti"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.TreeRenderer.HandleGetEditRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,DevGrep.Controls.DLV.OLVListItem,System.Int32)">
            <summary>
            Calculate the edit rect
            </summary>
            <param name="g"></param>
            <param name="cellBounds"></param>
            <param name="item"></param>
            <param name="subItemIndex"></param>
            <returns></returns>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.TreeRenderer.Branch">
            <summary>
            Return the branch that the renderer is currently drawing.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.TreeRenderer.LinePen">
            <summary>
            Return the pen that will be used to draw the lines between branches
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.TreeRenderer.TreeListView">
            <summary>
            Return the TreeListView for which the renderer is being used.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.TreeRenderer.IsShowLines">
            <summary>
            Should the renderer draw lines connecting siblings?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.TreeRenderer.UseStyles">
            <summary>
            Gets whether or not we should render using styles
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.TreeListView.CanExpandGetterDelegate">
            <summary>
            Delegates of this type are use to decide if the given model object can be expanded
            </summary>
            <param name="model">The model under consideration</param>
            <returns>Can the given model be expanded?</returns>
        </member>
        <member name="T:DevGrep.Controls.DLV.TreeListView.ChildrenGetterDelegate">
            <summary>
            Delegates of this type are used to fetch the children of the given model object
            </summary>
            <param name="model">The parent whose children should be fetched</param>
            <returns>An enumerable over the children</returns>
        </member>
        <member name="T:DevGrep.Controls.DLV.TreeListView.Tree">
            <summary>
            A Tree object represents a tree structure data model that supports both 
            tree and flat list operations as well as fast access to branches.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Tree.#ctor(DevGrep.Controls.DLV.TreeListView)">
            <summary>
            Create a Tree
            </summary>
            <param name="treeView"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Tree.Collapse(System.Object)">
            <summary>
            Collapse the subtree underneath the given model
            </summary>
            <param name="model">The model to be collapsed. If the model isn't in the tree,
            or if it is already collapsed, the command does nothing.</param>
            <returns>The index of the model in flat list version of the tree</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Tree.CollapseAll">
            <summary>
            Collapse all branches in this tree
            </summary>
            <returns>Return the index of the first root that was not collapsed</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Tree.Expand(System.Object)">
            <summary>
            Expand the subtree underneath the given model object
            </summary>
            <param name="model">The model to be expanded.</param> 
            <returns>The index of the model in flat list version of the tree</returns>
            <remarks>
            If the model isn't in the tree,
            if it cannot be expanded or if it is already expanded, the command does nothing.
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Tree.ExpandAll">
            <summary>
            Expand all branches in this tree
            </summary>
            <returns>Return the index of the first branch that was expanded</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Tree.GetBranch(System.Object)">
            <summary>
            Return the Branch object that represents the given model in the tree
            </summary>
            <param name="model">The model whose branches is to be returned</param>
            <returns>The branch that represents the given model, or null if the model
            isn't in the tree.</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Tree.GetVisibleDescendentCount(System.Object)">
            <summary>
            Return the number of visible descendents that are below the given model.
            </summary>
            <param name="model">The model whose descendent count is to be returned</param>
            <returns>The number of visible descendents. 0 if the model doesn't exist or is collapsed</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Tree.RebuildChildren(System.Object)">
            <summary>
            Rebuild the children of the given model, refreshing any cached information held about the given object
            </summary>
            <param name="model"></param>
            <returns>The index of the model in flat list version of the tree</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Tree.IsModelExpanded(System.Object)">
            <summary>
            Is the given model expanded?
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Tree.SetModelExpanded(System.Object,System.Boolean)">
            <summary>
            Remember whether or not the given model was expanded
            </summary>
            <param name="model"></param>
            <param name="isExpanded"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Tree.InsertChildren(DevGrep.Controls.DLV.TreeListView.Branch,System.Int32)">
            <summary>
            Insert the children of the given branch into the given position
            </summary>
            <param name="br">The branch whose children should be inserted</param>
            <param name="index">The index where the children should be inserted</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Tree.RebuildList">
            <summary>
            Rebuild our flat internal list of objects.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Tree.RebuildObjectMap(System.Int32)">
            <summary>
            Rebuild our reverse index that maps an object to its location
            in the filteredObjectList array.
            </summary>
            <param name="startIndex"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Tree.MakeBranch(DevGrep.Controls.DLV.TreeListView.Branch,System.Object)">
            <summary>
            Create a new branch within this tree
            </summary>
            <param name="parent"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Tree.GetNthObject(System.Int32)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Tree.GetObjectCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Tree.GetObjectIndex(System.Object)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Tree.PrepareCache(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="first"></param>
            <param name="last"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Tree.SearchText(System.String,System.Int32,System.Int32,DevGrep.Controls.DLV.OLVColumn)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="first"></param>
            <param name="last"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Tree.Sort(DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.SortOrder)">
            <summary>
            Sort the tree on the given column and in the given order
            </summary>
            <param name="column"></param>
            <param name="order"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Tree.GetBranchComparer">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Tree.AddObjects(System.Collections.ICollection)">
            <summary>
            Add the given collection of objects to the roots of this tree
            </summary>
            <param name="modelObjects"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Tree.RemoveObjects(System.Collections.ICollection)">
            <summary>
            Remove all of the given objects from the roots of the tree.
            Any objects that is not already in the roots collection is ignored.
            </summary>
            <param name="modelObjects"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Tree.SetObjects(System.Collections.IEnumerable)">
            <summary>
            Set the roots of this tree to be the given collection
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Tree.ApplyFilters(DevGrep.Controls.DLV.IModelFilter,DevGrep.Controls.DLV.IListFilter)">
            <summary>
            
            </summary>
            <param name="modelFilter"></param>
            <param name="listFilter"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Tree.IncludeModel(System.Object)">
            <summary>
            Should the given model be included in this control?
            </summary>
            <param name="model">The model to consider</param>
            <returns>True if it will be included</returns>
        </member>
        <member name="F:DevGrep.Controls.DLV.TreeListView.Tree.modelFilter">
            <summary>
            
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.TreeListView.Tree.listFilter">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.Tree.CanExpandGetter">
            <summary>
            This is the delegate that will be used to decide if a model object can be expanded.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.Tree.ChildrenGetter">
            <summary>
            This is the delegate that will be used to fetch the children of a model object
            </summary>
            <remarks>This delegate will only be called if the CanExpand delegate has 
            returned true for the model object.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.Tree.RootObjects">
            <summary>
            Get or return the top level model objects in the tree
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.Tree.TreeView">
            <summary>
            What tree view is this Tree the model for?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.Tree.IsFiltering">
            <summary>
            Is this list currently being filtered?
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.TreeListView.Branch">
            <summary>
            A Branch represents a sub-tree within a tree
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Branch.#ctor(DevGrep.Controls.DLV.TreeListView.Branch,DevGrep.Controls.DLV.TreeListView.Tree,System.Object)">
            <summary>
            Create a Branch
            </summary>
            <param name="parent"></param>
            <param name="tree"></param>
            <param name="model"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Branch.ClearCachedInfo">
            <summary>
            Clear any cached information that this branch is holding
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Branch.Collapse">
            <summary>
            Collapse this branch
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Branch.Expand">
            <summary>
            Expand this branch
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Branch.ExpandAll">
            <summary>
            Expand this branch recursively
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Branch.FetchChildren">
            <summary>
            Fetch the children of this branch.
            </summary>
            <remarks>This should only be called when CanExpand is true.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Branch.Flatten">
            <summary>
            Collapse the visible descendents of this branch into list of model objects
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Branch.FlattenOnto(System.Collections.IList)">
            <summary>
            Flatten this branch's visible descendents onto the given list.
            </summary>
            <param name="flatList"></param>
            <remarks>The branch itself is <b>not</b> included in the list.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Branch.RefreshChildren">
            <summary>
            Force a refresh of all children recursively
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.Branch.Sort(DevGrep.Controls.DLV.TreeListView.BranchComparer)">
            <summary>
            Sort the sub-branches and their descendents so they are ordered according
            to the given comparer.
            </summary>
            <param name="comparer">The comparer that orders the branches</param>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.Branch.Ancestors">
            <summary>
            Get the ancestor branches of this branch, with the 'oldest' ancestor first.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.Branch.CanExpand">
            <summary>
            Can this branch be expanded?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.Branch.ChildBranches">
            <summary>
            Gets or sets our children
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.Branch.Children">
            <summary>
            Get/set the model objects that are beneath this branch
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.Branch.FilteredChildBranches">
            <summary>
            Gets a list of all the branches that survive filtering
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.Branch.IsExpanded">
            <summary>
            Gets or set whether this branch is expanded
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.Branch.IsFirstBranch">
            <summary>
            Return true if this branch is the first branch of the entire tree
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.Branch.IsLastChild">
            <summary>
            Return true if this branch is the last child of its parent
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.Branch.IsOnlyBranch">
            <summary>
            Return true if this branch is the only top level branch
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.Branch.Level">
            <summary>
            Gets the depth level of this branch
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.Branch.Model">
            <summary>
            Gets or sets which model is represented by this branch
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.Branch.NumberVisibleDescendents">
            <summary>
            Return the number of descendents of this branch that are currently visible
            </summary>
            <returns></returns>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.Branch.ParentBranch">
            <summary>
            Gets or sets our parent branch
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.Branch.Tree">
            <summary>
            Gets or sets our overall tree
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeListView.Branch.Visible">
            <summary>
            Is this branch currently visible? A branch is visible
            if it has no parent (i.e. it's a root), or its parent
            is visible and expanded.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.TreeListView.Branch.BranchFlags">
            <summary>
            Indicators for branches
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.TreeListView.Branch.BranchFlags.FirstBranch">
            <summary>
            FirstBranch of tree
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.TreeListView.Branch.BranchFlags.LastChild">
            <summary>
            LastChild of parent
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.TreeListView.Branch.BranchFlags.OnlyBranch">
            <summary>
            OnlyBranch of tree
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.TreeListView.BranchComparer">
            <summary>
            This class sorts branches according to how their respective model objects are sorted
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.BranchComparer.#ctor(System.Collections.IComparer)">
            <summary>
            Create a BranchComparer
            </summary>
            <param name="actualComparer"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeListView.BranchComparer.Compare(DevGrep.Controls.DLV.TreeListView.Branch,DevGrep.Controls.DLV.TreeListView.Branch)">
            <summary>
            Order the two branches
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:DevGrep.Controls.DLV.CellEditEventArgs">
            <summary>
            Let the world know that a cell edit operation is beginning or ending
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.CellEditEventArgs.#ctor(DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.Control,System.Drawing.Rectangle,DevGrep.Controls.DLV.OLVListItem,System.Int32)">
            <summary>
            Create an event args
            </summary>
            <param name="column"></param>
            <param name="control"></param>
            <param name="r"></param>
            <param name="item"></param>
            <param name="subItemIndex"></param>
        </member>
        <member name="F:DevGrep.Controls.DLV.CellEditEventArgs.Cancel">
            <summary>
            Change this to true to cancel the cell editing operation.
            </summary>
            <remarks>
            <para>During the CellEditStarting event, setting this to true will prevent the cell from being edited.</para>
            <para>During the CellEditFinishing event, if this value is already true, this indicates that the user has
            cancelled the edit operation and that the handler should perform cleanup only. Setting this to true,
            will prevent the ObjectListView from trying to write the new value into the model object.</para>
            </remarks>
        </member>
        <member name="F:DevGrep.Controls.DLV.CellEditEventArgs.Control">
            <summary>
            During the CellEditStarting event, this can be modified to be the control that you want
            to edit the value. You must fully configure the control before returning from the event,
            including its bounds and the value it is showing.
            During the CellEditFinishing event, you can use this to get the value that the user
            entered and commit that value to the model. Changing the control during the finishing
            event has no effect.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.CellEditEventArgs.Column">
            <summary>
            The column of the cell that is going to be or has been edited.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.CellEditEventArgs.RowObject">
            <summary>
            The model object of the row of the cell that is going to be or has been edited.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.CellEditEventArgs.ListViewItem">
            <summary>
            The listview item of the cell that is going to be or has been edited.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.CellEditEventArgs.NewValue">
            <summary>
            The data value of the cell as it stands in the control.
            </summary>
            <remarks>Only validate during Validating and Finishing events.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.CellEditEventArgs.SubItemIndex">
            <summary>
            The index of the cell that is going to be or has been edited.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.CellEditEventArgs.Value">
            <summary>
            The data value of the cell before the edit operation began.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.CellEditEventArgs.CellBounds">
            <summary>
            The bounds of the cell that is going to be or has been edited.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.CancellableEventArgs">
            <summary>
            Event blocks for events that can be cancelled
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.CancellableEventArgs.Canceled">
            <summary>
            Has this event been cancelled by the event handler?
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.BeforeSortingEventArgs">
            <summary>
            BeforeSorting
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.BeforeSortingEventArgs.#ctor(DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.SortOrder,DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.SortOrder)">
            <summary>
            Create BeforeSortingEventArgs
            </summary>
            <param name="column"></param>
            <param name="order"></param>
            <param name="column2"></param>
            <param name="order2"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.BeforeSortingEventArgs.#ctor(DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.SortOrder,DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.SortOrder,DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.SortOrder)">
            <summary>
            Create BeforeSortingEventArgs
            </summary>
            <param name="groupColumn"></param>
            <param name="groupOrder"></param>
            <param name="column"></param>
            <param name="order"></param>
            <param name="column2"></param>
            <param name="order2"></param>
        </member>
        <member name="F:DevGrep.Controls.DLV.BeforeSortingEventArgs.Handled">
            <summary>
            Did the event handler already do the sorting for us?
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.BeforeSortingEventArgs.ColumnToGroupBy">
            <summary>
            What column will be used for grouping
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.BeforeSortingEventArgs.GroupByOrder">
            <summary>
            How will groups be ordered
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.BeforeSortingEventArgs.ColumnToSort">
            <summary>
            What column will be used for sorting
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.BeforeSortingEventArgs.SortOrder">
            <summary>
            What order will be used for sorting. None means no sorting.
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.BeforeSortingEventArgs.SecondaryColumnToSort">
            <summary>
            What column will be used for secondary sorting?
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.BeforeSortingEventArgs.SecondarySortOrder">
            <summary>
            What order will be used for secondary sorting?
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.AfterSortingEventArgs">
            <summary>
            Sorting has just occurred.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.AfterSortingEventArgs.#ctor(DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.SortOrder,DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.SortOrder,DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.SortOrder)">
            <summary>
            Create a AfterSortingEventArgs
            </summary>
            <param name="groupColumn"></param>
            <param name="groupOrder"></param>
            <param name="column"></param>
            <param name="order"></param>
            <param name="column2"></param>
            <param name="order2"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.AfterSortingEventArgs.#ctor(DevGrep.Controls.DLV.BeforeSortingEventArgs)">
            <summary>
            Create a AfterSortingEventArgs
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:DevGrep.Controls.DLV.AfterSortingEventArgs.ColumnToGroupBy">
            <summary>
            What column was used for grouping?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.AfterSortingEventArgs.GroupByOrder">
            <summary>
            What ordering was used for grouping?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.AfterSortingEventArgs.ColumnToSort">
            <summary>
            What column was used for sorting?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.AfterSortingEventArgs.SortOrder">
            <summary>
            What ordering was used for sorting?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.AfterSortingEventArgs.SecondaryColumnToSort">
            <summary>
            What column was used for secondary sorting?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.AfterSortingEventArgs.SecondarySortOrder">
            <summary>
            What order was used for secondary sorting?
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.FilterEventArgs">
            <summary>
            This event is triggered when the contents of a list have changed
            and we want the world to have a chance to filter the list.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.FilterEventArgs.#ctor(System.Collections.IEnumerable)">
            <summary>
            Create a FilterEventArgs
            </summary>
            <param name="objects"></param>
        </member>
        <member name="F:DevGrep.Controls.DLV.FilterEventArgs.Objects">
            <summary>
            Gets or sets what objects are being filtered
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.FilterEventArgs.FilteredObjects">
            <summary>
            Gets or sets what objects survived the filtering
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.ItemsChangedEventArgs">
            <summary>
            This event is triggered after the items in the list have been changed,
            either through SetObjects, AddObjects or RemoveObjects.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ItemsChangedEventArgs.#ctor">
            <summary>
            Create a ItemsChangedEventArgs
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ItemsChangedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor for this event when used by a virtual list
            </summary>
            <param name="oldObjectCount"></param>
            <param name="newObjectCount"></param>
        </member>
        <member name="P:DevGrep.Controls.DLV.ItemsChangedEventArgs.OldObjectCount">
            <summary>
            Gets how many items were in the list before it changed
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ItemsChangedEventArgs.NewObjectCount">
            <summary>
            Gets how many objects are in the list after the change.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.ItemsAddingEventArgs">
            <summary>
            This event is triggered by AddObjects before any change has been made to the list.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ItemsAddingEventArgs.#ctor(System.Collections.ICollection)">
            <summary>
            Create an ItemsAddingEventArgs
            </summary>
            <param name="objectsToAdd"></param>
        </member>
        <member name="F:DevGrep.Controls.DLV.ItemsAddingEventArgs.ObjectsToAdd">
            <summary>
            Gets or sets the objects to be added to the list
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.ItemsChangingEventArgs">
            <summary>
            This event is triggered by SetObjects before any change has been made to the list.
            </summary>
            <remarks>
            When used with a virtual list, OldObjects will always be null.
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ItemsChangingEventArgs.#ctor(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Create ItemsChangingEventArgs
            </summary>
            <param name="oldObjects"></param>
            <param name="newObjects"></param>
        </member>
        <member name="F:DevGrep.Controls.DLV.ItemsChangingEventArgs.NewObjects">
            <summary>
            Gets or sets the objects that will be in the list after it changes.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ItemsChangingEventArgs.OldObjects">
            <summary>
            Gets the objects that were in the list before it change.
            For virtual lists, this will always be null.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.ItemsRemovingEventArgs">
            <summary>
            This event is triggered by RemoveObjects before any change has been made to the list.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ItemsRemovingEventArgs.#ctor(System.Collections.ICollection)">
            <summary>
            Create an ItemsRemovingEventArgs
            </summary>
            <param name="objectsToRemove"></param>
        </member>
        <member name="F:DevGrep.Controls.DLV.ItemsRemovingEventArgs.ObjectsToRemove">
            <summary>
            Gets or sets the objects that will be removed
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.AfterSearchingEventArgs">
            <summary>
            Triggered after the user types into a list
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.AfterSearchingEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            Create an AfterSearchingEventArgs
            </summary>
            <param name="stringToFind"></param>
            <param name="indexSelected"></param>
        </member>
        <member name="F:DevGrep.Controls.DLV.AfterSearchingEventArgs.Handled">
            <summary>
            Gets or sets whether an the event handler already handled this event
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.AfterSearchingEventArgs.StringToFind">
            <summary>
            Gets the string that was actually searched for
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.AfterSearchingEventArgs.IndexSelected">
            <summary>
            Gets the index of the row that was selected by the search.
            -1 means that no row was matched
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.BeforeSearchingEventArgs">
            <summary>
            Triggered when the user types into a list
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.BeforeSearchingEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            Create BeforeSearchingEventArgs
            </summary>
            <param name="stringToFind"></param>
            <param name="startSearchFrom"></param>
        </member>
        <member name="F:DevGrep.Controls.DLV.BeforeSearchingEventArgs.StringToFind">
            <summary>
            Gets or sets the string that will be found by the search routine
            </summary>
            <remarks>Modifying this value does not modify the memory of what the user has typed. 
            When the user next presses a character, the search string will revert to what 
            the user has actually typed.</remarks>
        </member>
        <member name="F:DevGrep.Controls.DLV.BeforeSearchingEventArgs.StartSearchFrom">
            <summary>
            Gets or sets the index of the first row that will be considered to matching.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.CellEventArgs">
            <summary>
            The parameter block when telling the world about a cell based event
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.CellEventArgs.Handled">
            <summary>
            Gets or set if this event completelely handled. If it was, no further processing
            will be done for it.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.CellEventArgs.ListView">
            <summary>
            Gets the ObjectListView that is the source of the event
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.CellEventArgs.Model">
            <summary>
            Gets the model object under the cell
            </summary>
            <remarks>This is null for events triggered by the header.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.CellEventArgs.RowIndex">
            <summary>
            Gets the row index of the cell
            </summary>
            <remarks>This is -1 for events triggered by the header.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.CellEventArgs.ColumnIndex">
            <summary>
            Gets the column index of the cell
            </summary>
            <remarks>This is -1 when the view is not in details view.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.CellEventArgs.Column">
            <summary>
            Gets the column of the cell 
            </summary>
            <remarks>This is null when the view is not in details view.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.CellEventArgs.Location">
            <summary>
            Gets the location of the mouse at the time of the event
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.CellEventArgs.ModifierKeys">
            <summary>
            Gets the state of the modifier keys at the time of the event
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.CellEventArgs.Item">
            <summary>
            Gets the item of the cell
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.CellEventArgs.SubItem">
            <summary>
            Gets the subitem of the cell
            </summary>
            <remarks>This is null when the view is not in details view and 
            for event triggered by the header</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.CellEventArgs.HitTest">
            <summary>
            Gets the HitTest object that determined which cell was hit
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.CellClickEventArgs">
            <summary>
            Tells the world that a cell was clicked
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.CellClickEventArgs.ClickCount">
            <summary>
            Gets or sets the number of clicks associated with this event
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.CellRightClickEventArgs">
            <summary>
            Tells the world that a cell was right clicked
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.CellRightClickEventArgs.MenuStrip">
            <summary>
            Gets or sets the menu that should be displayed as a result of this event.
            </summary>
            <remarks>The menu will be positioned at Location, so changing that property changes
            where the menu will be displayed.</remarks>
        </member>
        <member name="T:DevGrep.Controls.DLV.CellOverEventArgs">
            <summary>
            Tell the world that the mouse is over a given cell
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.FreezeEventArgs">
            <summary>
            Tells the world that the frozen-ness of the ObjectListView has changed.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.FreezeEventArgs.#ctor(System.Int32)">
            <summary>
            Make a FreezeEventArgs
            </summary>
            <param name="freeze"></param>
        </member>
        <member name="P:DevGrep.Controls.DLV.FreezeEventArgs.FreezeLevel">
            <summary>
            How frozen is the control? 0 means that the control is unfrozen, 
            more than 0 indicates froze.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.ToolTipShowingEventArgs">
            <summary>
            The parameter block when telling the world that a tool tip is about to be shown.
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.ToolTipShowingEventArgs.Text">
            <summary>
            Gets or sets the text should be shown on the tooltip for this event
            </summary>
            <remarks>Setting this to empty or null prevents any tooltip from showing</remarks>
        </member>
        <member name="F:DevGrep.Controls.DLV.ToolTipShowingEventArgs.RightToLeft">
            <summary>
            In what direction should the text for this tooltip be drawn?
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.ToolTipShowingEventArgs.IsBalloon">
            <summary>
            Should the tooltip for this event been shown in bubble style?
            </summary>
            <remarks>This doesn't work reliable under Vista</remarks>
        </member>
        <member name="F:DevGrep.Controls.DLV.ToolTipShowingEventArgs.BackColor">
            <summary>
            What color should be used for the background of the tooltip
            </summary>
            <remarks>Setting this does nothing under Vista</remarks>
        </member>
        <member name="F:DevGrep.Controls.DLV.ToolTipShowingEventArgs.ForeColor">
            <summary>
            What color should be used for the foreground of the tooltip
            </summary>
            <remarks>Setting this does nothing under Vista</remarks>
        </member>
        <member name="F:DevGrep.Controls.DLV.ToolTipShowingEventArgs.Title">
            <summary>
            What string should be used as the title for the tooltip for this event?
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.ToolTipShowingEventArgs.StandardIcon">
            <summary>
            Which standard icon should be used for the tooltip for this event
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.ToolTipShowingEventArgs.AutoPopDelay">
            <summary>
            How many milliseconds should the tooltip remain before it automatically
            disappears.
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.ToolTipShowingEventArgs.Font">
            <summary>
            What font should be used to draw the text of the tooltip?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ToolTipShowingEventArgs.ToolTipControl">
            <summary>
            Gets the tooltip control that is triggering the tooltip event
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.HyperlinkEventArgs">
            <summary>
            Common information to all hyperlink events
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HyperlinkEventArgs.ListView">
            <summary>
            Gets the ObjectListView that is the source of the event
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HyperlinkEventArgs.Model">
            <summary>
            Gets the model object under the cell
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HyperlinkEventArgs.RowIndex">
            <summary>
            Gets the row index of the cell
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HyperlinkEventArgs.ColumnIndex">
            <summary>
            Gets the column index of the cell
            </summary>
            <remarks>This is -1 when the view is not in details view.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.HyperlinkEventArgs.Column">
            <summary>
            Gets the column of the cell 
            </summary>
            <remarks>This is null when the view is not in details view.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.HyperlinkEventArgs.Item">
            <summary>
            Gets the item of the cell
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HyperlinkEventArgs.SubItem">
            <summary>
            Gets the subitem of the cell
            </summary>
            <remarks>This is null when the view is not in details view</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.HyperlinkEventArgs.Url">
            <summary>
            Gets the ObjectListView that is the source of the event
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HyperlinkEventArgs.Handled">
            <summary>
            Gets or set if this event completelely handled. If it was, no further processing
            will be done for it.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.IsHyperlinkEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.IsHyperlinkEventArgs.Url">
            <summary>
            Gets or sets the url that should be invoked when this cell is clicked.
            </summary>
            <remarks>Setting this to None or String.Empty means that this cell is not a hyperlink</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.IsHyperlinkEventArgs.ListView">
            <summary>
            Gets the ObjectListView that is the source of the event
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.IsHyperlinkEventArgs.Model">
            <summary>
            Gets the model object under the cell
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.IsHyperlinkEventArgs.Column">
            <summary>
            Gets the column of the cell 
            </summary>
            <remarks>This is null when the view is not in details view.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.IsHyperlinkEventArgs.Text">
            <summary>
            Gets the text of the cell 
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.FormatRowEventArgs">
            <summary>
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.FormatRowEventArgs.ListView">
            <summary>
            Gets the ObjectListView that is the source of the event
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.FormatRowEventArgs.Item">
            <summary>
            Gets the item of the cell
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.FormatRowEventArgs.Model">
            <summary>
            Gets the model object under the cell
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.FormatRowEventArgs.RowIndex">
            <summary>
            Gets the row index of the cell
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.FormatRowEventArgs.DisplayIndex">
            <summary>
            Gets the display index of the row
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.FormatRowEventArgs.UseCellFormatEvents">
            <summary>
            Should events be triggered for each cell in this row?
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.FormatCellEventArgs">
            <summary>
            Parameter block for FormatCellEvent
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.FormatCellEventArgs.ColumnIndex">
            <summary>
            Gets the column index of the cell
            </summary>
            <remarks>This is -1 when the view is not in details view.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.FormatCellEventArgs.Column">
            <summary>
            Gets the column of the cell 
            </summary>
            <remarks>This is null when the view is not in details view.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.FormatCellEventArgs.SubItem">
            <summary>
            Gets the subitem of the cell
            </summary>
            <remarks>This is null when the view is not in details view</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.FormatCellEventArgs.CellValue">
            <summary>
            Gets the model value that is being displayed by the cell.
            </summary>
            <remarks>This is null when the view is not in details view</remarks>
        </member>
        <member name="T:DevGrep.Controls.DLV.HyperlinkClickedEventArgs">
            <summary>
            The event args when a hyperlink is clicked
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HyperlinkClickedEventArgs.Url">
            <summary>
            Gets the url that was associated with this cell.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.HotItemChangedEventArgs">
            <summary>
            The event args when the hot item changed
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HotItemChangedEventArgs.Handled">
            <summary>
            Gets or set if this event completelely handled. If it was, no further processing
            will be done for it.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HotItemChangedEventArgs.HotCellHitLocation">
            <summary>
            Gets the part of the cell that the mouse is over
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HotItemChangedEventArgs.HotColumnIndex">
            <summary>
            Gets the index of the column that the mouse is over
            </summary>
            <remarks>In non-details view, this will always be 0.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.HotItemChangedEventArgs.HotRowIndex">
            <summary>
            Gets the index of the row that the mouse is over
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HotItemChangedEventArgs.OldHotCellHitLocation">
            <summary>
            Gets the part of the cell that the mouse used to be over
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HotItemChangedEventArgs.OldHotColumnIndex">
            <summary>
            Gets the index of the column that the mouse used to be over
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HotItemChangedEventArgs.OldHotRowIndex">
            <summary>
            Gets the index of the row that the mouse used to be over
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.SubItemCheckingEventArgs">
            <summary>
            Let the world know that a checkbox on a subitem is changing
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.SubItemCheckingEventArgs.#ctor(DevGrep.Controls.DLV.OLVColumn,DevGrep.Controls.DLV.OLVListItem,System.Int32,System.Windows.Forms.CheckState,System.Windows.Forms.CheckState)">
            <summary>
            Create a new event block
            </summary>
            <param name="column"></param>
            <param name="item"></param>
            <param name="subItemIndex"></param>
            <param name="currentValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="P:DevGrep.Controls.DLV.SubItemCheckingEventArgs.Column">
            <summary>
            The column of the cell that is having its checkbox changed.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.SubItemCheckingEventArgs.RowObject">
            <summary>
            The model object of the row of the cell that is having its checkbox changed.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.SubItemCheckingEventArgs.ListViewItem">
            <summary>
            The listview item of the cell that is having its checkbox changed.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.SubItemCheckingEventArgs.CurrentValue">
            <summary>
            The current check state of the cell.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.SubItemCheckingEventArgs.NewValue">
            <summary>
            The proposed new check state of the cell.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.SubItemCheckingEventArgs.SubItemIndex">
            <summary>
            The index of the cell that is going to be or has been edited.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.CreateGroupsEventArgs">
            <summary>
            This event argument block is used when groups are created for a list.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.CreateGroupsEventArgs.#ctor(DevGrep.Controls.DLV.GroupingParameters)">
            <summary>
            Create a CreateGroupsEventArgs
            </summary>
            <param name="parms"></param>
        </member>
        <member name="P:DevGrep.Controls.DLV.CreateGroupsEventArgs.Parameters">
            <summary>
            Gets the settings that control the creation of groups
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.CreateGroupsEventArgs.Groups">
            <summary>
            Gets or sets the groups that should be used
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.CreateGroupsEventArgs.Canceled">
            <summary>
            Has this event been cancelled by the event handler?
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.GroupTaskClickedEventArgs">
            <summary>
            This event argument block is used when the text of a group task is clicked
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.GroupTaskClickedEventArgs.#ctor(DevGrep.Controls.DLV.OLVGroup)">
            <summary>
            Create a GroupTaskClickedEventArgs
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:DevGrep.Controls.DLV.GroupTaskClickedEventArgs.Group">
            <summary>
            Gets which group was clicked
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.TreeBranchExpandingEventArgs">
            <summary>
            This event argument block is used when a branch of a tree is about to be expanded
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeBranchExpandingEventArgs.#ctor(System.Object,DevGrep.Controls.DLV.OLVListItem)">
            <summary>
            Create a new event args
            </summary>
            <param name="model"></param>
            <param name="item"></param>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeBranchExpandingEventArgs.Model">
            <summary>
            Gets the model that is about to expand
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeBranchExpandingEventArgs.Item">
            <summary>
            Gets the OLVListItem that is about to be expanded
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.TreeBranchExpandedEventArgs">
            <summary>
            This event argument block is used when a branch of a tree has just been expanded
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeBranchExpandedEventArgs.#ctor(System.Object,DevGrep.Controls.DLV.OLVListItem)">
            <summary>
            Create a new event args
            </summary>
            <param name="model"></param>
            <param name="item"></param>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeBranchExpandedEventArgs.Model">
            <summary>
            Gets the model that is was expanded
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeBranchExpandedEventArgs.Item">
            <summary>
            Gets the OLVListItem that was expanded
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.TreeBranchCollapsingEventArgs">
            <summary>
            This event argument block is used when a branch of a tree is about to be collapsed
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeBranchCollapsingEventArgs.#ctor(System.Object,DevGrep.Controls.DLV.OLVListItem)">
            <summary>
            Create a new event args
            </summary>
            <param name="model"></param>
            <param name="item"></param>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeBranchCollapsingEventArgs.Model">
            <summary>
            Gets the model that is about to collapse
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeBranchCollapsingEventArgs.Item">
            <summary>
            Gets the OLVListItem that is about to be collapsed
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.TreeBranchCollapsedEventArgs">
            <summary>
            This event argument block is used when a branch of a tree has just been collapsed
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TreeBranchCollapsedEventArgs.#ctor(System.Object,DevGrep.Controls.DLV.OLVListItem)">
            <summary>
            Create a new event args
            </summary>
            <param name="model"></param>
            <param name="item"></param>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeBranchCollapsedEventArgs.Model">
            <summary>
            Gets the model that is was collapsed
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TreeBranchCollapsedEventArgs.Item">
            <summary>
            Gets the OLVListItem that was collapsed
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.GroupingParameters">
            <summary>
            This class contains all the settings used when groups are created
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.GroupingParameters.#ctor(DevGrep.Controls.DLV.ObjectListView,DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.SortOrder,DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.SortOrder,DevGrep.Controls.DLV.OLVColumn,System.Windows.Forms.SortOrder,System.String,System.String,System.Boolean)">
            <summary>
            Create a GroupingParameters
            </summary>
            <param name="olv"></param>
            <param name="groupByColumn"></param>
            <param name="groupByOrder"></param>
            <param name="column"></param>
            <param name="order"></param>
            <param name="secondaryColumn"></param>
            <param name="secondaryOrder"></param>
            <param name="titleFormat"></param>
            <param name="titleSingularFormat"></param>
            <param name="sortItemsByPrimaryColumn"></param>
        </member>
        <member name="P:DevGrep.Controls.DLV.GroupingParameters.ListView">
            <summary>
            Gets or sets the ObjectListView being grouped
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.GroupingParameters.GroupByColumn">
            <summary>
            Gets or sets the column used to create groups
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.GroupingParameters.GroupByOrder">
            <summary>
            In what order will the groups themselves be sorted?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.GroupingParameters.GroupComparer">
            <summary>
            If this is set, this comparer will be used to order the groups
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.GroupingParameters.ItemComparer">
            <summary>
            If this is set, this comparer will be used to order items within each group
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.GroupingParameters.PrimarySort">
            <summary>
            Gets or sets the column that will be the primary sort
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.GroupingParameters.PrimarySortOrder">
            <summary>
            Gets or sets the ordering for the primary sort
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.GroupingParameters.SecondarySort">
            <summary>
            Gets or sets the column used for secondary sorting
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.GroupingParameters.SecondarySortOrder">
            <summary>
            Gets or sets the ordering for the secondary sort
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.GroupingParameters.TitleFormat">
            <summary>
            Gets or sets the title format used for groups with zero or more than one element
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.GroupingParameters.TitleSingularFormat">
            <summary>
            Gets or sets the title format used for groups with only one element
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.GroupingParameters.SortItemsByPrimaryColumn">
            <summary>
            Gets or sets whether the items should be sorted by the primary column
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.GroupState">
            <summary>
            These values indicate what is the state of the group. These values
            are taken directly from the SDK and many are not used by ObjectListView.
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.GroupState.LVGS_NORMAL">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.GroupState.LVGS_COLLAPSED">
            <summary>
            Collapsed
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.GroupState.LVGS_HIDDEN">
            <summary>
            Hidden
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.GroupState.LVGS_NOHEADER">
            <summary>
            NoHeader
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.GroupState.LVGS_COLLAPSIBLE">
            <summary>
            Can be collapsed
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.GroupState.LVGS_FOCUSED">
            <summary>
            Has focus
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.GroupState.LVGS_SELECTED">
            <summary>
            Is Selected
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.GroupState.LVGS_SUBSETED">
            <summary>
            Is subsetted
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.GroupState.LVGS_SUBSETLINKFOCUSED">
            <summary>
            Subset link has focus
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.GroupState.LVGS_ALL">
            <summary>
            All styles
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.GroupMask">
            <summary>
            This mask indicates which members of a LVGROUP have valid data. These values
            are taken directly from the SDK and many are not used by ObjectListView.
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.GroupMask.LVGF_NONE">
            <summary>
            No mask
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.GroupMask.LVGF_HEADER">
            <summary>
            Group has header
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.GroupMask.LVGF_FOOTER">
            <summary>
            Group has footer
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.GroupMask.LVGF_STATE">
            <summary>
            Group has state
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.GroupMask.LVGF_ALIGN">
            <summary>
            
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.GroupMask.LVGF_GROUPID">
            <summary>
            
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.GroupMask.LVGF_SUBTITLE">
            <summary>
            pszSubtitle is valid
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.GroupMask.LVGF_TASK">
            <summary>
            pszTask is valid
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.GroupMask.LVGF_DESCRIPTIONTOP">
            <summary>
            pszDescriptionTop is valid
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.GroupMask.LVGF_DESCRIPTIONBOTTOM">
            <summary>
            pszDescriptionBottom is valid
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.GroupMask.LVGF_TITLEIMAGE">
            <summary>
            iTitleImage is valid
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.GroupMask.LVGF_EXTENDEDIMAGE">
            <summary>
            iExtendedImage is valid
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.GroupMask.LVGF_ITEMS">
            <summary>
            iFirstItem and cItems are valid
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.GroupMask.LVGF_SUBSET">
            <summary>
            pszSubsetTitle is valid
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.GroupMask.LVGF_SUBSETITEMS">
            <summary>
            readonly, cItems holds count of items in visible subset, iFirstItem is valid
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.GroupMetricsMask">
            <summary>
            This mask indicates which members of a GROUPMETRICS structure are valid
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.GroupMetricsMask.LVGMF_NONE">
            <summary>
            
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.GroupMetricsMask.LVGMF_BORDERSIZE">
            <summary>
            
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.GroupMetricsMask.LVGMF_BORDERCOLOR">
            <summary>
            
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.GroupMetricsMask.LVGMF_TEXTCOLOR">
            <summary>
            
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.OLVGroup">
            <summary>
            Instances of this class enhance the capabilities of a normal ListViewGroup,
            enabling the functionality that was released in v6 of the common controls.
            </summary>
            <remarks>
            <para>
            In this implementation (2009-09), these objects are essentially passive.
            Setting properties does not automatically change the associated group in
            the listview. Collapsed and Collapsible are two exceptions to this and 
            give immediate results.
            </para>
            <para>
            This really should be a subclass of ListViewGroup, but that class is 
            sealed (why is that?). So this class provides the same interface as a
            ListViewGroup, plus many other new properties.
            </para>
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVGroup.#ctor">
            <summary>
            Create an OLVGroup
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVGroup.#ctor(System.String)">
            <summary>
            Create a group with the given title
            </summary>
            <param name="header">Title of the group</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVGroup.GetImageIndex(System.Object)">
            <summary>
            Calculate the index into the group image list of the given image selector
            </summary>
            <param name="imageSelector"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVGroup.ToString">
            <summary>
            Convert this object to a string representation
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVGroup.InsertGroupNewStyle(DevGrep.Controls.DLV.ObjectListView)">
            <summary>
            Insert a native group into the underlying Windows control,
            *without* using a ListViewGroup
            </summary>
            <param name="olv"></param>
            <remarks>This is used when creating virtual groups</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVGroup.InsertGroupOldStyle(DevGrep.Controls.DLV.ObjectListView)">
            <summary>
            Insert a native group into the underlying control via a ListViewGroup
            </summary>
            <param name="olv"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVGroup.SetItemsOldStyle">
            <summary>
            Change the members of the group to match the current contents of Items,
            using a ListViewGroup
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVGroup.AsNativeGroup(System.Boolean)">
            <summary>
            Create a native LVGROUP structure that matches this group
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVGroup.GetState">
            <summary>
            Get the current state of this group from the underlying control
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVGroup.SetState(DevGrep.Controls.DLV.GroupState,DevGrep.Controls.DLV.GroupState)">
            <summary>
            Get the current state of this group from the underlying control
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVGroup.SetGroupSpacing">
            <summary>
            Modify the space between groups
            </summary>
            <returns></returns>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVGroup.BottomDescription">
            <summary>
            Gets or sets the bottom description of the group
            </summary>
            <remarks>
            Descriptions only appear when group is centered and there is a title image
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVGroup.Collapsed">
            <summary>
            Gets or sets whether or not this group is collapsed
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVGroup.Collapsible">
            <summary>
            Gets or sets whether or not this group can be collapsed
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVGroup.Contents">
            <summary>
            Gets or sets some representation of the contents of this group
            </summary>
            <remarks>This is user defined (like Tag)</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVGroup.Created">
            <summary>
            Gets whether this group has been created.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVGroup.ExtendedImage">
            <summary>
            Gets or sets the int or string that will select the extended image to be shown against the title
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVGroup.Footer">
            <summary>
            Gets or sets the footer of the group
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVGroup.GroupId">
            <summary>
            Gets the internal id of our associated ListViewGroup.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVGroup.Header">
            <summary>
            Gets or sets the header of the group
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVGroup.HeaderAlignment">
            <summary>
            Gets or sets the horizontal alignment of the group header
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVGroup.Id">
            <summary>
            Gets or sets the internally created id of the group
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVGroup.Items">
            <summary>
            Gets or sets ListViewItems that are members of this group
            </summary>
            <remarks>Listener of the BeforeCreatingGroups event can populate this collection.
            It is only used on non-virtual lists.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVGroup.Key">
            <summary>
            Gets or sets the key that was used to partition objects into this group
            </summary>
            <remarks>This is user defined (like Tag)</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVGroup.ListView">
            <summary>
            Gets the ObjectListView that this group belongs to
            </summary>
            <remarks>If this is null, the group has not yet been created.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVGroup.Name">
            <summary>
            Gets or sets the name of the group
            </summary>
            <remarks>As of 2009-09-01, this property is not used.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVGroup.SubsetTitle">
            <summary>
            Gets or sets the text that will show that this group is subsetted
            </summary>
            <remarks>
            As of WinSDK v7.0, subsetting of group is officially unimplemented.
            We can get around this using undocumented interfaces and may do so.
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVGroup.Subtitle">
            <summary>
            Gets or set the subtitleof the task
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVGroup.SortValue">
            <summary>
            Gets or sets the value by which this group will be sorted.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVGroup.State">
            <summary>
            Gets or sets the state of the group
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVGroup.StateMask">
            <summary>
            Gets or sets which bits of State are valid
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVGroup.Subseted">
            <summary>
            Gets or sets whether this group is showing only a subset of its elements
            </summary>
            <remarks>
            As of WinSDK v7.0, this property officially does nothing.
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVGroup.Tag">
            <summary>
            Gets or sets the user-defined data attached to this group
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVGroup.Task">
            <summary>
            Gets or sets the task of this group
            </summary>
            <remarks>This task is the clickable text that appears on the right margin
            of the group header.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVGroup.TitleImage">
            <summary>
            Gets or sets the int or string that will select the image to be shown against the title
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVGroup.TopDescription">
            <summary>
            Gets or sets the top description of the group
            </summary>
            <remarks>
            Descriptions only appear when group is centered and there is a title image
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVGroup.VirtualItemCount">
            <summary>
            Gets or sets the number of items that are within this group.
            </summary>
            <remarks>This should only be used for virtual groups.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVGroup.ListViewGroup">
            <summary>
            Gets or sets the ListViewGroup that is shadowed by this group.
            </summary>
            <remarks>For virtual groups, this will always be null.</remarks>
        </member>
        <member name="T:DevGrep.Controls.DLV.Munger">
            <summary>
            An instance of Munger gets a value from or puts a value into a target object. The property
            to be peeked (or poked) is determined from a string. The peeking or poking is done using reflection.
            </summary>
            <remarks>
            Name of the aspect to be peeked can be a field, property or parameterless method. The name of an
            aspect to poke can be a field, writable property or single parameter method.
            <para>
            Aspect names can be dotted to chain a series of references. 
            </para>
            <example>Order.Customer.HomeAddress.State</example>
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.Munger.#ctor">
            <summary>
            Create a do nothing Munger
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.Munger.#ctor(System.String)">
            <summary>
            Create a Munger that works on the given aspect name
            </summary>
            <param name="aspectName">The name of the </param>
        </member>
        <member name="M:DevGrep.Controls.DLV.Munger.PutProperty(System.Object,System.String,System.Object)">
            <summary>
            A helper method to put the given value into the given aspect of the given object.
            </summary>
            <remarks>This method catches and silently ignores any errors that occur
            while modifying the target object</remarks>
            <param name="target">The object to be modified</param>
            <param name="propertyName">The name of the property/field to be modified</param>
            <param name="value">The value to be assigned</param>
            <returns>Did the modification work?</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.Munger.GetValue(System.Object)">
            <summary>
            Extract the value indicated by our AspectName from the given target.
            </summary>
            <remarks>If the aspect name is null or empty, this will return null.</remarks>
            <param name="target">The object that will be peeked</param>
            <returns>The value read from the target</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.Munger.PutValue(System.Object,System.Object)">
            <summary>
            Poke the given value into the given target indicated by our AspectName.
            </summary>
            <remarks>
            <para>
            If the AspectName is a dotted path, all the selectors bar the last
            are used to find the object that should be updated, and the last
            selector is used as the property to update on that object.
            </para>
            <para>
            So, if 'target' is a Person and the AspectName is "HomeAddress.Postcode",
            this method will first fetch "HomeAddress" property, and then try to set the
            "Postcode" property on the home address object.
            </para>
            </remarks>
            <param name="target">The object that will be poked</param>
            <param name="value">The value that will be poked into the target</param>
            <returns>bool indicating whether the put worked</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.Munger.BuildParts(System.String)">
            <summary>
            Convert a possibly dotted AspectName into a list of SimpleMungers
            </summary>
            <param name="aspect"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.Munger.EvaluateParts(System.Object,System.Collections.Generic.IList{DevGrep.Controls.DLV.SimpleMunger})">
            <summary>
            Evaluate the given chain of SimpleMungers against an initial target.
            </summary>
            <param name="target"></param>
            <param name="parts"></param>
            <returns></returns>
        </member>
        <member name="P:DevGrep.Controls.DLV.Munger.AspectName">
            <summary>
            The name of the aspect that is to be peeked or poked.
            </summary>
            <remarks>
            <para>
            This name can be a field, property or parameter-less method.
            </para>
            <para>
            The name can be dotted, which chains references. If any link in the chain returns
            null, the entire chain is considered to return null.
            </para>
            </remarks>
            <example>"DateOfBirth"</example>
            <example>"Owner.HomeAddress.Postcode"</example>
        </member>
        <member name="P:DevGrep.Controls.DLV.Munger.Parts">
            <summary>
            Gets the list of SimpleMungers that match our AspectName
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.SimpleMunger">
            <summary>
            A SimpleMunger deals with a single property/field/method on its target.
            </summary>
            <remarks>
            Munger uses a chain of these resolve a dotted aspect name.
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleMunger.#ctor(System.String)">
            <summary>
            Create a SimpleMunger
            </summary>
            <param name="aspectName"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleMunger.GetValue(System.Object)">
            <summary>
            Get a value from the given target
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.SimpleMunger.PutValue(System.Object,System.Object)">
            <summary>
            Poke the given value into the given target indicated by our AspectName.
            </summary>
            <param name="target">The object that will be poked</param>
            <param name="value">The value that will be poked into the target</param>
            <returns>bool indicating if the put worked</returns>
        </member>
        <member name="P:DevGrep.Controls.DLV.SimpleMunger.AspectName">
            <summary>
            The name of the aspect that is to be peeked or poked.
            </summary>
            <remarks>
            <para>
            This name can be a field, property or method. 
            When using a method to get a value, the method must be parameter-less.
            When using a method to set a value, the method must accept 1 parameter.
            </para>
            <para>
            It cannot be a dotted name.
            </para>
            </remarks>
        </member>
        <member name="T:DevGrep.Controls.DLV.MungerException">
            <summary>
            These exceptions are raised when a munger finds something it cannot process
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.MungerException.#ctor(DevGrep.Controls.DLV.SimpleMunger,System.Object,System.Exception)">
            <summary>
            Create a MungerException
            </summary>
            <param name="munger"></param>
            <param name="target"></param>
            <param name="ex"></param>
        </member>
        <member name="P:DevGrep.Controls.DLV.MungerException.Munger">
            <summary>
            Get the munger that raised the exception
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.MungerException.Target">
            <summary>
            Gets the target that threw the exception
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.NativeMethods">
            <summary>
            Wrapper for all native method calls on ListView controls
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.NativeMethods.SetBackgroundImage(System.Windows.Forms.ListView,System.Drawing.Image,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Put an image under the ListView.
            </summary>
            <remarks>
            <para>
            The ListView must have its handle created before calling this.
            </para>
            <para>
            This doesn't work very well. Specifically, it doesn't play well with owner drawn, 
            and grid lines are drawn over it.
            </para>
            </remarks>
            <param name="lv"></param>
            <param name="image">The image to be used as the background. If this is null, any existing background image will be cleared.</param>
            <param name="isWatermark">If this is true, the image is pinned to the bottom right and does not scroll. The other parameters are ignored</param>
            <param name="isTiled">If this is true, the image will be tiled to fill the whole control background. The offset parameters will be ignored.</param>
            <param name="xOffset">If both watermark and tiled are false, this indicates the horizontal percentage where the image will be placed. 0 is absolute left, 100 is absolute right.</param>
            <param name="yOffset">If both watermark and tiled are false, this indicates the vertical percentage where the image will be placed.</param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.NativeMethods.ForceSubItemImagesExStyle(System.Windows.Forms.ListView)">
            <summary>
            Make sure the ListView has the extended style that says to display subitem images.
            </summary>
            <remarks>This method must be called after any .NET call that update the extended styles
            since they seem to erase this setting.</remarks>
            <param name="list">The listview to send a m to</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.NativeMethods.SetExtendedStyle(System.Windows.Forms.ListView,System.Int32,System.Int32)">
            <summary>
            Make sure the ListView has the extended style that says to display subitem images.
            </summary>
            <remarks>This method must be called after any .NET call that update the extended styles
            since they seem to erase this setting.</remarks>
            <param name="list">The listview to send a m to</param>
            <param name="style"></param>
            <param name="styleMask"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.NativeMethods.GetCountPerPage(System.Windows.Forms.ListView)">
            <summary>
            Calculates the number of items that can fit vertically in the visible area of a list-view (which
            must be in details or list view.
            </summary>
            <param name="list">The listView</param>
            <returns>Number of visible items per page</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.NativeMethods.SetSubItemImage(System.Windows.Forms.ListView,System.Int32,System.Int32,System.Int32)">
            <summary>
            For the given item and subitem, make it display the given image
            </summary>
            <param name="list">The listview to send a m to</param>
            <param name="itemIndex">row number (0 based)</param>
            <param name="subItemIndex">subitem (0 is the item itself)</param>
            <param name="imageIndex">index into the image list</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.NativeMethods.SetColumnImage(System.Windows.Forms.ListView,System.Int32,System.Windows.Forms.SortOrder,System.Int32)">
            <summary>
            Setup the given column of the listview to show the given image to the right of the text.
            If the image index is -1, any previous image is cleared
            </summary>
            <param name="list">The listview to send a m to</param>
            <param name="columnIndex">Index of the column to modifiy</param>
            <param name="order"></param>
            <param name="imageIndex">Index into the small image list</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.NativeMethods.HasBuiltinSortIndicators">
            <summary>
            Does this version of the operating system have builtin sort indicators?
            </summary>
            <returns>Are there builtin sort indicators</returns>
            <remarks>XP and later have these</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.NativeMethods.GetUpdateRect(System.Windows.Forms.Control)">
            <summary>
            Return the bounds of the update region on the given control.
            </summary>
            <remarks>The BeginPaint() system call validates the update region, effectively wiping out this information.
            So this call has to be made before the BeginPaint() call.</remarks>
            <param name="cntl">The control whose update region is be calculated</param>
            <returns>A rectangle</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.NativeMethods.ValidateRect(System.Windows.Forms.Control,System.Drawing.Rectangle)">
            <summary>
            Validate an area of the given control. A validated area will not be repainted at the next redraw.
            </summary>
            <param name="cntl">The control to be validated</param>
            <param name="r">The area of the control to be validated</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.NativeMethods.SelectAllItems(System.Windows.Forms.ListView)">
            <summary>
            Select all rows on the given listview
            </summary>
            <param name="list">The listview whose items are to be selected</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.NativeMethods.DeselectAllItems(System.Windows.Forms.ListView)">
            <summary>
            Deselect all rows on the given listview
            </summary>
            <param name="list">The listview whose items are to be deselected</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.NativeMethods.SetItemState(System.Windows.Forms.ListView,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the item state on the given item
            </summary>
            <param name="list">The listview whose item's state is to be changed</param>
            <param name="itemIndex">The index of the item to be changed</param>
            <param name="mask">Which bits of the value are to be set?</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.NativeMethods.Scroll(System.Windows.Forms.ListView,System.Int32,System.Int32)">
            <summary>
            Scroll the given listview by the given deltas
            </summary>
            <param name="list"></param>
            <param name="dx"></param>
            <param name="dy"></param>
            <returns>true if the scroll succeeded</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.NativeMethods.GetHeaderControl(System.Windows.Forms.ListView)">
            <summary>
            Return the handle to the header control on the given list
            </summary>
            <param name="list">The listview whose header control is to be returned</param>
            <returns>The handle to the header control</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.NativeMethods.GetColumnSides(DevGrep.Controls.DLV.ObjectListView,System.Int32)">
            <summary>
            Return the edges of the given column.
            </summary>
            <param name="lv"></param>
            <param name="columnIndex"></param>
            <returns>A Point holding the left and right co-ords of the column.
            -1 means that the sides could not be retrieved.</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.NativeMethods.GetScrolledColumnSides(System.Windows.Forms.ListView,System.Int32)">
            <summary>
            Return the edges of the given column.
            </summary>
            <param name="lv"></param>
            <param name="columnIndex"></param>
            <returns>A Point holding the left and right co-ords of the column.
            -1 means that the sides could not be retrieved.</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.NativeMethods.GetColumnUnderPoint(System.IntPtr,System.Drawing.Point)">
            <summary>
            Return the index of the column of the header that is under the given point.
            Return -1 if no column is under the pt
            </summary>
            <param name="handle">The list we are interested in</param>
            <param name="pt">The client co-ords</param>
            <returns>The index of the column under the point, or -1 if no column header is under that point</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.NativeMethods.GetDividerUnderPoint(System.IntPtr,System.Drawing.Point)">
            <summary>
            Return the index of the divider under the given point. Return -1 if no divider is under the pt
            </summary>
            <param name="handle">The list we are interested in</param>
            <param name="pt">The client co-ords</param>
            <returns>The index of the divider under the point, or -1 if no divider is under that point</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.NativeMethods.GetScrollPosition(System.Windows.Forms.ListView,System.Boolean)">
            <summary>
            Get the scroll position of the given scroll bar
            </summary>
            <param name="lv"></param>
            <param name="horizontalBar"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.NativeMethods.ChangeZOrder(System.Windows.Forms.IWin32Window,System.Windows.Forms.IWin32Window)">
            <summary>
            Change the z-order to the window 'toBeMoved' so it appear directly on top of 'reference'
            </summary>
            <param name="toBeMoved"></param>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.NativeMethods.MakeTopMost(System.Windows.Forms.IWin32Window)">
            <summary>
            Make the given control/window a topmost window
            </summary>
            <param name="toBeMoved"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.NativeMethods.ShowWithoutActivate(System.Windows.Forms.IWin32Window)">
            <summary>
            Show the given window without activating it
            </summary>
            <param name="win">The window to show</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.NativeMethods.SetSelectedColumn(System.Windows.Forms.ListView,System.Windows.Forms.ColumnHeader)">
            <summary>
            Mark the given column as being selected.
            </summary>
            <param name="objectListView"></param>
            <param name="value">The OLVColumn or null to clear</param>
            <remarks>
            This method works, but it prevents subitems in the given column from having
            back colors. 
            </remarks>
        </member>
        <member name="T:DevGrep.Controls.DLV.NullableDictionary`2">
            <summary>
            A simple-minded implementation of a Dictionary that can handle null as a key.
            </summary>
            <typeparam name="TKey">The type of the dictionary key</typeparam>
            <typeparam name="TValue">The type of the values to be stored</typeparam>
            <remarks>This is not a full implementation and is only meant to handle
            collecting groups by their keys, since groups can have null as a key value.</remarks>
        </member>
        <member name="T:DevGrep.Controls.DLV.OLVListItem">
            <summary>
            OLVListItems are specialized ListViewItems that know which row object they came from,
            and the row index at which they are displayed, even when in group view mode. They
            also know the image they should draw against themselves
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVListItem.#ctor(System.Object)">
            <summary>
            Create a OLVListItem for the given row object
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVListItem.#ctor(System.Object,System.String,System.Object)">
            <summary>
            Create a OLVListItem for the given row object, represented by the given string and image
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVListItem.GetSubItem(System.Int32)">
            <summary>
            Return the sub item at the given index
            </summary>
            <param name="index">Index of the subitem to be returned</param>
            <returns>An OLVListSubItem</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVListItem.GetSubItemBounds(System.Int32)">
            <summary>
            Return bounds of the given subitem
            </summary>
            <remarks>This correctly calculates the bounds even for column 0.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVListItem.Bounds">
            <summary>
            Gets the bounding rectangle of the item, including all subitems
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVListItem.Checked">
            <summary>
            Gets or sets the checkedness of this item.
            </summary>
            <remarks>
            Virtual lists don't handle checkboxes well, so we have to intercept attempts to change them
            through the items, and change them into something that will work.
            Unfortuneately, this won't work if this property is set through the base class, since
            the property is not declared as virtual.
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVListItem.CheckState">
            <summary>
            Enable tri-state checkbox.
            </summary>
            <remarks>.NET's Checked property was not built to handle tri-state checkboxes,
            and will return True for both Checked and Indeterminate states.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVListItem.HasDecoration">
            <summary>
            Gets if this item has any decorations set for it.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVListItem.Decoration">
            <summary>
            Gets or sets the decoration that will be drawn over this item
            </summary>
            <remarks>Setting this replaces all other decorations</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVListItem.Decorations">
            <summary>
            Gets the collection of decorations that will be drawn over this item
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVListItem.ImageSelector">
            <summary>
            Get or set the image that should be shown against this item
            </summary>
            <remarks><para>This can be an Image, a string or an int. A string or an int will
            be used as an index into the small image list.</para></remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVListItem.RowObject">
            <summary>
            Gets or sets the the model object that is source of the data for this list item.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.OLVListSubItem">
            <summary>
            A ListViewSubItem that knows which image should be drawn against it.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVListSubItem.#ctor">
            <summary>
            Create a OLVListSubItem
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVListSubItem.#ctor(System.Object,System.String,System.Object)">
            <summary>
            Create a OLVListSubItem that shows the given string and image
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.OLVListSubItem.AnimationState">
            <summary>
            Return the state of the animatation of the image on this subitem.
            Null means there is either no image, or it is not an animation
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVListSubItem.ModelValue">
            <summary>
            Gets or sets the model value is being displayed by this subitem.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVListSubItem.HasDecoration">
            <summary>
            Gets if this subitem has any decorations set for it.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVListSubItem.Decoration">
            <summary>
            Gets or sets the decoration that will be drawn over this item
            </summary>
            <remarks>Setting this replaces all other decorations</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVListSubItem.Decorations">
            <summary>
            Gets the collection of decorations that will be drawn over this item
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVListSubItem.ImageSelector">
            <summary>
            Get or set the image that should be shown against this item
            </summary>
            <remarks><para>This can be an Image, a string or an int. A string or an int will
            be used as an index into the small image list.</para></remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVListSubItem.Url">
            <summary>
            Gets or sets the url that should be invoked when this subitem is clicked
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.HitTestLocation">
            <summary>
            An indication of where a hit was within ObjectListView cell
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.HitTestLocation.Nothing">
            <summary>
            Nowhere
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.HitTestLocation.Text">
            <summary>
            On the text
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.HitTestLocation.Image">
            <summary>
            On the image
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.HitTestLocation.CheckBox">
            <summary>
            On the checkbox
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.HitTestLocation.ExpandButton">
            <summary>
            On the expand button (TreeListView)
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.HitTestLocation.InCell">
            <summary>
            in the cell but not in any more specific location
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.HitTestLocation.UserDefined">
            <summary>
            UserDefined location1 (used for custom renderers)
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.OlvListViewHitTestInfo">
            <summary>
            Instances of this class encapsulate the information gathered during a OlvHitTest()
            operation.
            </summary>
            <remarks>Custom renderers can use HitTestLocation.UserDefined and the UserData
            object to store more specific locations for use during event handlers.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.OlvListViewHitTestInfo.#ctor(System.Windows.Forms.ListViewHitTestInfo)">
            <summary>
            Create a OlvListViewHitTestInfo
            </summary>
            <param name="hti"></param>
        </member>
        <member name="F:DevGrep.Controls.DLV.OlvListViewHitTestInfo.HitTestLocation">
            <summary>
            Where is the hit location?
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.OlvListViewHitTestInfo.UserData">
            <summary>
            Custom renderers can use this information to supply more details about the hit location
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OlvListViewHitTestInfo.Item">
            <summary>
            Gets the item that was hit
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OlvListViewHitTestInfo.SubItem">
            <summary>
            Gets the subitem that was hit
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OlvListViewHitTestInfo.Location">
            <summary>
            Gets the part of the subitem that was hit
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OlvListViewHitTestInfo.ListView">
            <summary>
            Gets the ObjectListView that was tested
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OlvListViewHitTestInfo.RowObject">
            <summary>
            Gets the model object that was hit
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OlvListViewHitTestInfo.RowIndex">
            <summary>
            Gets the index of the row under the hit point or -1
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OlvListViewHitTestInfo.ColumnIndex">
            <summary>
            Gets the index of the column under the hit point
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OlvListViewHitTestInfo.Column">
            <summary>
            Gets the column that was hit
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.IVirtualGroups">
            <summary>
            A IVirtualGroups is the interface that a virtual list must implement to support virtual groups
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.IVirtualGroups.GetGroups(DevGrep.Controls.DLV.GroupingParameters)">
            <summary>
            Return the list of groups that should be shown according to the given parameters
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.IVirtualGroups.GetGroupMember(DevGrep.Controls.DLV.OLVGroup,System.Int32)">
            <summary>
            Return the index of the item that appears at the given position within the given group.
            </summary>
            <param name="group"></param>
            <param name="indexWithinGroup"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.IVirtualGroups.GetGroup(System.Int32)">
            <summary>
            Return the index of the group to which the given item belongs
            </summary>
            <param name="itemIndex"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.IVirtualGroups.GetIndexWithinGroup(DevGrep.Controls.DLV.OLVGroup,System.Int32)">
            <summary>
            Return the index at which the given item is shown in the given group
            </summary>
            <param name="group"></param>
            <param name="itemIndex"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.IVirtualGroups.CacheHint(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            A hint that the given range of items are going to be required
            </summary>
            <param name="fromGroupIndex"></param>
            <param name="fromIndex"></param>
            <param name="toGroupIndex"></param>
            <param name="toIndex"></param>
        </member>
        <member name="T:DevGrep.Controls.DLV.AbstractVirtualGroups">
            <summary>
            This is a safe, do nothing implementation of a grouping strategy
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractVirtualGroups.GetGroups(DevGrep.Controls.DLV.GroupingParameters)">
            <summary>
            Return the list of groups that should be shown according to the given parameters
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractVirtualGroups.GetGroupMember(DevGrep.Controls.DLV.OLVGroup,System.Int32)">
            <summary>
            Return the index of the item that appears at the given position within the given group.
            </summary>
            <param name="group"></param>
            <param name="indexWithinGroup"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractVirtualGroups.GetGroup(System.Int32)">
            <summary>
            Return the index of the group to which the given item belongs
            </summary>
            <param name="itemIndex"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractVirtualGroups.GetIndexWithinGroup(DevGrep.Controls.DLV.OLVGroup,System.Int32)">
            <summary>
            Return the index at which the given item is shown in the given group
            </summary>
            <param name="group"></param>
            <param name="itemIndex"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractVirtualGroups.CacheHint(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            A hint that the given range of items are going to be required
            </summary>
            <param name="fromGroupIndex"></param>
            <param name="fromIndex"></param>
            <param name="toGroupIndex"></param>
            <param name="toIndex"></param>
        </member>
        <member name="T:DevGrep.Controls.DLV.FastListGroupingStrategy">
            <summary>
            Provides grouping functionality to a FastObjectListView
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.FastListGroupingStrategy.GetGroups(DevGrep.Controls.DLV.GroupingParameters)">
            <summary>
            Create groups for FastListView
            </summary>
            <param name="parmameters"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.FastListGroupingStrategy.GetGroupMember(DevGrep.Controls.DLV.OLVGroup,System.Int32)">
            <summary>
            
            </summary>
            <param name="group"></param>
            <param name="indexWithinGroup"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.FastListGroupingStrategy.GetGroup(System.Int32)">
            <summary>
            
            </summary>
            <param name="itemIndex"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.FastListGroupingStrategy.GetIndexWithinGroup(DevGrep.Controls.DLV.OLVGroup,System.Int32)">
            <summary>
            
            </summary>
            <param name="group"></param>
            <param name="itemIndex"></param>
            <returns></returns>
        </member>
        <member name="T:DevGrep.Controls.DLV.IOwnerDataCallback">
            <summary>
            This is the COM interface that a ListView must be given in order for groups in virtual lists to work.
            </summary>
            <remarks>
            This interface is NOT documented by MS. It was found on Greg Chapell's site. This means that there is
            no guarantee that it will work on future versions of Windows, nor continue to work on current ones.
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.IOwnerDataCallback.GetItemPosition(System.Int32,DevGrep.Controls.DLV.NativeMethods.POINT@)">
            <summary>
            Not sure what this does
            </summary>
            <param name="i"></param>
            <param name="pt"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.IOwnerDataCallback.SetItemPosition(System.Int32,DevGrep.Controls.DLV.NativeMethods.POINT)">
            <summary>
            Not sure what this does
            </summary>
            <param name="t"></param>
            <param name="pt"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.IOwnerDataCallback.GetItemInGroup(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get the index of the item that occurs at the n'th position of the indicated group.
            </summary>
            <param name="groupIndex">Index of the group</param>
            <param name="n">Index within the group</param>
            <param name="itemIndex">Index of the item within the whole list</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.IOwnerDataCallback.GetItemGroup(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get the index of the group to which the given item belongs
            </summary>
            <param name="itemIndex">Index of the item within the whole list</param>
            <param name="occurrenceCount">Which occurences of the item is wanted</param>
            <param name="groupIndex">Index of the group</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.IOwnerDataCallback.GetItemGroupCount(System.Int32,System.Int32@)">
            <summary>
            Get the number of groups that contain the given item
            </summary>
            <param name="itemIndex">Index of the item within the whole list</param>
            <param name="occurrenceCount">How many groups does it occur within</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.IOwnerDataCallback.OnCacheHint(DevGrep.Controls.DLV.NativeMethods.LVITEMINDEX,DevGrep.Controls.DLV.NativeMethods.LVITEMINDEX)">
            <summary>
            A hint to prepare any cache for the given range of requests
            </summary>
            <param name="i"></param>
            <param name="j"></param>
        </member>
        <member name="T:DevGrep.Controls.DLV.OwnerDataCallbackImpl">
            <summary>
            A default implementation of the IOwnerDataCallback interface
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.VirtualListVersion1DataSource">
            <summary>
            This class mimics the behavior of VirtualObjectListView v1.x.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualListVersion1DataSource.#ctor(DevGrep.Controls.DLV.VirtualObjectListView)">
            <summary>
            Creates a VirtualListVersion1DataSource
            </summary>
            <param name="listView"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualListVersion1DataSource.GetNthObject(System.Int32)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.VirtualListVersion1DataSource.SearchText(System.String,System.Int32,System.Int32,DevGrep.Controls.DLV.OLVColumn)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="first"></param>
            <param name="last"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="P:DevGrep.Controls.DLV.VirtualListVersion1DataSource.RowGetter">
            <summary>
            How will the n'th object of the data source be fetched?
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.Design.OLVColumnCollectionEditor">
            <summary>
            This class works in conjunction with the OLVColumns property to allow OLVColumns
            to be added to the ObjectListView.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.Design.OLVColumnCollectionEditor.#ctor(System.Type)">
            <summary>
            Create a OLVColumnCollectionEditor
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.Design.OLVColumnCollectionEditor.CreateCollectionItemType">
            <summary>
            What type of object does this editor create?
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.Design.OLVColumnCollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edit a given value
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.Design.OLVColumnCollectionEditor.GetDisplayText(System.Object)">
            <summary>
            What text should be shown in the list for the given object?
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:DevGrep.Controls.DLV.Design.OverlayConverter">
            <summary>
            Control how the overlay is presented in the IDE
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.OLVColumn">
            <summary>
            An OLVColumn knows which aspect of an object it should present.
            </summary>
            <remarks>
            The column knows how to:
            <list type="bullet">
            <item><description>extract its aspect from the row object</description></item>
            <item><description>convert an aspect to a string</description></item>
            <item><description>calculate the image for the row object</description></item>
            <item><description>extract a group "key" from the row object</description></item>
            <item><description>convert a group "key" into a title for the group</description></item>
            </list>
            <para>For sorting to work correctly, aspects from the same column
            must be of the same type, that is, the same aspect cannot sometimes
            return strings and other times integers.</para>
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVColumn.#ctor">
            <summary>
            Create an OLVColumn
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVColumn.#ctor(System.String,System.String)">
            <summary>
            Initialize a column to have the given title, and show the given aspect
            </summary>
            <param name="title">The title of the column</param>
            <param name="aspect">The aspect to be shown in the column</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVColumn.ConvertGroupKeyToTitle(System.Object)">
            <summary>
            For a given group value, return the string that should be used as the groups title.
            </summary>
            <param name="value">The group key that is being converted to a title</param>
            <returns>string</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVColumn.GetCheckState(System.Object)">
            <summary>
            Get the checkedness of the given object for this column
            </summary>
            <param name="rowObject">The row object that is being displayed</param>
            <returns>The checkedness of the object</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVColumn.PutCheckState(System.Object,System.Windows.Forms.CheckState)">
            <summary>
            Put the checkedness of the given object for this column
            </summary>
            <param name="rowObject">The row object that is being displayed</param>
            <param name="newState"></param>
            <returns>The checkedness of the object</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVColumn.GetAspectByName(System.Object)">
            <summary>
            For a given row object, extract the value indicated by the AspectName property of this column.
            </summary>
            <param name="rowObject">The row object that is being displayed</param>
            <returns>An object, which is the aspect named by AspectName</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVColumn.GetGroupKey(System.Object)">
            <summary>
            For a given row object, return the object that is the key of the group that this row belongs to.
            </summary>
            <param name="rowObject">The row object that is being displayed</param>
            <returns>Group key object</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVColumn.GetImage(System.Object)">
            <summary>
            For a given row object, return the image selector of the image that should displayed in this column.
            </summary>
            <param name="rowObject">The row object that is being displayed</param>
            <returns>int or string or Image. int or string will be used as index into image list. null or -1 means no image</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVColumn.GetCheckStateImage(System.Object)">
            <summary>
            Return the image that represents the check box for the given model
            </summary>
            <param name="rowObject"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVColumn.GetStringValue(System.Object)">
            <summary>
            For a given row object, return the string representation of the value shown in this column.
            </summary>
            <remarks>
            For aspects that are string (e.g. aPerson.Name), the aspect and its string representation are the same.
            For non-strings (e.g. aPerson.DateOfBirth), the string representation is very different.
            </remarks>
            <param name="rowObject"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVColumn.GetValue(System.Object)">
            <summary>
            For a given row object, return the object that is to be displayed in this column.
            </summary>
            <param name="rowObject">The row object that is being displayed</param>
            <returns>An object, which is the aspect to be displayed</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVColumn.PutAspectByName(System.Object,System.Object)">
            <summary>
            Update the given model object with the given value using the column's
            AspectName.
            </summary>
            <param name="rowObject">The model object to be updated</param>
            <param name="newValue">The value to be put into the model</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVColumn.PutValue(System.Object,System.Object)">
            <summary>
            Update the given model object with the given value
            </summary>
            <param name="rowObject">The model object to be updated</param>
            <param name="newValue">The value to be put into the model</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVColumn.ValueToString(System.Object)">
            <summary>
            Convert the aspect object to its string representation.
            </summary>
            <remarks>
            If the column has been given a AspectToStringConverter, that will be used to do
            the conversion, otherwise just use ToString(). 
            The returned value will not be null. Nulls are always converted
            to empty strings.
            </remarks>
            <param name="value">The value of the aspect that should be displayed</param>
            <returns>A string representation of the aspect</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVColumn.DecideDefaultClusteringStrategy">
            <summary>
            Decide the clustering strategy that will be used for this column
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVColumn.MakeGroupies(System.Object[],System.String[])">
            <summary>
            Create groupies
            This is an untyped version to help with Generator and OLVColumn attributes
            </summary>
            <param name="values"></param>
            <param name="descriptions"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVColumn.MakeGroupies``1(``0[],System.String[])">
            <summary>
            Create groupies
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <param name="descriptions"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVColumn.MakeGroupies``1(``0[],System.String[],System.Object[])">
            <summary>
            Create groupies
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <param name="descriptions"></param>
            <param name="images"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVColumn.MakeGroupies``1(``0[],System.String[],System.Object[],System.String[])">
            <summary>
            Create groupies
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <param name="descriptions"></param>
            <param name="images"></param>
            <param name="subtitles"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVColumn.MakeGroupies``1(``0[],System.String[],System.Object[],System.String[],System.String[])">
            <summary>
            Create groupies.
            Install delegates that will group the columns aspects into progressive partitions.
            If an aspect is less than value[n], it will be grouped with description[n].
            If an aspect has a value greater than the last element in "values", it will be grouped
            with the last element in "descriptions".
            </summary>
            <param name="values">Array of values. Values must be able to be
            compared to the aspect (using IComparable)</param>
            <param name="descriptions">The description for the matching value. The last element is the default description.
            If there are n values, there must be n+1 descriptions.</param>
            <example>
            this.salaryColumn.MakeGroupies(
                new UInt32[] { 20000, 100000 },
                new string[] { "Lowly worker",  "Middle management", "Rarified elevation"});
            </example>
            <typeparam name="T"></typeparam>
            <param name="images"></param>
            <param name="subtitles"></param>
            <param name="tasks"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.OLVColumn.MakeEqualGroupies``1(``0[],System.String[],System.Object[],System.String[],System.String[])">
            <summary>
            Create groupies based on exact value matches.
            </summary>
            <remarks>
            Install delegates that will group rows into partitions based on equality of this columns aspects.
            If an aspect is equal to value[n], it will be grouped with description[n].
            If an aspect is not equal to any value, it will be grouped with "[other]".
            </remarks>
            <param name="values">Array of values. Values must be able to be
            equated to the aspect</param>
            <param name="descriptions">The description for the matching value.</param>
            <example>
            this.marriedColumn.MakeEqualGroupies(
                new MaritalStatus[] { MaritalStatus.Single, MaritalStatus.Married, MaritalStatus.Divorced, MaritalStatus.Partnered },
                new string[] { "Looking",  "Content", "Looking again", "Mostly content" });
            </example>
            <typeparam name="T"></typeparam>
            <param name="images"></param>
            <param name="subtitles"></param>
            <param name="tasks"></param>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.AspectGetter">
            <summary>
            This delegate will be used to extract a value to be displayed in this column.
            </summary>
            <remarks>
            If this is set, AspectName is ignored.
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.AspectGetterAutoGenerated">
            <summary>
            Remember if this aspect getter for this column was generated internally, and can therefore
            be regenerated at will
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.AspectName">
            <summary>
            The name of the property or method that should be called to get the value to display in this column.
            This is only used if a ValueGetterDelegate has not been given.
            </summary>
            <remarks>This name can be dotted to chain references to properties or parameter-less methods.</remarks>
            <example>"DateOfBirth"</example>
            <example>"Owner.HomeAddress.Postcode"</example>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.AspectPutter">
            <summary>
            This delegate will be used to put an edited value back into the model object.
            </summary>
            <remarks>
            This does nothing if IsEditable == false.
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.AspectToStringConverter">
            <summary>
            The delegate that will be used to translate the aspect to display in this column into a string.
            </summary>
            <remarks>If this value is set, AspectToStringFormat will be ignored.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.AspectToStringFormat">
            <summary>
            This format string will be used to convert an aspect to its string representation.
            </summary>
            <remarks>
            This string is passed as the first parameter to the String.Format() method.
            This is only used if AspectToStringConverter has not been set.</remarks>
            <example>"{0:C}" to convert a number to currency</example>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.AutoCompleteEditor">
            <summary>
            Gets or sets whether the cell editor should use AutoComplete
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.AutoCompleteEditorMode">
            <summary>
            Gets or sets whether the cell editor should use AutoComplete
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.CanBeHidden">
            <summary>
            Gets whether this column can be hidden by user actions
            </summary>
            <remarks>This take into account both the Hideable property and whether this column
            is the primary column of the listview (column 0).</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.CheckBoxes">
            <summary>
            Gets or sets whether this column will show a checkbox.
            </summary>
            <remarks>
            Setting this on column 0 has no effect. Column 0 check box is controlled
            by the CheckBoxes property on the ObjectListView itself.
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.ClusteringStrategy">
            <summary>
            Gets or sets the clustering strategy used for this column. 
            </summary>
            <remarks>
            <para>
            The clustering strategy is used to build a Filtering menu for this item. 
            If this is null, a useful default will be chosen. 
            </para>
            <para>
            To disable filtering on this colummn, set UseFiltering to false.
            </para>
            <para>
            Cluster strategies belong to a particular column. The same instance
            cannot be shared between multiple columns.
            </para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.FillsFreeSpace">
            <summary>
            Should this column resize to fill the free space in the listview?
            </summary>
            <remarks>
            <para>
            If you want two (or more) columns to equally share the available free space, set this property to True.
            If you want this column to have a larger or smaller share of the free space, you must
            set the FreeSpaceProportion property explicitly.
            </para>
            <para>
            Space filling columns are still governed by the MinimumWidth and MaximumWidth properties.
            </para>
            /// </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.FreeSpaceProportion">
            <summary>
            What proportion of the unoccupied horizontal space in the control should be given to this column?
            </summary>
            <remarks>
            <para>
            There are situations where it would be nice if a column (normally the rightmost one) would expand as
            the list view expands, so that as much of the column was visible as possible without having to scroll
            horizontally (you should never, ever make your users have to scroll anything horizontally!).
            </para>
            <para>
            A space filling column is resized to occupy a proportion of the unoccupied width of the listview (the
            unoccupied width is the width left over once all the the non-filling columns have been given their space).
            This property indicates the relative proportion of that unoccupied space that will be given to this column.
            The actual value of this property is not important -- only its value relative to the value in other columns.
            For example:
            <list type="bullet">
            <item><description>
            If there is only one space filling column, it will be given all the free space, regardless of the value in FreeSpaceProportion.
            </description></item>
            <item><description>
            If there are two or more space filling columns and they all have the same value for FreeSpaceProportion,
            they will share the free space equally.
            </description></item>
            <item><description>
            If there are three space filling columns with values of 3, 2, and 1
            for FreeSpaceProportion, then the first column with occupy half the free space, the second will
            occupy one-third of the free space, and the third column one-sixth of the free space.
            </description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.Groupable">
            <summary>
            Gets or sets whether groups will be rebuild on this columns values when this column's header is clicked.
            </summary>
            <remarks>
            <para>This setting is only used when ShowGroups is true.</para>
            <para>
            If this is false, clicking the header will not rebuild groups. It will not provide
            any feedback as to why the list is not being regrouped. It is the programmers responsibility to
            provide appropriate feedback.
            </para>
            <para>When this is false, BeforeCreatingGroups events are still fired, which can be used to allow grouping
            or give feedback, on a case by case basis.</para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.GroupFormatter">
            <summary>
            This delegate is called when a group has been created but not yet made
            into a real ListViewGroup. The user can take this opportunity to fill
            in lots of other details about the group.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.GroupKeyGetter">
            <summary>
            This delegate is called to get the object that is the key for the group
            to which the given row belongs.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.GroupKeyToTitleConverter">
            <summary>
            This delegate is called to convert a group key into a title for that group.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.GroupWithItemCountFormat">
            <summary>
            When the listview is grouped by this column and group title has an item count,
            how should the lable be formatted?
            </summary>
            <remarks>
            The given format string can/should have two placeholders:
            <list type="bullet">
            <item><description>{0} - the original group title</description></item>
            <item><description>{1} - the number of items in the group</description></item>
            </list>
            </remarks>
            <example>"{0} [{1} items]"</example>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.GroupWithItemCountFormatOrDefault">
            <summary>
            Gets this.GroupWithItemCountFormat or a reasonable default
            </summary>
            <remarks>
            If GroupWithItemCountFormat is not set, its value will be taken from the ObjectListView if possible.
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.GroupWithItemCountSingularFormat">
            <summary>
            When the listview is grouped by this column and a group title has an item count,
            how should the lable be formatted if there is only one item in the group?
            </summary>
            <remarks>
            The given format string can/should have two placeholders:
            <list type="bullet">
            <item><description>{0} - the original group title</description></item>
            <item><description>{1} - the number of items in the group (always 1)</description></item>
            </list>
            </remarks>
            <example>"{0} [{1} item]"</example>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.GroupWithItemCountSingularFormatOrDefault">
            <summary>
            Get this.GroupWithItemCountSingularFormat or a reasonable default
            </summary>
            <remarks>
            <para>If this value is not set, the values from the list view will be used</para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.HasFilterIndicator">
            <summary>
            Gets whether this column should be drawn with a filter indicator in the column header.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.HeaderDrawing">
            <summary>
            Gets or sets a delegate that will be used to own draw header column.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.HeaderFormatStyle">
            <summary>
            Gets or sets the style that will be used to draw the header for this column
            </summary>
            <remarks>This is only uses when the owning ObjectListView has HeaderUsesThemes set to false.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.HeaderFont">
            <summary>
            Gets or sets the font in which the header for this column will be drawn
            </summary>
            <remarks>This property will be made obsolete in v2.5. Use HeaderFormatStyle instead</remarks>
            <remarks>This is only uses when HeaderUsesThemes is false.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.HeaderForeColor">
            <summary>
            Gets or sets the color in which the text of the header for this column will be drawn
            </summary>
            <remarks>This property will be made obsolete in v2.5. Use HeaderFormatStyle instead</remarks>
            <remarks>This is only uses when HeaderUsesThemes is false.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.HeaderImageKey">
            <summary>
            Gets or sets whether the text values in this column will act like hyperlinks
            </summary>
            <remarks>This is only taken into account when HeaderUsesThemes is false.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.HeaderTextAlign">
            <summary>
            Gets or sets how the text of the header will be drawn?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.HeaderTextAlignAsStringAlignment">
            <summary>
            Gets the header alignment converted to a StringAlignment
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.HasHeaderImage">
            <summary>
            Gets whether or not this column has an image in the header
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.Hideable">
            <summary>
            Gets or sets whether this column can be hidden by the user.
            </summary>
            <remarks>
            <para>Column 0 can never be hidden, regardless of this setting.</para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.Hyperlink">
            <summary>
            Gets or sets whether the text values in this column will act like hyperlinks
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.ImageAspectName">
            <summary>
            This is the name of property that will be invoked to get the image selector of the
            image that should be shown in this column.
            It can return an int, string, Image or null.
            </summary>
            <remarks>
            <para>This is ignored if ImageGetter is not null.</para>
            <para>The property can use these return value to identify the image:</para>
            <list type="bullet">
            <item><description>null or -1 -- indicates no image</description></item>
            <item><description>an int -- the int value will be used as an index into the image list</description></item>
            <item><description>a String -- the string value will be used as a key into the image list</description></item>
            <item><description>an Image -- the Image will be drawn directly (only in OwnerDrawn mode)</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.ImageGetter">
            <summary>
            This delegate is called to get the image selector of the image that should be shown in this column.
            It can return an int, string, Image or null.
            </summary>
            <remarks><para>This delegate can use these return value to identify the image:</para>
            <list type="bullet">
            <item><description>null or -1 -- indicates no image</description></item>
            <item><description>an int -- the int value will be used as an index into the image list</description></item>
            <item><description>a String -- the string value will be used as a key into the image list</description></item>
            <item><description>an Image -- the Image will be drawn directly (only in OwnerDrawn mode)</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.IsEditable">
            <summary>
            Can the values shown in this column be edited?
            </summary>
            <remarks>This defaults to true, since the primary means to control the editability of a listview
            is on the listview itself. Once a listview is editable, all the columns are too, unless the
            programmer explicitly marks them as not editable</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.IsFixedWidth">
            <summary>
            Is this column a fixed width column?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.IsTileViewColumn">
            <summary>
            Get/set whether this column should be used when the view is switched to tile view.
            </summary>
            <remarks>Column 0 is always included in tileview regardless of this setting.
            Tile views do not work well with many "columns" of information. 
            Two or three works best.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.IsHeaderVertical">
            <summary>
            Gets or sets whether the text of this header should be
            rendered vertically.
            </summary>
            <remarks>
            <para>If this is true, it is a good idea to set ToolTipText to the name of the column so it's easy to read.</para>
            <para>Currently (2010-08), vertical headers are text only. They do not draw their image.</para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.IsVisible">
            <summary>
            Can this column be seen by the user?
            </summary>
            <remarks>After changing this value, you must call RebuildColumns() before the changes will be effected.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.LastDisplayIndex">
            <summary>
            Where was this column last positioned within the Detail view columns
            </summary>
            <remarks>DisplayIndex is volatile. Once a column is removed from the control,
            there is no way to discover where it was in the display order. This property
            guards that information even when the column is not in the listview's active columns.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.MaximumWidth">
            <summary>
            What is the maximum width that the user can give to this column?
            </summary>
            <remarks>-1 means there is no maximum width. Give this the same value as MinimumWidth to make a fixed width column.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.MinimumWidth">
            <summary>
            What is the minimum width that the user can give to this column?
            </summary>
            <remarks>-1 means there is no minimum width. Give this the same value as MaximumWidth to make a fixed width column.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.Renderer">
            <summary>
            Get/set the renderer that will be invoked when a cell needs to be redrawn
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.RendererDelegate">
            <summary>
            This delegate is called when a cell needs to be drawn in OwnerDrawn mode.
            </summary>
            <remarks>This method is kept primarily for backwards compatibility.
            New code should implement an IRenderer, though this property will be maintained.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.Searchable">
            <summary>
            Gets or sets whether the text in this column's cell will be used when doing text searching.
            </summary>
            <remarks>
            <para>
            If this is false, text filters will not trying searching this columns cells when looking for matches.
            </para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.ShowTextInHeader">
            <summary>
            Gets or sets whether the header for this column will include the column's Text.
            </summary>
            <remarks>
            <para>
            If this is false, the only thing rendered in the column header will be the image from <see cref="P:DevGrep.Controls.DLV.OLVColumn.HeaderImageKey"/>.
            </para>
            <para>This setting is only considered when <see cref="P:DevGrep.Controls.DLV.ObjectListView.HeaderUsesThemes"/> is false on the owning ObjectListView.</para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.Sortable">
            <summary>
            Gets or sets whether the contents of the list will be resorted when the user clicks the 
            header of this column.
            </summary>
            <remarks>
            <para>
            If this is false, clicking the header will not sort the list, but will not provide
            any feedback as to why the list is not being sorted. It is the programmers responsibility to
            provide appropriate feedback.
            </para>
            <para>When this is false, BeforeSorting events are still fired, which can be used to allow sorting
            or give feedback, on a case by case basis.</para>
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.TextAlign">
            <summary>
            Gets or sets the horizontal alignment of the contents of the column.
            </summary>
            <remarks>.NET will not allow column 0 to have any alignment except
            to the left. We can't change the basic behaviour of the listview,
            but when owner drawn, column 0 can now have other alignments.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.TextStringAlign">
            <summary>
            Gets the StringAlignment equivilent of the column text alignment
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.ToolTipText">
            <summary>
            What string should be displayed when the mouse is hovered over the header of this column?
            </summary>
            <remarks>If a HeaderToolTipGetter is installed on the owning ObjectListView, this
            value will be ignored.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.TriStateCheckBoxes">
            <summary>
            Should this column have a tri-state checkbox?
            </summary>
            <remarks>
            If this is true, the user can choose the third state (normally Indeterminate).
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.UseInitialLetterForGroup">
            <summary>
            Group objects by the initial letter of the aspect of the column
            </summary>
            <remarks>
            One common pattern is to group column by the initial letter of the value for that group.
            The aspect must be a string (obviously).
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.UseFiltering">
            <summary>
            Gets or sets whether or not this column should be user filterable
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.ValueBasedFilter">
            <summary>
            Gets or sets a filter that will only include models where the model's value
            for this column is one of the values in ValuesChosenForFiltering
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.ValuesChosenForFiltering">
            <summary>
            Gets or sets the values that will be used to generate a filter for this
            column. For a model to be included by the generated filter, its value for this column
            must be in this list. If the list is null or empty, this column will
            not be used for filtering.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.Width">
            <summary>
            What is the width of this column?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.WordWrap">
            <summary>
            Gets or set whether the contents of this column's cells should be word wrapped
            </summary>
            <remarks>If this column uses a custom IRenderer (that is, one that is not descended
            from BaseRenderer), then that renderer is responsible for implementing word wrapping.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.OLVColumn.DataType">
            <summary>
            Gets or sets the type of data shown in this column.
            </summary>
            <remarks>If this is not set, it will try to get the type
            by looking through the rows of the listview.</remarks>
        </member>
        <member name="T:DevGrep.Controls.DLV.GraphicAdornment">
            <summary>
            An adorment is the common base for overlays and decorations.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.GraphicAdornment.CalculateAlignedPosition(System.Drawing.Point,System.Drawing.Size,System.Drawing.ContentAlignment)">
            <summary>
            Calculate the location of rectangle of the given size,
            so that it's indicated corner would be at the given point.
            </summary>
            <param name="pt">The point</param>
            <param name="size"></param>
            <param name="corner">Which corner will be positioned at the reference point</param>
            <returns></returns>
            <example>CalculateAlignedPosition(new Point(50, 100), new Size(10, 20), System.Drawing.ContentAlignment.TopLeft) -> Point(50, 100)</example>
            <example>CalculateAlignedPosition(new Point(50, 100), new Size(10, 20), System.Drawing.ContentAlignment.MiddleCenter) -> Point(45, 90)</example>
            <example>CalculateAlignedPosition(new Point(50, 100), new Size(10, 20), System.Drawing.ContentAlignment.BottomRight) -> Point(40, 80)</example>
        </member>
        <member name="M:DevGrep.Controls.DLV.GraphicAdornment.CreateAlignedRectangle(System.Drawing.Rectangle,System.Drawing.Size)">
            <summary>
            Calculate a rectangle that has the given size which is positioned so that
            its alignment point is at the reference location of the given rect.
            </summary>
            <param name="r"></param>
            <param name="sz"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.GraphicAdornment.CreateAlignedRectangle(System.Drawing.Rectangle,System.Drawing.Size,System.Drawing.ContentAlignment,System.Drawing.ContentAlignment,System.Drawing.Size)">
            <summary>
            Create a rectangle of the given size which is positioned so that
            its indicated corner is at the indicated corner of the reference rect.
            </summary>
            <param name="r"></param>
            <param name="sz"></param>
            <param name="corner"></param>
            <param name="referenceCorner"></param>
            <param name="offset"></param>
            <returns></returns>
            <remarks>
            <para>Creates a rectangle so that its bottom left is at the centre of the reference:
            corner=BottomLeft, referenceCorner=MiddleCenter</para>
            <para>This is a powerful concept that takes some getting used to, but is
            very neat once you understand it.</para>
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.GraphicAdornment.CalculateCorner(System.Drawing.Rectangle,System.Drawing.ContentAlignment)">
            <summary>
            Return the point at the indicated corner of the given rectangle (it doesn't
            have to be a corner, but a named location)
            </summary>
            <param name="r">The reference rectangle</param>
            <param name="corner">Which point of the rectangle should be returned?</param>
            <returns>A point</returns>
            <example>CalculateReferenceLocation(new Rectangle(0, 0, 50, 100), System.Drawing.ContentAlignment.TopLeft) -> Point(0, 0)</example>
            <example>CalculateReferenceLocation(new Rectangle(0, 0, 50, 100), System.Drawing.ContentAlignment.MiddleCenter) -> Point(25, 50)</example>
            <example>CalculateReferenceLocation(new Rectangle(0, 0, 50, 100), System.Drawing.ContentAlignment.BottomRight) -> Point(50, 100)</example>
        </member>
        <member name="M:DevGrep.Controls.DLV.GraphicAdornment.CalculateItemBounds(DevGrep.Controls.DLV.OLVListItem,DevGrep.Controls.DLV.OLVListSubItem)">
            <summary>
            Given the item and the subitem, calculate its bounds.
            </summary>
            <param name="item"></param>
            <param name="subItem"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.GraphicAdornment.ApplyRotation(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Apply any specified rotation to the Graphic content.
            </summary>
            <param name="g">The Graphics to be transformed</param>
            <param name="r">The rotation will be around the centre of this rect</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.GraphicAdornment.UnapplyRotation(System.Drawing.Graphics)">
            <summary>
            Reverse the rotation created by ApplyRotation()
            </summary>
            <param name="g"></param>
        </member>
        <member name="P:DevGrep.Controls.DLV.GraphicAdornment.AdornmentCorner">
            <summary>
            Gets or sets the corner of the adornment that will be positioned at the reference corner
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.GraphicAdornment.Alignment">
            <summary>
            Gets or sets location within the reference rectange where the adornment will be drawn
            </summary>
            <remarks>This is a simplied interface to ReferenceCorner and AdornmentCorner </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.GraphicAdornment.Offset">
            <summary>
            Gets or sets the offset by which the position of the adornment will be adjusted
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.GraphicAdornment.ReferenceCorner">
            <summary>
            Gets or sets the point of the reference rectangle to which the adornment will be aligned.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.GraphicAdornment.Rotation">
            <summary>
            Gets or sets the degree of rotation by which the adornment will be transformed.
            The centre of rotation will be the center point of the adornment.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.GraphicAdornment.Transparency">
            <summary>
            Gets or sets the transparency of the overlay. 
            0 is completely transparent, 255 is completely opaque.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.ImageAdornment">
            <summary>
            An overlay that will draw an image over the top of the ObjectListView
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ImageAdornment.DrawImage(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw the image in its specified location
            </summary>
            <param name="g">The Graphics used for drawing</param>
            <param name="r">The bounds of the rendering</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ImageAdornment.DrawImage(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Image,System.Int32)">
            <summary>
            Draw the image in its specified location
            </summary>
            <param name="image">The image to be drawn</param>
            <param name="g">The Graphics used for drawing</param>
            <param name="r">The bounds of the rendering</param>
            <param name="transparency">How transparent should the image be (0 is completely transparent, 255 is opaque)</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ImageAdornment.DrawImage(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Image,System.Drawing.Size,System.Int32)">
            <summary>
            Draw the image in its specified location
            </summary>
            <param name="image">The image to be drawn</param>
            <param name="g">The Graphics used for drawing</param>
            <param name="r">The bounds of the rendering</param>
            <param name="sz">How big should the image be?</param>
            <param name="transparency">How transparent should the image be (0 is completely transparent, 255 is opaque)</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ImageAdornment.DrawScaledImage(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Image,System.Int32)">
            <summary>
            Draw the image in its specified location, scaled so that it is not wider
            than the given rectangle. Height is scaled proportional to the width.
            </summary>
            <param name="image">The image to be drawn</param>
            <param name="g">The Graphics used for drawing</param>
            <param name="r">The bounds of the rendering</param>
            <param name="transparency">How transparent should the image be (0 is completely transparent, 255 is opaque)</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ImageAdornment.DrawTransparentBitmap(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Image,System.Int32)">
            <summary>
            Utility to draw a bitmap transparenly.
            </summary>
            <param name="g"></param>
            <param name="r"></param>
            <param name="image"></param>
            <param name="transparency"></param>
        </member>
        <member name="P:DevGrep.Controls.DLV.ImageAdornment.Image">
            <summary>
            Gets or sets the image that will be drawn
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ImageAdornment.ShrinkToWidth">
            <summary>
            Gets or sets if the image will be shrunk to fit with its horizontal bounds
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.TextAdornment">
            <summary>
            An adornment that will draw text
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextAdornment.DrawText(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw our text with our stored configuration in relation to the given
            reference rectangle
            </summary>
            <param name="g">The Graphics used for drawing</param>
            <param name="r">The reference rectangle in relation to which the text will be drawn</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextAdornment.DrawText(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Int32)">
            <summary>
            Draw the given text with our stored configuration
            </summary>
            <param name="g">The Graphics used for drawing</param>
            <param name="r">The reference rectangle in relation to which the text will be drawn</param>
            <param name="text">The text to draw</param>
            <param name="transparency">How opaque should be text be</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextAdornment.DrawBorderedText(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Int32)">
            <summary>
            Draw the text with a border
            </summary>
            <param name="g">The Graphics used for drawing</param>
            <param name="textRect">The bounds within which the text should be drawn</param>
            <param name="text">The text to draw</param>
            <param name="transparency">How opaque should be text be</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextAdornment.CalculateTextBounds(System.Drawing.Graphics,System.Drawing.Rectangle,System.String)">
            <summary>
            Return the rectangle that will be the precise bounds of the displayed text
            </summary>
            <param name="g"></param>
            <param name="r"></param>
            <param name="text"></param>
            <returns>The bounds of the text</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextAdornment.GetRoundedRect(System.Drawing.Rectangle,System.Single)">
            <summary>
            Return a GraphicPath that is a round cornered rectangle
            </summary>
            <param name="rect">The rectangle</param>
            <param name="diameter">The diameter of the corners</param>
            <returns>A round cornered rectagle path</returns>
            <remarks>If I could rely on people using C# 3.0+, this should be
            an extension method of GraphicsPath.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextAdornment.BackColor">
            <summary>
            Gets or sets the background color of the text
            Set this to Color.Empty to not draw a background
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextAdornment.BackgroundBrush">
            <summary>
            Gets the brush that will be used to paint the text
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextAdornment.BorderColor">
            <summary>
            Gets or sets the color of the border around the billboard.
            Set this to Color.Empty to remove the border
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextAdornment.BorderPen">
            <summary>
            Gets the brush that will be used to paint the text
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextAdornment.BorderWidth">
            <summary>
            Gets or sets the width of the border around the text
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextAdornment.CornerRounding">
            <summary>
            How rounded should the corners of the border be? 0 means no rounding.
            </summary>
            <remarks>If this value is too large, the edges of the border will appear odd.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextAdornment.Font">
            <summary>
            Gets or sets the font that will be used to draw the text
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextAdornment.FontOrDefault">
            <summary>
            Gets the font that will be used to draw the text or a reasonable default
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextAdornment.HasBackground">
            <summary>
            Does this text have a background?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextAdornment.HasBorder">
            <summary>
            Does this overlay have a border?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextAdornment.MaximumTextWidth">
            <summary>
            Gets or sets the maximum width of the text. Text longer than this will wrap.
            0 means no maximum.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextAdornment.StringFormat">
            <summary>
            Gets or sets the formatting that should be used on the text
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextAdornment.Text">
            <summary>
            Gets or sets the text that will be drawn
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextAdornment.TextBrush">
            <summary>
            Gets the brush that will be used to paint the text
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextAdornment.TextColor">
            <summary>
            Gets or sets the color of the text
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextAdornment.Wrap">
            <summary>
            Gets or sets whether the text will wrap when it exceeds its bounds
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.IDecoration">
            <summary>
            A decoration is an overlay that draws itself in relation to a given row or cell.
            Decorations scroll when the listview scrolls.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.IOverlay">
            <summary>
            The interface for an object which can draw itself over the top of
            an ObjectListView.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.IOverlay.Draw(DevGrep.Controls.DLV.ObjectListView,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw this overlay
            </summary>
            <param name="olv">The ObjectListView that is being overlaid</param>
            <param name="g">The Graphics onto the given OLV</param>
            <param name="r">The content area of the OLV</param>
        </member>
        <member name="P:DevGrep.Controls.DLV.IDecoration.ListItem">
            <summary>
            Gets or sets the row that is to be decorated
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.IDecoration.SubItem">
            <summary>
            Gets or sets the subitem that is to be decorated
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.AbstractDecoration">
            <summary>
            An AbstractDecoration is a safe do-nothing implementation of the IDecoration interface
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractDecoration.Draw(DevGrep.Controls.DLV.ObjectListView,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw the decoration
            </summary>
            <param name="olv"></param>
            <param name="g"></param>
            <param name="r"></param>
        </member>
        <member name="P:DevGrep.Controls.DLV.AbstractDecoration.ListItem">
            <summary>
            Gets or sets the row that is to be decorated
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.AbstractDecoration.SubItem">
            <summary>
            Gets or sets the subitem that is to be decorated
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.AbstractDecoration.RowBounds">
            <summary>
            Gets the bounds of the decorations row
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.AbstractDecoration.CellBounds">
            <summary>
            Get the bounds of the decorations cell
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.TintedColumnDecoration">
            <summary>
            This decoration draws a slight tint over a column of the
            owning listview. If no column is explicitly set, the selected
            column in the listview will be used.
            The selected column is normally the sort column, but does not have to be.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TintedColumnDecoration.#ctor">
            <summary>
            Create a TintedColumnDecoration
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TintedColumnDecoration.#ctor(DevGrep.Controls.DLV.OLVColumn)">
            <summary>
            Create a TintedColumnDecoration
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TintedColumnDecoration.Draw(DevGrep.Controls.DLV.ObjectListView,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw a slight colouring over our tinted column
            </summary>
            <remarks>
            This overlay only works when:
            - the list is in Details view
            - there is at least one row
            - there is a selected column (or a specified tint column)
            </remarks>
            <param name="olv"></param>
            <param name="g"></param>
            <param name="r"></param>
        </member>
        <member name="P:DevGrep.Controls.DLV.TintedColumnDecoration.ColumnToTint">
            <summary>
            Gets or sets the column that will be tinted
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TintedColumnDecoration.Tint">
            <summary>
            Gets or sets the color that will be 'tinted' over the selected column
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.BorderDecoration">
            <summary>
            This decoration draws an optionally filled border around a rectangle.
            Subclasses must override CalculateBounds().
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.BorderDecoration.#ctor">
            <summary>
            Create a BorderDecoration
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.BorderDecoration.#ctor(System.Drawing.Pen)">
            <summary>
            Create a BorderDecoration
            </summary>
            <param name="borderPen">The pen used to draw the border</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.BorderDecoration.#ctor(System.Drawing.Pen,System.Drawing.Brush)">
            <summary>
            Create a BorderDecoration
            </summary>
            <param name="borderPen">The pen used to draw the border</param>
            <param name="fill">The brush used to fill the rectangle</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.BorderDecoration.Draw(DevGrep.Controls.DLV.ObjectListView,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw a filled border 
            </summary>
            <param name="olv"></param>
            <param name="g"></param>
            <param name="r"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.BorderDecoration.CalculateBounds">
            <summary>
            Subclasses should override this to say where the border should be drawn
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.BorderDecoration.DrawFilledBorder(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Do the actual work of drawing the filled border
            </summary>
            <param name="g"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.BorderDecoration.GetRoundedRect(System.Drawing.RectangleF,System.Single)">
            <summary>
            Create a GraphicsPath that represents a round cornered rectangle.
            </summary>
            <param name="rect"></param>
            <param name="diameter">If this is 0 or less, the rectangle will not be rounded.</param>
            <returns></returns>
        </member>
        <member name="P:DevGrep.Controls.DLV.BorderDecoration.BorderPen">
            <summary>
            Gets or sets the pen that will be used to draw the border
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BorderDecoration.BoundsPadding">
            <summary>
            Gets or sets the padding that will be added to the bounds of the item
            before drawing the border and fill.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BorderDecoration.CornerRounding">
            <summary>
            How rounded should the corners of the border be? 0 means no rounding.
            </summary>
            <remarks>If this value is too large, the edges of the border will appear odd.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.BorderDecoration.FillBrush">
            <summary>
            Gets or sets the brush that will be used to fill the border
            </summary>
            <remarks>This value is ignored when using gradient brush</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.BorderDecoration.FillGradientFrom">
            <summary>
            Gets or sets the color that will be used as the start of a gradient fill.
            </summary>
            <remarks>This and FillGradientTo must be given value to show a gradient</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.BorderDecoration.FillGradientTo">
            <summary>
            Gets or sets the color that will be used as the end of a gradient fill.
            </summary>
            <remarks>This and FillGradientFrom must be given value to show a gradient</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.BorderDecoration.FillGradientMode">
            <summary>
            Gets or sets the fill mode that will be used for the gradient.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.RowBorderDecoration">
            <summary>
            Instances of this class draw a border around the decorated row
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.RowBorderDecoration.CalculateBounds">
            <summary>
            Calculate the boundaries of the border
            </summary>
            <returns></returns>
        </member>
        <member name="P:DevGrep.Controls.DLV.RowBorderDecoration.LeftColumn">
            <summary>
            Gets or sets the index of the left most column to be used for the border
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.RowBorderDecoration.RightColumn">
            <summary>
            Gets or sets the index of the right most column to be used for the border
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.CellBorderDecoration">
            <summary>
            Instances of this class draw a border around the decorated subitem.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.CellBorderDecoration.CalculateBounds">
            <summary>
            Calculate the boundaries of the border
            </summary>
            <returns></returns>
        </member>
        <member name="T:DevGrep.Controls.DLV.EditingCellBorderDecoration">
            <summary>
            This decoration puts a border around the cell being edited and
            optionally "lightboxes" the cell (makes the rest of the control dark).
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.EditingCellBorderDecoration.#ctor">
            <summary>
            Create a EditingCellBorderDecoration
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.EditingCellBorderDecoration.#ctor(System.Boolean)">
            <summary>
            Create a EditingCellBorderDecoration
            </summary>
            <param name="useLightBox">Should the decoration use a lighbox display style?</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.EditingCellBorderDecoration.Draw(DevGrep.Controls.DLV.ObjectListView,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw the decoration
            </summary>
            <param name="olv"></param>
            <param name="g"></param>
            <param name="r"></param>
        </member>
        <member name="P:DevGrep.Controls.DLV.EditingCellBorderDecoration.UseLightbox">
            <summary>
            Gets or set whether the decoration should make the rest of
            the control dark when a cell is being edited
            </summary>
            <remarks>If this is true, FillBrush is used to overpaint
            the control.</remarks>
        </member>
        <member name="T:DevGrep.Controls.DLV.LightBoxDecoration">
            <summary>
            This decoration causes everything *except* the row under the mouse to be overpainted
            with a tint, making the row under the mouse stand out in comparison.
            The darker and more opaque the fill color, the more obvious the
            decorated row becomes.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.LightBoxDecoration.#ctor">
            <summary>
            Create a LightBoxDecoration
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.LightBoxDecoration.Draw(DevGrep.Controls.DLV.ObjectListView,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw a tint over everything in the ObjectListView except the 
            row under the mouse.
            </summary>
            <param name="olv"></param>
            <param name="g"></param>
            <param name="r"></param>
        </member>
        <member name="T:DevGrep.Controls.DLV.ImageDecoration">
            <summary>
            Instances of this class put an Image over the row/cell that it is decorating
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ImageDecoration.#ctor">
            <summary>
            Create an image decoration
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ImageDecoration.#ctor(System.Drawing.Image)">
            <summary>
            Create an image decoration
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ImageDecoration.#ctor(System.Drawing.Image,System.Int32)">
            <summary>
            Create an image decoration
            </summary>
            <param name="image"></param>
            <param name="transparency"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ImageDecoration.#ctor(System.Drawing.Image,System.Drawing.ContentAlignment)">
            <summary>
            Create an image decoration
            </summary>
            <param name="image"></param>
            <param name="alignment"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ImageDecoration.#ctor(System.Drawing.Image,System.Int32,System.Drawing.ContentAlignment)">
            <summary>
            Create an image decoration
            </summary>
            <param name="image"></param>
            <param name="transparency"></param>
            <param name="alignment"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ImageDecoration.Draw(DevGrep.Controls.DLV.ObjectListView,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw this decoration
            </summary>
            <param name="olv">The ObjectListView being decorated</param>
            <param name="g">The Graphics used for drawing</param>
            <param name="r">The bounds of the rendering</param>
        </member>
        <member name="P:DevGrep.Controls.DLV.ImageDecoration.ListItem">
            <summary>
            Gets or sets the item being decorated
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ImageDecoration.SubItem">
            <summary>
            Gets or sets the sub item being decorated
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.TextDecoration">
            <summary>
            Instances of this class draw some text over the row/cell that they are decorating
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextDecoration.#ctor">
            <summary>
            Create a TextDecoration
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextDecoration.#ctor(System.String)">
            <summary>
            Create a TextDecoration
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextDecoration.#ctor(System.String,System.Int32)">
            <summary>
            Create a TextDecoration
            </summary>
            <param name="text"></param>
            <param name="transparency"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextDecoration.#ctor(System.String,System.Drawing.ContentAlignment)">
            <summary>
            Create a TextDecoration
            </summary>
            <param name="text"></param>
            <param name="alignment"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextDecoration.#ctor(System.String,System.Int32,System.Drawing.ContentAlignment)">
            <summary>
            Create a TextDecoration
            </summary>
            <param name="text"></param>
            <param name="transparency"></param>
            <param name="alignment"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextDecoration.Draw(DevGrep.Controls.DLV.ObjectListView,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw this decoration
            </summary>
            <param name="olv">The ObjectListView being decorated</param>
            <param name="g">The Graphics used for drawing</param>
            <param name="r">The bounds of the rendering</param>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextDecoration.ListItem">
            <summary>
            Gets or sets the item being decorated
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextDecoration.SubItem">
            <summary>
            Gets or sets the sub item being decorated
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.ITransparentOverlay">
            <summary>
            An interface for an overlay that supports variable levels of transparency
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ITransparentOverlay.Transparency">
            <summary>
            Gets or sets the transparency of the overlay. 
            0 is completely transparent, 255 is completely opaque.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.AbstractOverlay">
            <summary>
            A null implementation of the IOverlay interface
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.AbstractOverlay.Draw(DevGrep.Controls.DLV.ObjectListView,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw this overlay
            </summary>
            <param name="olv">The ObjectListView that is being overlaid</param>
            <param name="g">The Graphics onto the given OLV</param>
            <param name="r">The content area of the OLV</param>
        </member>
        <member name="P:DevGrep.Controls.DLV.AbstractOverlay.Transparency">
            <summary>
            How transparent should this overlay be?
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.ImageOverlay">
            <summary>
            An overlay that will draw an image over the top of the ObjectListView
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ImageOverlay.#ctor">
            <summary>
            Create an ImageOverlay
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ImageOverlay.Draw(DevGrep.Controls.DLV.ObjectListView,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw this overlay
            </summary>
            <param name="olv">The ObjectListView being decorated</param>
            <param name="g">The Graphics used for drawing</param>
            <param name="r">The bounds of the rendering</param>
        </member>
        <member name="P:DevGrep.Controls.DLV.ImageOverlay.InsetX">
            <summary>
            Gets or sets the horizontal inset by which the position of the overlay will be adjusted
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ImageOverlay.InsetY">
            <summary>
            Gets or sets the vertical inset by which the position of the overlay will be adjusted
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.TextOverlay">
            <summary>
            An overlay that will draw text over the top of the ObjectListView
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextOverlay.#ctor">
            <summary>
            Create a TextOverlay
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.TextOverlay.Draw(DevGrep.Controls.DLV.ObjectListView,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw this overlay
            </summary>
            <param name="olv">The ObjectListView being decorated</param>
            <param name="g">The Graphics used for drawing</param>
            <param name="r">The bounds of the rendering</param>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextOverlay.InsetX">
            <summary>
            Gets or sets the horizontal inset by which the position of the overlay will be adjusted
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextOverlay.InsetY">
            <summary>
            Gets or sets the vertical inset by which the position of the overlay will be adjusted
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TextOverlay.RoundCorneredBorder">
            <summary>
            Gets or sets whether the border will be drawn with rounded corners
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.BillboardOverlay">
            <summary>
            A Billboard overlay is a TextOverlay positioned at an absolute point
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.BillboardOverlay.#ctor">
            <summary>
            Create a BillboardOverlay
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.BillboardOverlay.Draw(DevGrep.Controls.DLV.ObjectListView,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw this overlay
            </summary>
            <param name="olv">The ObjectListView being decorated</param>
            <param name="g">The Graphics used for drawing</param>
            <param name="r">The bounds of the rendering</param>
        </member>
        <member name="P:DevGrep.Controls.DLV.BillboardOverlay.Location">
            <summary>
            Gets or sets where should the top left of the billboard be placed
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.Version1Renderer">
            <summary>
            This class provides compatibility for v1 RendererDelegates
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.Version1Renderer.RenderDelegate">
            <summary>
            The renderer delegate that this renderer wraps
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.MappedImageRenderer">
            <summary>
            This class maps a data value to an image that should be drawn for that value.
            </summary>
            <remarks><para>It is useful for drawing data that is represented as an enum or boolean.</para></remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.MappedImageRenderer.Boolean(System.Object,System.Object)">
            <summary>
            Return a renderer that draw boolean values using the given images
            </summary>
            <param name="trueImage">Draw this when our data value is true</param>
            <param name="falseImage">Draw this when our data value is false</param>
            <returns>A Renderer</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.MappedImageRenderer.TriState(System.Object,System.Object,System.Object)">
            <summary>
            Return a renderer that draw tristate boolean values using the given images
            </summary>
            <param name="trueImage">Draw this when our data value is true</param>
            <param name="falseImage">Draw this when our data value is false</param>
            <param name="nullImage">Draw this when our data value is null</param>
            <returns>A Renderer</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.MappedImageRenderer.#ctor">
            <summary>
            Make a new empty renderer
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.MappedImageRenderer.#ctor(System.Object,System.Object)">
            <summary>
            Make a new renderer that will show the given image when the given key is the aspect value
            </summary>
            <param name="key">The data value to be matched</param>
            <param name="image">The image to be shown when the key is matched</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.MappedImageRenderer.#ctor(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Make a new renderer that will show the given images when it receives the given keys
            </summary>
            <param name="key1"></param>
            <param name="image1"></param>
            <param name="key2"></param>
            <param name="image2"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.MappedImageRenderer.#ctor(System.Object[])">
            <summary>
            Build a renderer from the given array of keys and their matching images
            </summary>
            <param name="keysAndImages">An array of key/image pairs</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.MappedImageRenderer.Add(System.Object,System.Object)">
            <summary>
            Register the image that should be drawn when our Aspect has the data value.
            </summary>
            <param name="value">Value that the Aspect must match</param>
            <param name="image">An ImageSelector -- an int, string or image</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.MappedImageRenderer.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Render our value
            </summary>
            <param name="g"></param>
            <param name="r"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.MappedImageRenderer.RenderCollection(System.Drawing.Graphics,System.Drawing.Rectangle,System.Collections.ICollection)">
            <summary>
            Draw a collection of images
            </summary>
            <param name="g"></param>
            <param name="r"></param>
            <param name="imageSelectors"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.MappedImageRenderer.RenderOne(System.Drawing.Graphics,System.Drawing.Rectangle,System.Object)">
            <summary>
            Draw one image
            </summary>
            <param name="g"></param>
            <param name="r"></param>
            <param name="selector"></param>
        </member>
        <member name="T:DevGrep.Controls.DLV.CheckStateRenderer">
            <summary>
            This renderer draws just a checkbox to match the check state of our model object.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.CheckStateRenderer.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw our cell
            </summary>
            <param name="g"></param>
            <param name="r"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.CheckStateRenderer.GetCheckBoxState(System.Windows.Forms.CheckState)">
            <summary>
            Calculate the renderer checkboxstate we need to correctly draw the given state
            </summary>
            <param name="checkState"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.CheckStateRenderer.HandleGetEditRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,DevGrep.Controls.DLV.OLVListItem,System.Int32)">
            <summary>
            Handle the GetEditRectangle request
            </summary>
            <param name="g"></param>
            <param name="cellBounds"></param>
            <param name="item"></param>
            <param name="subItemIndex"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.CheckStateRenderer.HandleHitTest(System.Drawing.Graphics,DevGrep.Controls.DLV.OlvListViewHitTestInfo,System.Int32,System.Int32)">
            <summary>
            Handle the HitTest request
            </summary>
            <param name="g"></param>
            <param name="hti"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="T:DevGrep.Controls.DLV.ImageRenderer">
            <summary>
            Render an image that comes from our data source.
            </summary>
            <remarks>The image can be sourced from:
            <list type="bullet">
            <item><description>a byte-array (normally when the image to be shown is
            stored as a value in a database)</description></item>
            <item><description>an int, which is treated as an index into the image list</description></item>
            <item><description>a string, which is treated first as a file name, and failing that as an index into the image list</description></item>
            <item><description>an ICollection of ints or strings, which will be drawn as consecutive images</description></item>
            </list>
            <para>If an image is an animated GIF, it's state is stored in the SubItem object.</para>
            <para>By default, the image renderer does not render animations (it begins life with animations paused).
            To enable animations, you must call Unpause().</para>
            <para>In the current implementation (2009-09), each column showing animated gifs must have a 
            different instance of ImageRenderer assigned to it. You cannot share the same instance of
            an image renderer between two animated gif columns. If you do, only the last column will be
            animated.</para>
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ImageRenderer.#ctor">
            <summary>
            Make an empty image renderer
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ImageRenderer.#ctor(System.Boolean)">
            <summary>
            Make an empty image renderer that begins life ready for animations
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ImageRenderer.Pause">
            <summary>
            Pause any animations
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ImageRenderer.Unpause">
            <summary>
            Unpause any animations
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ImageRenderer.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw our image
            </summary>
            <param name="g"></param>
            <param name="r"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ImageRenderer.GetImageFromAspect">
             <summary>
             Translate our Aspect into an image.
             </summary>
             <remarks>The strategy is:<list type="bullet">
             <item><description>If its a byte array, we treat it as an in-memory image</description></item>
             <item><description>If it's an int, we use that as an index into our image list</description></item>
             <item><description>If it's a string, we try to load a file by that name. If we can't, 
             we use the string as an index into our image list.</description></item>
            </list></remarks>
             <returns>An image</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ImageRenderer.OnTimer(System.Object)">
            <summary>
            This is the method that is invoked by the timer. It basically switches control to the listview thread.
            </summary>
            <param name="state">not used</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ImageRenderer.OnTimerInThread">
            <summary>
            This is the OnTimer callback, but invoked in the same thread as the creator of the ListView.
            This method can use all of ListViews methods without creating a CrossThread exception.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ImageRenderer.Paused">
            <summary>
            Should the animations in this renderer be paused?
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.ImageRenderer.AnimationState">
            <summary>
            Instances of this class kept track of the animation state of a single image.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ImageRenderer.AnimationState.IsAnimation(System.Drawing.Image)">
            <summary>
            Is the given image an animation
            </summary>
            <param name="image">The image to be tested</param>
            <returns>Is the image an animation?</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ImageRenderer.AnimationState.#ctor">
            <summary>
            Create an AnimationState in a quiet state
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ImageRenderer.AnimationState.#ctor(System.Drawing.Image)">
            <summary>
            Create an animation state for the given image, which may or may not
            be an animation
            </summary>
            <param name="image">The image to be rendered</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ImageRenderer.AnimationState.AdvanceFrame(System.Int64)">
            <summary>
            Advance our images current frame and calculate when it will expire
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ImageRenderer.AnimationState.IsValid">
            <summary>
            Does this state represent a valid animation
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.BarRenderer">
            <summary>
            Render our Aspect as a progress bar
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.BarRenderer.#ctor">
            <summary>
            Make a BarRenderer
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.BarRenderer.#ctor(System.Int32,System.Int32)">
            <summary>
            Make a BarRenderer for the given range of data values
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.BarRenderer.#ctor(System.Drawing.Pen,System.Drawing.Brush)">
            <summary>
            Make a BarRenderer using a custom bar scheme
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.BarRenderer.#ctor(System.Int32,System.Int32,System.Drawing.Pen,System.Drawing.Brush)">
            <summary>
            Make a BarRenderer using a custom bar scheme
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.BarRenderer.#ctor(System.Drawing.Pen,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Make a BarRenderer that uses a horizontal gradient
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.BarRenderer.#ctor(System.Int32,System.Int32,System.Drawing.Pen,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Make a BarRenderer that uses a horizontal gradient
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.BarRenderer.SetGradient(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Draw this progress bar using a gradient
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.BarRenderer.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw our aspect
            </summary>
            <param name="g"></param>
            <param name="r"></param>
        </member>
        <member name="P:DevGrep.Controls.DLV.BarRenderer.UseStandardBar">
            <summary>
            Should this bar be drawn in the system style?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BarRenderer.Padding">
            <summary>
            How many pixels in from our cell border will this bar be drawn
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BarRenderer.BackgroundColor">
            <summary>
            What color will be used to fill the interior of the control before the 
            progress bar is drawn?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BarRenderer.FrameColor">
            <summary>
            What color should the frame of the progress bar be?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BarRenderer.FrameWidth">
            <summary>
            How many pixels wide should the frame of the progress bar be?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BarRenderer.FillColor">
            <summary>
            What color should the 'filled in' part of the progress bar be?
            </summary>
            <remarks>This is only used if GradientStartColor is Color.Empty</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.BarRenderer.GradientStartColor">
            <summary>
            Use a gradient to fill the progress bar starting with this color
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BarRenderer.GradientEndColor">
            <summary>
            Use a gradient to fill the progress bar ending with this color
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BarRenderer.MaximumWidth">
            <summary>
            Regardless of how wide the column become the progress bar will never be wider than this
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BarRenderer.MaximumHeight">
            <summary>
            Regardless of how high the cell is  the progress bar will never be taller than this
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BarRenderer.MinimumValue">
            <summary>
            The minimum data value expected. Values less than this will given an empty bar
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BarRenderer.MaximumValue">
            <summary>
            The maximum value for the range. Values greater than this will give a full bar
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BarRenderer.Pen">
            <summary>
            The Pen that will draw the frame surrounding this bar
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BarRenderer.Brush">
            <summary>
            The brush that will be used to fill the bar
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.BarRenderer.BackgroundBrush">
            <summary>
            The brush that will be used to fill the background of the bar
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.ImagesRenderer">
            <summary>
            An ImagesRenderer draws zero or more images depending on the data returned by its Aspect.
            </summary>
            <remarks><para>This renderer's Aspect must return a ICollection of ints, strings or Images,
            each of which will be drawn horizontally one after the other.</para>
            <para>As of v2.1, this functionality has been absorbed into ImageRenderer and this is now an
            empty shell, solely for backwards compatibility.</para>
            </remarks>
        </member>
        <member name="T:DevGrep.Controls.DLV.MultiImageRenderer">
            <summary>
            A MultiImageRenderer draws the same image a number of times based on our data value
            </summary>
            <remarks><para>The stars in the Rating column of iTunes is a good example of this type of renderer.</para></remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.MultiImageRenderer.#ctor">
            <summary>
            Make a quiet rendererer
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.MultiImageRenderer.#ctor(System.Object,System.Int32,System.Int32,System.Int32)">
            <summary>
            Make an image renderer that will draw the indicated image, at most maxImages times.
            </summary>
            <param name="imageSelector"></param>
            <param name="maxImages"></param>
            <param name="minValue"></param>
            <param name="maxValue"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.MultiImageRenderer.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw our data value
            </summary>
            <param name="g"></param>
            <param name="r"></param>
        </member>
        <member name="P:DevGrep.Controls.DLV.MultiImageRenderer.ImageIndex">
            <summary>
            The index of the image that should be drawn
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.MultiImageRenderer.ImageName">
            <summary>
            The name of the image that should be drawn
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.MultiImageRenderer.ImageSelector">
            <summary>
            The image selector that will give the image to be drawn
            </summary>
            <remarks>Like all image selectors, this can be an int, string or Image</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.MultiImageRenderer.MaxNumberImages">
            <summary>
            What is the maximum number of images that this renderer should draw?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.MultiImageRenderer.MinimumValue">
            <summary>
            Values less than or equal to this will have 0 images drawn
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.MultiImageRenderer.MaximumValue">
            <summary>
            Values greater than or equal to this will have MaxNumberImages images drawn
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.FlagRenderer">
            <summary>
            A class to render a value that contains a bitwise-OR'ed collection of values.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.FlagRenderer.Add(System.Object,System.Object)">
            <summary>
            Register the given image to the given value
            </summary>
            <param name="key">When this flag is present...</param>
            <param name="imageSelector">...draw this image</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.FlagRenderer.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw the flags
            </summary>
            <param name="g"></param>
            <param name="r"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.FlagRenderer.HandleHitTest(System.Drawing.Graphics,DevGrep.Controls.DLV.OlvListViewHitTestInfo,System.Int32,System.Int32)">
            <summary>
            Do the actual work of hit testing. Subclasses should override this rather than HitTest()
            </summary>
            <param name="g"></param>
            <param name="hti"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="T:DevGrep.Controls.DLV.DescribedTaskRenderer">
            <summary>
            This renderer draws an image, a single line title, and then multi-line descrition
            under the title.
            </summary>
            <remarks>
            <para>This class works best with FullRowSelect = true.</para>
            <para>It's not designed to work with cell editing -- it will work but will look odd.</para>
            <para>
            This class is experimental. It may not work properly and may disappear from
            future versions.
            </para>
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.DescribedTaskRenderer.#ctor">
            <summary>
            Create a DescribedTaskRenderer
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.DescribedTaskRenderer.GetDescription">
            <summary>
            Fetch the description from the model class
            </summary>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.DescribedTaskRenderer.Render(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw our item
            </summary>
            <param name="g"></param>
            <param name="r"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.DescribedTaskRenderer.DrawDescribedTask(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.String,System.Drawing.Image)">
            <summary>
            Draw the task
            </summary>
            <param name="g"></param>
            <param name="r"></param>
            <param name="title"></param>
            <param name="description"></param>
            <param name="image"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.DescribedTaskRenderer.HandleHitTest(System.Drawing.Graphics,DevGrep.Controls.DLV.OlvListViewHitTestInfo,System.Int32,System.Int32)">
            <summary>
            Handle the HitTest request
            </summary>
            <param name="g"></param>
            <param name="hti"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="P:DevGrep.Controls.DLV.DescribedTaskRenderer.TitleFont">
            <summary>
            Gets or set the font that will be used to draw the title of the task
            </summary>
            <remarks>If this is null, the ListView's font will be used</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.DescribedTaskRenderer.TitleFontOrDefault">
            <summary>
            Return a font that has been set for the title or a reasonable default
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.DescribedTaskRenderer.TitleColor">
            <summary>
            Gets or set the color of the title of the task
            </summary>
            <remarks>This color is used when the task is not selected or when the listview
            has a translucent selection mechanism.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.DescribedTaskRenderer.TitleColorOrDefault">
            <summary>
            Return the color of the title of the task or a reasonable default
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.DescribedTaskRenderer.DescriptionFont">
            <summary>
            Gets or set the font that will be used to draw the description of the task
            </summary>
            <remarks>If this is null, the ListView's font will be used</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.DescribedTaskRenderer.DescriptionFontOrDefault">
            <summary>
            Return a font that has been set for the title or a reasonable default
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.DescribedTaskRenderer.DescriptionColor">
            <summary>
            Gets or set the color of the description of the task
            </summary>
            <remarks>This color is used when the task is not selected or when the listview
            has a translucent selection mechanism.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.DescribedTaskRenderer.DescriptionColorOrDefault">
            <summary>
            Return the color of the description of the task or a reasonable default
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.DescribedTaskRenderer.CellPadding">
            <summary>
            Gets or sets the number of pixels that renderer will leave empty around the edge of the cell
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.DescribedTaskRenderer.ImageTextSpace">
            <summary>
            Gets or sets the number of pixels that will be left between the image and the text
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.DescribedTaskRenderer.DescriptionAspectName">
            <summary>
            Gets or sets the name of the aspect of the model object that contains the task description
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.IItemStyle">
            <summary>
            The common interface supported by all style objects
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.IItemStyle.Font">
            <summary>
            Gets or set the font that will be used by this style
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.IItemStyle.FontStyle">
            <summary>
            Gets or set the font style
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.IItemStyle.ForeColor">
            <summary>
            Gets or sets the ForeColor
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.IItemStyle.BackColor">
            <summary>
            Gets or sets the BackColor
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.HotItemStyle">
            <summary>
            Instances of this class specify how should "hot items" (non-selected
            rows under the cursor) be renderered.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HotItemStyle.Font">
            <summary>
            Gets or sets the font that will be applied by this style
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HotItemStyle.FontStyle">
            <summary>
            Gets or sets the style of font that will be applied by this style
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HotItemStyle.ForeColor">
            <summary>
            Gets or sets the color of the text that will be applied by this style
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HotItemStyle.BackColor">
            <summary>
            Gets or sets the background color that will be applied by this style
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HotItemStyle.Overlay">
            <summary>
            Gets or sets the overlay that should be drawn as part of the hot item
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HotItemStyle.Decoration">
            <summary>
            Gets or sets the decoration that should be drawn as part of the hot item
            </summary>
            <remarks>A decoration is different from an overlay in that an decoration
            scrolls with the listview contents, whilst an overlay does not.</remarks>
        </member>
        <member name="T:DevGrep.Controls.DLV.CellStyle">
            <summary>
            This class defines how a cell should be formatted
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.CellStyle.Font">
            <summary>
            Gets or sets the font that will be applied by this style
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.CellStyle.FontStyle">
            <summary>
            Gets or sets the style of font that will be applied by this style
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.CellStyle.ForeColor">
            <summary>
            Gets or sets the color of the text that will be applied by this style
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.CellStyle.BackColor">
            <summary>
            Gets or sets the background color that will be applied by this style
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.HyperlinkStyle">
            <summary>
            Instances of this class describe how hyperlinks will appear
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.HyperlinkStyle.#ctor">
            <summary>
            Create a HyperlinkStyle
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HyperlinkStyle.Normal">
            <summary>
            What sort of formatting should be applied to hyperlinks in their normal state?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HyperlinkStyle.Over">
            <summary>
            What sort of formatting should be applied to hyperlinks when the mouse is over them?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HyperlinkStyle.Visited">
            <summary>
            What sort of formatting should be applied to hyperlinks after they have been clicked?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HyperlinkStyle.OverCursor">
            <summary>
            Gets or sets the cursor that should be shown when the mouse is over a hyperlink.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.HeaderStateStyle">
            <summary>
            Instances of this class control one the styling of one particular state
            (normal, hot, pressed) of a header control
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HeaderStateStyle.Font">
            <summary>
            Gets or sets the font that will be applied by this style
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HeaderStateStyle.ForeColor">
            <summary>
            Gets or sets the color of the text that will be applied by this style
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HeaderStateStyle.BackColor">
            <summary>
            Gets or sets the background color that will be applied by this style
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HeaderStateStyle.FrameColor">
            <summary>
            Gets or sets the color in which a frame will be drawn around the header for this column
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HeaderStateStyle.FrameWidth">
            <summary>
            Gets or sets the width of the frame that will be drawn around the header for this column
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.HeaderFormatStyle">
            <summary>
            This class defines how a header should be formatted in its various states.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.HeaderFormatStyle.#ctor">
            <summary>
            Create a new HeaderFormatStyle
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.HeaderFormatStyle.SetFont(System.Drawing.Font)">
            <summary>
            Set the font for all three states
            </summary>
            <param name="font"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.HeaderFormatStyle.SetForeColor(System.Drawing.Color)">
            <summary>
            Set the fore color for all three states
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.HeaderFormatStyle.SetBackColor(System.Drawing.Color)">
            <summary>
            Set the back color for all three states
            </summary>
            <param name="color"></param>
        </member>
        <member name="P:DevGrep.Controls.DLV.HeaderFormatStyle.Hot">
            <summary>
            What sort of formatting should be applied to a column header when the mouse is over it?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HeaderFormatStyle.Normal">
            <summary>
            What sort of formatting should be applied to a column header in its normal state?
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HeaderFormatStyle.Pressed">
            <summary>
            What sort of formatting should be applied to a column header when pressed?
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.GlassPanelForm">
            <summary>
            A GlassPanelForm sits transparently over an ObjectListView to show overlays.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.GlassPanelForm.Bind(DevGrep.Controls.DLV.ObjectListView,DevGrep.Controls.DLV.IOverlay)">
            <summary>
            Attach this form to the given ObjectListView
            </summary>        
        </member>
        <member name="M:DevGrep.Controls.DLV.GlassPanelForm.HideGlass">
            <summary>
            Made the overlay panel invisible
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.GlassPanelForm.ShowGlass">
            <summary>
            Show the overlay panel in its correctly location
            </summary>
            <remarks>
            If the panel is always shown, this method does nothing.
            If the panel is being resized, this method also does nothing.
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.GlassPanelForm.Unbind">
            <summary>
            Detach this glass panel from its previous ObjectListView
            </summary>        
            <remarks>
            You should unbind the overlay panel before making any changes to the 
            widget hierarchy.
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.GlassPanelForm.Owner_ResizeBegin(System.Object,System.EventArgs)">
            <summary>
            Handle when the form that owns the ObjectListView begins to be resized
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.GlassPanelForm.Owner_ResizeEnd(System.Object,System.EventArgs)">
            <summary>
            Handle when the form that owns the ObjectListView finished to be resized
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.GlassPanelForm.Owner_LocationChanged(System.Object,System.EventArgs)">
            <summary>
            The owning form has moved. Move the overlay panel too.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.GlassPanelForm.Owner_SizeChanged(System.Object,System.EventArgs)">
            <summary>
            The owning form is resizing. Hide our overlay panel until the resizing stops
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.GlassPanelForm.objectListView_LocationChanged(System.Object,System.EventArgs)">
            <summary>
            Handle when the bound OLV changes its location. The overlay panel must 
            be moved too, IFF it is currently visible.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.GlassPanelForm.objectListView_SizeChanged(System.Object,System.EventArgs)">
            <summary>
            Handle when the bound OLV changes size. The overlay panel must 
            resize too, IFF it is currently visible.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.GlassPanelForm.tabControl_Selected(System.Object,System.Windows.Forms.TabControlEventArgs)">
            <summary>
            Handle when the bound OLV is part of a TabControl and that
            TabControl changes tabs. The overlay panel is hidden. The
            first time the bound OLV is redrawn, the overlay panel will
            be shown again.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.GlassPanelForm.objectListView_ParentChanged(System.Object,System.EventArgs)">
            <summary>
            Somewhere the parent of the bound OLV has changed. Update
            our events.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.GlassPanelForm.objectListView_VisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Handle when the bound OLV changes its visibility.
            The overlay panel should match the OLV's visibility.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:DevGrep.Controls.DLV.GlassPanelForm.CreateParams">
            <summary>
            Get the low-level windows flag that will be given to CreateWindow.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.HeaderControl">
            <summary>
            Class used to capture window messages for the header of the list view
            control.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.HeaderControl.#ctor(DevGrep.Controls.DLV.ObjectListView)">
            <summary>
            Create a header control for the given ObjectListView.
            </summary>
            <param name="olv"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.HeaderControl.CalculateHeight(System.Drawing.Graphics)">
            <summary>
            Calculate how height the header needs to be
            </summary>
            <returns>Height in pixels</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.HeaderControl.HasSortIndicator(DevGrep.Controls.DLV.OLVColumn)">
            <summary>
            Should the given column show a sort indicator?
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.HeaderControl.HasFilterIndicator(DevGrep.Controls.DLV.OLVColumn)">
            <summary>
            Should the given column be drawn with a filter indicator against it?
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.HeaderControl.HasNonThemedSortIndicator(DevGrep.Controls.DLV.OLVColumn)">
            <summary>
            Should the given column show a non-themed sort indicator?
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.HeaderControl.GetItemRect(System.Int32)">
            <summary>
            Return the bounds of the item with the given index
            </summary>
            <param name="itemIndex"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.HeaderControl.Invalidate">
            <summary>
            Force the header to redraw by invalidating it
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.HeaderControl.CreateToolTip">
            <summary>
            Create a native tool tip control for this listview
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.HeaderControl.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Override the basic message pump
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.HeaderControl.HandleSetCursor(System.Windows.Forms.Message@)">
            <summary>
            Handle the SetCursor windows message
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.HeaderControl.HandleMouseMove(System.Windows.Forms.Message@)">
            <summary>
            Handle the MouseMove windows message
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.HeaderControl.HandleNotify(System.Windows.Forms.Message@)">
            <summary>
            Handle the Notify windows message
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.HeaderControl.HandleHeaderCustomDraw(System.Windows.Forms.Message@)">
            <summary>
            Handle the CustomDraw windows message
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.HeaderControl.HandleLayout(System.Windows.Forms.Message@)">
            <summary>
            The message divides a ListView's space between the header and the rows of the listview.
            The WINDOWPOS structure controls the headers bounds, the RECT controls the listview bounds.
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.HeaderControl.HandleDestroy(System.Windows.Forms.Message@)">
            <summary>
            Handle when the underlying header control is destroyed
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.HeaderControl.NeedsCustomDraw">
            <summary>
            Does this header need to be custom drawn?
            </summary>
            <remarks>Word wrapping and colored text require custom drawning. Funnily enough, we
            can change the font natively.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.HeaderControl.CustomDrawHeaderCell(System.Drawing.Graphics,System.Int32,System.Int32)">
            <summary>
            Draw one cell of the header
            </summary>
            <param name="g"></param>
            <param name="columnIndex"></param>
            <param name="itemState"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.HeaderControl.DrawUnthemedBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Int32,System.Boolean,DevGrep.Controls.DLV.HeaderStateStyle)">
            <summary>
            Draw a background for the header, without using Themes.
            </summary>
            <param name="g"></param>
            <param name="r"></param>
            <param name="columnIndex"></param>
            <param name="isSelected"></param>
            <param name="stateStyle"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.HeaderControl.DrawThemedBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Int32,System.Boolean)">
            <summary>
            Draw a more-or-less pure themed header background.
            </summary>
            <param name="g"></param>
            <param name="r"></param>
            <param name="columnIndex"></param>
            <param name="isSelected"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.HeaderControl.DrawThemedSortIndicator(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw a sort indicator using themes
            </summary>
            <param name="g"></param>
            <param name="r"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.HeaderControl.DrawUnthemedSortIndicator(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw a sort indicator without using themes
            </summary>
            <param name="g"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.HeaderControl.DrawFilterIndicator(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw an indication that this column has a filter applied to it
            </summary>
            <param name="g"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.HeaderControl.DrawHeaderImageAndText(System.Drawing.Graphics,System.Drawing.Rectangle,DevGrep.Controls.DLV.OLVColumn,DevGrep.Controls.DLV.HeaderStateStyle)">
            <summary>
            Draw the header's image and text
            </summary>
            <param name="g"></param>
            <param name="r"></param>
            <param name="column"></param>
            <param name="stateStyle"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.HeaderControl.CalculateStyle(DevGrep.Controls.DLV.OLVColumn,System.Boolean,System.Boolean)">
            <summary>
            What style should be applied to the header?
            </summary>
            <param name="column"></param>
            <param name="isHot"></param>
            <param name="isPressed"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.HeaderControl.CalculateFont(DevGrep.Controls.DLV.OLVColumn,System.Boolean,System.Boolean)">
            <summary>
            What font should be used to draw the header text?
            </summary>
            <param name="column"></param>
            <param name="isHot"></param>
            <param name="isPressed"></param>
            <returns></returns>
        </member>
        <member name="P:DevGrep.Controls.DLV.HeaderControl.ColumnIndexUnderCursor">
            <summary>
            Return the index of the column under the current cursor position,
            or -1 if the cursor is not over a column
            </summary>
            <returns>Index of the column under the cursor, or -1</returns>
        </member>
        <member name="P:DevGrep.Controls.DLV.HeaderControl.Handle">
            <summary>
            Return the Windows handle behind this control
            </summary>
            <remarks>
            When an ObjectListView is initialized as part of a UserControl, the
            GetHeaderControl() method returns 0 until the UserControl is
            completely initialized. So the AssignHandle() call in the constructor
            doesn't work. So we override the Handle property so value is always
            current.
            </remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.HeaderControl.HotFontStyle">
            <summary>
            Gets or sets a style that should be applied to the font of the
            column's header text when the mouse is over that column
            </summary>
            <remarks>THIS IS EXPERIMENTAL. USE AT OWN RISK. August 2009</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.HeaderControl.IsCursorOverLockedDivider">
            <summary>
            Gets whether the cursor is over a "locked" divider, i.e.
            one that cannot be dragged by the user.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HeaderControl.ListView">
            <summary>
            Gets or sets the listview that this header belongs to
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HeaderControl.MaximumHeight">
            <summary>
            Gets the maximum height of the header. -1 means no maximum.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HeaderControl.ToolTip">
            <summary>
            Get or set the ToolTip that shows tips for the header
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HeaderControl.WordWrap">
            <summary>
            Gets or sets whether the text in column headers should be word
            wrapped when it is too long to fit within the column
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.HeaderControl.TextFormatFlags">
            <summary>
            What flags will be used when drawing text
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.ToolStripCheckedListBox">
            <summary>
            Instances of this class put a CheckedListBox into a tool strip menu item.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ToolStripCheckedListBox.#ctor">
            <summary>
            Create a ToolStripCheckedListBox
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ToolStripCheckedListBox.AddItem(System.Object,System.Boolean)">
            <summary>
            Add a possibly checked item to the control
            </summary>
            <param name="item"></param>
            <param name="isChecked"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ToolStripCheckedListBox.AddItem(System.Object,System.Windows.Forms.CheckState)">
            <summary>
            Add an item with the given state to the control
            </summary>
            <param name="item"></param>
            <param name="state"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ToolStripCheckedListBox.GetItemCheckState(System.Int32)">
            <summary>
            Gets the checkedness of the i'th item
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ToolStripCheckedListBox.SetItemState(System.Int32,System.Windows.Forms.CheckState)">
            <summary>
            Set the checkedness of the i'th item
            </summary>
            <param name="i"></param>
            <param name="checkState"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ToolStripCheckedListBox.CheckAll">
            <summary>
            Check all the items in the control
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ToolStripCheckedListBox.UncheckAll">
            <summary>
            Unchecked all the items in the control
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ToolStripCheckedListBox.OnSubscribeControlEvents(System.Windows.Forms.Control)">
            <summary>
            Listen for events on the underlying control
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ToolStripCheckedListBox.OnUnsubscribeControlEvents(System.Windows.Forms.Control)">
            <summary>
            Stop listening for events on the underlying control
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ToolStripCheckedListBox.OnItemCheck(System.Object,System.Windows.Forms.ItemCheckEventArgs)">
            <summary>
            Trigger the ItemCheck event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:DevGrep.Controls.DLV.ToolStripCheckedListBox.CheckedListBoxControl">
            <summary>
            Gets the control embedded in the menu
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ToolStripCheckedListBox.Items">
            <summary>
            Gets the items shown in the checkedlistbox
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ToolStripCheckedListBox.CheckedOnClick">
            <summary>
            Gets or sets whether an item should be checked when it is clicked
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ToolStripCheckedListBox.CheckedItems">
            <summary>
            Gets a collection of the checked items
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.ToolStripCheckedListBox.ItemCheck">
            <summary>
            Tell the world that an item was checked
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.ToolTipControl">
            <summary>
            A limited wrapper around a Windows tooltip window.
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.ToolTipControl.TTN_SHOW">
            <summary>
            
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.ToolTipControl.TTN_POP">
            <summary>
            
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.ToolTipControl.TTN_LINKCLICK">
            <summary>
            
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.ToolTipControl.TTN_GETDISPINFO">
            <summary>
            
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ToolTipControl.Create(System.IntPtr)">
            <summary>
            Create the underlying control.
            </summary>
            <param name="parentHandle">The parent of the tooltip</param>
            <remarks>This does nothing if the control has already been created</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ToolTipControl.PushSettings">
            <summary>
            Take a copy of the current settings and restore them when the 
            tooltip is poppped.
            </summary>
            <remarks>
            This call cannot be nested. Subsequent calls to this method will be ignored
            until PopSettings() is called.
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ToolTipControl.PopSettings">
            <summary>
            Restore the settings of the tooltip as they were when PushSettings()
            was last called.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ToolTipControl.AddTool(System.Windows.Forms.IWin32Window)">
            <summary>
            Add the given window to those for whom this tooltip will show tips
            </summary>
            <param name="window">The window</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ToolTipControl.PopToolTip(System.Windows.Forms.IWin32Window)">
            <summary>
            Hide any currently visible tooltip
            </summary>
            <param name="window"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ToolTipControl.RemoveToolTip(System.Windows.Forms.IWin32Window)">
            <summary>
            Remove the given window from those managed by this tooltip
            </summary>
            <param name="window"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ToolTipControl.SetMaxWidth">
            <summary>
            Set the maximum width of a tooltip string.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ToolTipControl.SetMaxWidth(System.Int32)">
            <summary>
            Set the maximum width of a tooltip string.
            </summary>
            <remarks>Setting this ensures that line breaks in the tooltip are honoured.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ToolTipControl.MakeToolInfoStruct(System.Windows.Forms.IWin32Window)">
            <summary>
            Make a TOOLINFO structure for the given window
            </summary>
            <param name="window"></param>
            <returns>A filled in TOOLINFO</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ToolTipControl.HandleNotify(System.Windows.Forms.Message@)">
            <summary>
            Handle a WmNotify message
            </summary>
            <param name="msg">The msg</param>
            <returns>True if the message has been handled</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ToolTipControl.HandleGetDispInfo(System.Windows.Forms.Message@)">
            <summary>
            Handle a get display info message
            </summary>
            <param name="msg">The msg</param>
            <returns>True if the message has been handled</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ToolTipControl.HandleLinkClick(System.Windows.Forms.Message@)">
            <summary>
            Handle a TTN_LINKCLICK message
            </summary>
            <param name="msg">The msg</param>
            <returns>True if the message has been handled</returns>
            <remarks>This cannot call base.WndProc() since the msg may have come from another control.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ToolTipControl.HandlePop(System.Windows.Forms.Message@)">
            <summary>
            Handle a TTN_POP message
            </summary>
            <param name="msg">The msg</param>
            <returns>True if the message has been handled</returns>
            <remarks>This cannot call base.WndProc() since the msg may have come from another control.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ToolTipControl.HandleShow(System.Windows.Forms.Message@)">
            <summary>
            Handle a TTN_SHOW message
            </summary>
            <param name="msg">The msg</param>
            <returns>True if the message has been handled</returns>
            <remarks>This cannot call base.WndProc() since the msg may have come from another control.</remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ToolTipControl.HandleReflectNotify(System.Windows.Forms.Message@)">
            <summary>
            Handle a reflected notify message
            </summary>
            <param name="msg">The msg</param>
            <returns>True if the message has been handled</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.ToolTipControl.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Mess with the basic message pump of the tooltip
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ToolTipControl.OnShowing(DevGrep.Controls.DLV.ToolTipShowingEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ToolTipControl.OnPop(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:DevGrep.Controls.DLV.ToolTipControl.WindowStyle">
            <summary>
            Get or set if the style of the tooltip control
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ToolTipControl.IsBalloon">
            <summary>
            Get or set if the tooltip should be shown as a ballon
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ToolTipControl.HasBorder">
            <summary>
            Get or set if the tooltip should be shown as a ballon
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ToolTipControl.BackColor">
            <summary>
            Get or set the background color of the tooltip
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ToolTipControl.ForeColor">
            <summary>
            Get or set the color of the text and border on the tooltip.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ToolTipControl.Title">
            <summary>
            Get or set the title that will be shown on the tooltip.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ToolTipControl.StandardIcon">
            <summary>
            Get or set the icon that will be shown on the tooltip.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ToolTipControl.Font">
            <summary>
            Gets or sets the font that will be used to draw this control.
            is still.
            </summary>
            <remarks>Setting this to null reverts to the default font.</remarks>
        </member>
        <member name="P:DevGrep.Controls.DLV.ToolTipControl.AutoPopDelay">
            <summary>
            Gets or sets how many milliseconds the tooltip will remain visible while the mouse
            is still.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ToolTipControl.InitialDelay">
            <summary>
            Gets or sets how many milliseconds the mouse must be still before the tooltip is shown.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.ToolTipControl.ReshowDelay">
            <summary>
            Gets or sets how many milliseconds the mouse must be still before the tooltip is shown again.
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.ToolTipControl.Showing">
            <summary>
            Tell the world that a tooltip is about to show
            </summary>
        </member>
        <member name="E:DevGrep.Controls.DLV.ToolTipControl.Pop">
            <summary>
            Tell the world that a tooltip is about to disappear
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.ToolTipControl.StandardIcons">
            <summary>
            These are the standard icons that a tooltip can display.
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.ToolTipControl.StandardIcons.None">
            <summary>
            No icon
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.ToolTipControl.StandardIcons.Info">
            <summary>
            Info
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.ToolTipControl.StandardIcons.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.ToolTipControl.StandardIcons.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.ToolTipControl.StandardIcons.InfoLarge">
            <summary>
            Large info (Vista and later only)
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.ToolTipControl.StandardIcons.WarningLarge">
            <summary>
            Large warning (Vista and later only)
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.ToolTipControl.StandardIcons.ErrorLarge">
            <summary>
            Large error (Vista and later only)
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.ColumnSelectionForm">
            <summary>
            This form is an example of how an application could allows the user to select which columns 
            an ObjectListView will display, as well as select which order the columns are displayed in.
            </summary>
            <remarks>
            <para>In Tile view, ColumnHeader.DisplayIndex does nothing. To reorder the columns you have
            to change the order of objects in the Columns property.</para>
            <para>Remember that the first column is special!
            It has to remain the first column.</para>
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.ColumnSelectionForm.#ctor">
            <summary>
            Make a new ColumnSelectionForm
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ColumnSelectionForm.OpenOn(DevGrep.Controls.DLV.ObjectListView)">
            <summary>
            Open this form so it will edit the columns that are available in the listview's current view
            </summary>
            <param name="olv">The ObjectListView whose columns are to be altered</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ColumnSelectionForm.OpenOn(DevGrep.Controls.DLV.ObjectListView,System.Windows.Forms.View)">
            <summary>
            Open this form so it will edit the columns that are available in the given listview
            when the listview is showing the given type of view.
            </summary>
            <param name="olv">The ObjectListView whose columns are to be altered</param>
            <param name="view">The view that is to be altered. Must be View.Details or View.Tile</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ColumnSelectionForm.InitializeForm(DevGrep.Controls.DLV.ObjectListView,System.Windows.Forms.View)">
            <summary>
            Initialize the form to show the columns of the given view
            </summary>
            <param name="olv"></param>
            <param name="view"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ColumnSelectionForm.Apply(DevGrep.Controls.DLV.ObjectListView,System.Windows.Forms.View)">
            <summary>
            The user has pressed OK. Do what's requied.
            </summary>
            <param name="olv"></param>
            <param name="view"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ColumnSelectionForm.EnableControls">
            <summary>
            Enable the controls on the dialog to match the current state
            </summary>
        </member>
        <member name="F:DevGrep.Controls.DLV.ColumnSelectionForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.ColumnSelectionForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.ColumnSelectionForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.ColumnSelectionForm.SortByDisplayOrder">
            <summary>
            A Comparer that will sort a list of columns so that visible ones come before hidden ones,
            and that are ordered by their display order.
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.Generator">
            <summary>
            The Generator class provides methods to dynamically create columns
            for an ObjectListView based on the characteristics of a given collection
            of model objects.
            </summary>
        </member>
        <member name="M:DevGrep.Controls.DLV.Generator.GenerateColumns(DevGrep.Controls.DLV.ObjectListView,System.Collections.IEnumerable)">
            <summary>
            Replace all columns of the given ObjectListView with columns generated
            from the first member of the given enumerable. If the enumerable is 
            empty or null, the ObjectListView will be cleared.
            </summary>
            <param name="olv">The ObjectListView to modify</param>
            <param name="enumerable">The collection whose first element will be used to generate columns.</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.Generator.GenerateColumns(DevGrep.Controls.DLV.ObjectListView,System.Type)">
            <summary>
            Generate columns into the given ObjectListView that come from the given 
            model object type. 
            </summary>
            <param name="olv">The ObjectListView to modify</param>
            <param name="type">The model type whose attributes will be considered.</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.Generator.GenerateColumns(System.Type)">
            <summary>
            Generate a list of OLVColumns based on the attributes of the given type
            that have a OLVColumn attribute.
            </summary>
            <param name="type"></param>
            <returns>A collection of OLVColumns matching the attributes of Type that have OLVColumnAttributes.</returns>
        </member>
        <member name="T:DevGrep.Controls.DLV.TypedObjectListView`1">
            <summary>
            A TypedObjectListView is a type-safe wrapper around an ObjectListView.
            </summary>
            <remarks>
            <para>VCS does not support generics on controls. It can be faked to some degree, but it
            cannot be completely overcome. In our case in particular, there is no way to create
            the custom OLVColumn's that we need to truly be generic. So this wrapper is an 
            experiment in providing some type-safe access in a way that is useful and available today.</para>
            <para>A TypedObjectListView is not more efficient than a normal ObjectListView.
            Underneath, the same name of casts are performed. But it is easier to use since you
            do not have to write the casts yourself.
            </para>
            </remarks>
            <typeparam name="T">The class of model object that the list will manage</typeparam>
            <example>
            To use a TypedObjectListView, you write code like this:
            <code>
            TypedObjectListView&lt;Person> tlist = new TypedObjectListView&lt;Person>(this.listView1);
            tlist.CheckStateGetter = delegate(Person x) { return x.IsActive; };
            tlist.GetColumn(0).AspectGetter = delegate(Person x) { return x.Name; };
            ...
            </code>
            To iterate over the selected objects, you can write something elegant like this:
            <code>
            foreach (Person x in tlist.SelectedObjects) {
                x.GrantSalaryIncrease();
            }
            </code>
            </example>
        </member>
        <member name="M:DevGrep.Controls.DLV.TypedObjectListView`1.#ctor(DevGrep.Controls.DLV.ObjectListView)">
            <summary>
            Create a typed wrapper around the given list.
            </summary>
            <param name="olv">The listview to be wrapped</param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TypedObjectListView`1.GetColumn(System.Int32)">
            <summary>
            Return a typed wrapper around the column at the given index
            </summary>
            <param name="i">The index of the column</param>
            <returns>A typed column or null</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TypedObjectListView`1.GetColumn(System.String)">
            <summary>
            Return a typed wrapper around the column with the given name
            </summary>
            <param name="name">The name of the column</param>
            <returns>A typed column or null</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TypedObjectListView`1.GetModelObject(System.Int32)">
            <summary>
            Return the model object at the given index
            </summary>
            <param name="index">The index of the model object</param>
            <returns>The model object or null</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TypedObjectListView`1.GenerateAspectGetters">
            <summary>
            This method will generate AspectGetters for any column that has an AspectName.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TypedObjectListView`1.CheckedObject">
            <summary>
            Return the model object that is checked, if only one row is checked.
            If zero rows are checked, or more than one row, null is returned.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TypedObjectListView`1.CheckedObjects">
            <summary>
            Return the list of all the checked model objects
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TypedObjectListView`1.ListView">
            <summary>
            The ObjectListView that is being wrapped
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TypedObjectListView`1.Objects">
            <summary>
            Get or set the list of all model objects
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TypedObjectListView`1.SelectedObject">
            <summary>
            Return the model object that is selected, if only one row is selected.
            If zero rows are selected, or more than one row, null is returned.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TypedObjectListView`1.SelectedObjects">
            <summary>
            The list of model objects that are selected.
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TypedObjectListView`1.CheckStateGetter">
            <summary>
            Gets or sets the check state getter
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TypedObjectListView`1.BooleanCheckStateGetter">
            <summary>
            Gets or sets the boolean check state getter
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TypedObjectListView`1.CheckStatePutter">
            <summary>
            Gets or sets the check state putter delegate
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TypedObjectListView`1.BooleanCheckStatePutter">
            <summary>
            Gets or sets the boolean check state putter
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TypedObjectListView`1.CellToolTipGetter">
            <summary>
            Gets or sets the cell tooltip getter
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TypedObjectListView`1.HeaderToolTipGetter">
            <summary>
            Gets or sets the header tool tip getter
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.TypedObjectListView`1.TypedCheckStateGetterDelegate">
            <summary>
            CheckStateGetter
            </summary>
            <param name="rowObject"></param>
            <returns></returns>
        </member>
        <member name="T:DevGrep.Controls.DLV.TypedObjectListView`1.TypedBooleanCheckStateGetterDelegate">
            <summary>
            BooleanCheckStateGetter
            </summary>
            <param name="rowObject"></param>
            <returns></returns>
        </member>
        <member name="T:DevGrep.Controls.DLV.TypedObjectListView`1.TypedCheckStatePutterDelegate">
            <summary>
            CheckStatePutter
            </summary>
            <param name="rowObject"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="T:DevGrep.Controls.DLV.TypedObjectListView`1.TypedBooleanCheckStatePutterDelegate">
            <summary>
            BooleanCheckStatePutter
            </summary>
            <param name="rowObject"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="T:DevGrep.Controls.DLV.TypedObjectListView`1.TypedCellToolTipGetterDelegate">
            <summary>
            ToolTipGetter
            </summary>
            <param name="column"></param>
            <param name="modelObject"></param>
            <returns></returns>
        </member>
        <member name="T:DevGrep.Controls.DLV.TypedColumn`1">
            <summary>
            A type-safe wrapper around an OLVColumn
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DevGrep.Controls.DLV.TypedColumn`1.#ctor(DevGrep.Controls.DLV.OLVColumn)">
            <summary>
            Creates a TypedColumn
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:DevGrep.Controls.DLV.TypedColumn`1.GenerateAspectGetter">
            <summary>
            Generate an aspect getter that does the same thing as the AspectName,
            except without using reflection.
            </summary>
            <remarks>
            <para>
            If you have an AspectName of "Owner.Address.Postcode", this will generate
            the equivilent of: <code>this.AspectGetter = delegate (object x) {
                return x.Owner.Address.Postcode;
            }
            </code>
            </para>
            <para>
            If AspectName is empty, this method will do nothing, otherwise 
            this will replace any existing AspectGetter.
            </para>
            </remarks>
        </member>
        <member name="M:DevGrep.Controls.DLV.TypedColumn`1.GenerateAspectGetter(System.Type,System.String)">
            <summary>
            Generates an aspect getter method dynamically. The method will execute
            the given dotted chain of selectors against a model object given at runtime.
            </summary>
            <param name="type">The type of model object to be passed to the generated method</param>
            <param name="path">A dotted chain of selectors. Each selector can be the name of a 
            field, property or parameter-less method.</param>
            <returns>A typed delegate</returns>
        </member>
        <member name="M:DevGrep.Controls.DLV.TypedColumn`1.GenerateIL(System.Type,System.String,System.Reflection.Emit.ILGenerator)">
            <summary>
            This method generates the actual IL for the method.
            </summary>
            <param name="type"></param>
            <param name="path"></param>
            <param name="il"></param>
        </member>
        <member name="P:DevGrep.Controls.DLV.TypedColumn`1.AspectGetter">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TypedColumn`1.AspectPutter">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TypedColumn`1.ImageGetter">
            <summary>
            
            </summary>
        </member>
        <member name="P:DevGrep.Controls.DLV.TypedColumn`1.GroupKeyGetter">
            <summary>
            
            </summary>
        </member>
        <member name="T:DevGrep.Controls.DLV.TypedColumn`1.TypedAspectGetterDelegate">
            <summary>
            
            </summary>
            <param name="rowObject"></param>
            <returns></returns>
        </member>
        <member name="T:DevGrep.Controls.DLV.TypedColumn`1.TypedAspectPutterDelegate">
            <summary>
            
            </summary>
            <param name="rowObject"></param>
            <param name="newValue"></param>
        </member>
        <member name="T:DevGrep.Controls.DLV.TypedColumn`1.TypedGroupKeyGetterDelegate">
            <summary>
            
            </summary>
            <param name="rowObject"></param>
            <returns></returns>
        </member>
        <member name="T:DevGrep.Controls.DLV.TypedColumn`1.TypedImageGetterDelegate">
            <summary>
            
            </summary>
            <param name="rowObject"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.GlobalHook.#ctor(System.Windows.Forms.RibbonHelpers.GlobalHook.HookTypes)">
            <summary>
            Creates a new Hook of the specified type
            </summary>
            <param name="hookType"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.GlobalHook.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.RibbonHelpers.GlobalHook.MouseClick"/> event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.GlobalHook.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.RibbonHelpers.GlobalHook.MouseDoubleClick"/> event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.GlobalHook.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.RibbonHelpers.GlobalHook.MouseWheel"/> event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.GlobalHook.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.RibbonHelpers.GlobalHook.MouseDown"/> event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.GlobalHook.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.RibbonHelpers.GlobalHook.MouseUp"/> event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.GlobalHook.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.RibbonHelpers.GlobalHook.MouseMove"/> event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.GlobalHook.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.RibbonHelpers.GlobalHook.KeyDown"/> event
            </summary>
            <param name="e">Event Data</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.GlobalHook.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.RibbonHelpers.GlobalHook.KeyUp"/> event
            </summary>
            <param name="e">Event Data</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.GlobalHook.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.RibbonHelpers.GlobalHook.KeyPress"/> event
            </summary>
            <param name="e">Event Data</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.GlobalHook.HookProc(System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Recieves the actual unsafe mouse hook procedure
            </summary>
            <param name="nCode"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.GlobalHook.KeyboardProc(System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Recieves the actual unsafe keyboard hook procedure
            </summary>
            <param name="code"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.GlobalHook.MouseProc(System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Processes Mouse Procedures
            </summary>
            <param name="code"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.GlobalHook.InstallHook">
            <summary>
            Installs the actual unsafe hook
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.GlobalHook.Unhook">
            <summary>
            Unhooks the hook
            </summary>
        </member>
        <member name="E:System.Windows.Forms.RibbonHelpers.GlobalHook.MouseClick">
            <summary>
            Occours when the hook captures a mouse click
            </summary>
        </member>
        <member name="E:System.Windows.Forms.RibbonHelpers.GlobalHook.MouseDoubleClick">
            <summary>
            Occours when the hook captures a mouse double click
            </summary>
        </member>
        <member name="E:System.Windows.Forms.RibbonHelpers.GlobalHook.MouseWheel">
            <summary>
            Occours when the hook captures the mouse wheel
            </summary>
        </member>
        <member name="E:System.Windows.Forms.RibbonHelpers.GlobalHook.MouseDown">
            <summary>
            Occours when the hook captures the press of a mouse button
            </summary>
        </member>
        <member name="E:System.Windows.Forms.RibbonHelpers.GlobalHook.MouseUp">
            <summary>
            Occours when the hook captures the release of a mouse button
            </summary>
        </member>
        <member name="E:System.Windows.Forms.RibbonHelpers.GlobalHook.MouseMove">
            <summary>
            Occours when the hook captures the mouse moving over the screen
            </summary>
        </member>
        <member name="E:System.Windows.Forms.RibbonHelpers.GlobalHook.KeyDown">
            <summary>
            Occours when a key is pressed
            </summary>
        </member>
        <member name="E:System.Windows.Forms.RibbonHelpers.GlobalHook.KeyUp">
            <summary>
            Occours when a key is released
            </summary>
        </member>
        <member name="E:System.Windows.Forms.RibbonHelpers.GlobalHook.KeyPress">
            <summary>
            Occours when a key is pressed
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonHelpers.GlobalHook.HookType">
            <summary>
            Gets the type of this hook
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonHelpers.GlobalHook.Handle">
            <summary>
            Gets the handle of the hook
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonHelpers.GlobalHook.HookTypes">
            <summary>
            Types of available hooks
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonHelpers.GlobalHook.HookTypes.Mouse">
            <summary>
            Installs a mouse hook
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonHelpers.GlobalHook.HookTypes.Keyboard">
            <summary>
            Installs a keyboard hook
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonHelpers.GlobalHook.HookProcCallBack">
            <summary>
            Delegate used to recieve HookProc
            </summary>
            <param name="nCode"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="T:System.Windows.Forms.IContainsRibbonComponents">
            <summary>
            Used to extract all child components from RibbonItem objects
            </summary>
        </member>
        <member name="T:System.Windows.Forms.IContainsSelectableRibbonItems">
            <summary>
            Exposes GetItems, to indicate that the type contains a collection of RibbonItems
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IContainsSelectableRibbonItems.GetItems">
            <summary>
            When implemented, must return an  enumerator to acces the items inside the type
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IContainsSelectableRibbonItems.GetContentBounds">
            <summary>
            When implemented, must return the bounds of the content where items are displayed
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.Windows.Forms.IRibbonElement">
            <summary>
            Interface that every drawable ribbon element must implement
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IRibbonElement.OnPaint(System.Object,System.Windows.Forms.RibbonElementPaintEventArgs)">
            <summary>
            Called on every element when its time to draw itself
            </summary>
            <param name="g">Device to draw</param>
            <param name="sender">Object that is invoking the paint element</param>
            <param name="e">Paint event data</param>
        </member>
        <member name="M:System.Windows.Forms.IRibbonElement.MeasureSize(System.Object,System.Windows.Forms.RibbonElementMeasureSizeEventArgs)">
            <summary>
            Gets the size in pixels needed for the element in the specified mode
            </summary>
            <param name="sender">Object that sends the measure message</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:System.Windows.Forms.IRibbonElement.SetBounds(System.Drawing.Rectangle)">
            <summary>
            Called to make the element aware of its actual bounds on the control
            </summary>
        </member>
        <member name="P:System.Windows.Forms.IRibbonElement.Bounds">
            <summary>
            Gets the bounds of the item
            </summary>
        </member>
        <member name="P:System.Windows.Forms.IRibbonElement.Owner">
            <summary>
            Gets the Ribbon owner of this item.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.IRibbonToolTip.ToolTip">
            <summary>
            Gets or Sets the ToolTip Text
            </summary>
        </member>
        <member name="P:System.Windows.Forms.IRibbonToolTip.ToolTipTitle">
            <summary>
            Gets or Sets the ToolTip Title
            </summary>
        </member>
        <member name="P:System.Windows.Forms.IRibbonToolTip.ToolTipImage">
            <summary>
            Gets or Sets the ToolTip Image
            </summary>
        </member>
        <member name="P:System.Windows.Forms.IRibbonToolTip.ToolTipIcon">
            <summary>
            Gets or Sets the stock ToolTip Icon
            </summary>
        </member>
        <member name="E:System.Windows.Forms.IRibbonToolTip.ToolTipPopUp">
            <summary>
            Occurs before a ToolTip is initially displayed.
            <remarks>Use this event to change the ToolTip or Cancel it at all.</remarks>
            </summary>
        </member>
        <member name="T:System.Windows.Forms.IScrollableRibbonItem">
            <summary>
            Implemented by Ribbon items that has scrollable content
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IScrollableRibbonItem.ScrollUp">
            <summary>
            Scrolls the content up
            </summary>
        </member>
        <member name="M:System.Windows.Forms.IScrollableRibbonItem.ScrollDown">
            <summary>
            Scrolls the content down
            </summary>
        </member>
        <member name="P:System.Windows.Forms.IScrollableRibbonItem.ContentBounds">
            <summary>
            Gets the bounds of the content (without scrolling controls)
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Ribbon">
            <summary>
            Provides a Ribbon toolbar
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon.DefaultTabSpacing">
            <summary>
            The default tab spacing
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon.DefaultPanelSpacing">
            <summary>
            The default panel spacing
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon.CaptionBarHeight">
            <summary>
            The caption bar height
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon.ForceOrbMenu">
            <summary>
            The force orb menu
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._lastSizeMeasured">
            <summary>
            The _last size measured
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._tabs">
            <summary>
            The _tabs
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._tabsMargin">
            <summary>
            The _tabs margin
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._tabsPadding">
            <summary>
            The _tabs padding
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._contexts">
            <summary>
            The _contexts
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._minimized">
            <summary>
            The _minimized
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._expanded">
            <summary>
            The _expanded
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._expanding">
            <summary>
            The _expanding
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._expandedHeight">
            <summary>
            The _expanded height
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._renderer">
            <summary>
            The _renderer
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._tabSpacing">
            <summary>
            The _tab spacing
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._tabContentMargin">
            <summary>
            The _tab content margin
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._tabContentPadding">
            <summary>
            The _tab content padding
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._panelPadding">
            <summary>
            The _panel padding
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._panelMargin">
            <summary>
            The _panel margin
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._activeTab">
            <summary>
            The _active tab
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._panelSpacing">
            <summary>
            The _panel spacing
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._itemMargin">
            <summary>
            The _item margin
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._itemPadding">
            <summary>
            The _item padding
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._lastSelectedTab">
            <summary>
            The _last selected tab
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._sensor">
            <summary>
            The _sensor
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._dropDownMargin">
            <summary>
            The _drop down margin
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._tabTextMargin">
            <summary>
            The _tab text margin
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._updatingSuspended">
            <summary>
            The _updating suspended
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._orbSelected">
            <summary>
            The _orb selected
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._orbPressed">
            <summary>
            The _orb pressed
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._orbVisible">
            <summary>
            The _orb visible
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._orbImage">
            <summary>
            The _orb image
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._orbStyle">
            <summary>
            The _orb style
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._orbText">
            <summary>
            The _orb text
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._quickAcessToolbar">
            <summary>
            The _quick acess toolbar
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._orbDropDown">
            <summary>
            The _orb drop down
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._borderMode">
            <summary>
            The _border mode
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._actualBorderMode">
            <summary>
            The _actual border mode
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._CloseButton">
            <summary>
            The _ close button
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._MaximizeRestoreButton">
            <summary>
            The _ maximize restore button
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._MinimizeButton">
            <summary>
            The _ minimize button
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._CaptionButtonsVisible">
            <summary>
            The _ caption buttons visible
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._mouseHook">
            <summary>
            The _mouse hook
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._keyboardHook">
            <summary>
            The _keyboard hook
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon.ActiveTextBox">
            <summary>
            The active text box
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.#ctor">
            <summary>
            Creates a new Ribbon control
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Control" /> and its child controls and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:System.Windows.Forms.Ribbon"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.DisposeHooks">
            <summary>
            Disposes the hooks.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.Ribbon._CaptionBarVisible">
            <summary>
            The _ caption bar visible
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.Refresh">
            <summary>
            Forces the control to invalidate its client area and immediately redraw itself and any child controls.
            </summary>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
              <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
              </PermissionSet>
        </member>
        <member name="M:System.Windows.Forms.Ribbon._mouseHook_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Resends the mousedown to PopupManager
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon._mouseHook_MouseWheel(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Checks if MouseWheel should be raised
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.OnOrbClicked(System.EventArgs)">
            <summary>
            Raises the OrbClicked event
            </summary>
            <param name="e">event data</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.OnOrbDoubleClicked(System.EventArgs)">
            <summary>
            Raises the OrbDoubleClicked
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.SetUpHooks">
            <summary>
            Initializes hooks
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Ribbon._keyboardHook_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handles the KeyDown event of the _keyboardHook control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.KeyEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.ShowOrbDropDown">
            <summary>
            Shows the Orb's dropdown
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.ShowOrbDropDown(System.Drawing.Point)">
            <summary>
            Shows the Orb's dropdown at the specified point.
            </summary>
            <param name="pt">The pt.</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.RenewSensor">
            <summary>
            Drops out the old sensor and creates a new one
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.SetActualBorderMode(System.Windows.Forms.RibbonWindowMode)">
            <summary>
            Sets the value of the <see cref="P:System.Windows.Forms.Ribbon.BorderMode"/> property
            </summary>
            <param name="borderMode">Actual border mode accquired</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.SetCaptionButtonsVisible(System.Boolean)">
            <summary>
            Sets the value of the <see cref="P:System.Windows.Forms.Ribbon.CaptionButtonsVisible"/> property
            </summary>
            <param name="visible">Value to set to the caption buttons</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.SuspendUpdating">
            <summary>
            Suspends any drawing/regions update operation
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.ResumeUpdating">
            <summary>
            Resumes any drawing/regions update operation
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.ResumeUpdating(System.Boolean)">
            <summary>
            Resumes any drawing/regions update operation
            </summary>
            <param name="update">if set to <c>true</c> [update].</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.RemoveHelperControls">
            <summary>
            Removes all helper controls placed by any reason.
            Contol's visibility is set to false before removed.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.TabHitTest(System.Int32,System.Int32)">
            <summary>
            Hittest on tab
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>true if a tab has been clicked</returns>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.UpdateRegions">
            <summary>
            Updates the regions of the tabs and the tab content bounds of the active tab
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.UpdateRegions(System.Drawing.Graphics)">
            <summary>
            Updates the regions of the tabs and the tab content bounds of the active tab
            </summary>
            <param name="g">The g.</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.OnRegionsChanged">
            <summary>
            Forces a size recalculation on the entire control
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.RedrawTab(System.Windows.Forms.RibbonTab)">
            <summary>
            Redraws the specified tab
            </summary>
            <param name="tab">The tab.</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.SetSelectedTab(System.Windows.Forms.RibbonTab)">
            <summary>
            Sets the currently selected tab
            </summary>
            <param name="tab">The tab.</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.SuspendSensor">
            <summary>
            Suspends the sensor activity
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.ResumeSensor">
            <summary>
            Resumes the sensor activity
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.RedrawArea(System.Drawing.Rectangle)">
            <summary>
            Redraws the specified area on the sensor's control
            </summary>
            <param name="area">The area.</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.ActivateNextTab">
            <summary>
            Activates the next tab available
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.ActivatePreviousTab">
            <summary>
            Activates the previous tab available
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.OrbMouseDown">
            <summary>
            Handles the mouse down on the orb area
            </summary>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Processes Windows messages.
            </summary>
            <param name="m">The Windows <see cref="T:System.Windows.Forms.Message" /> to process.</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.PaintOn(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the Ribbon on the specified device
            </summary>
            <param name="g">Device where to paint on</param>
            <param name="clip">Clip rectangle</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.PaintDoubleBuffered(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the double buffered.
            </summary>
            <param name="wndGraphics">The WND graphics.</param>
            <param name="clip">The clip.</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.IsDesignMode">
            <summary>
            Determines whether [is design mode].
            </summary>
            <returns><c>true</c> if [is design mode]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.OnActiveTabChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Ribbon.ActiveTabChanged"/> event
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.OnActualBorderModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="P:System.Windows.Forms.Ribbon.ActualBorderMode"/> event
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.OnCaptionButtonsVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Ribbon.CaptionButtonsVisibleChanged"/> event
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.OnExpandedChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Ribbon.ExpandedChanged"/> event
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseDoubleClick" /> event.
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background of the control.
            </summary>
            <param name="pevent">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains information about the control to paint.</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overriden. Raises the Paint event and draws all the Ribbon content
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.OnClick(System.EventArgs)">
            <summary>
            Overriden. Raises the Click event and tunnels the message to child elements
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.OnMouseEnter(System.EventArgs)">
            <summary>
            Overriden. Riases the MouseEnter event and tunnels the message to child elements
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.OnMouseLeave(System.EventArgs)">
            <summary>
            Overriden. Raises the MouseLeave  event and tunnels the message to child elements
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overriden. Raises the MouseMove event and tunnels the message to child elements
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overriden. Raises the MouseUp event and tunnels the message to child elements
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overriden. Raises the MouseDown event and tunnels the message to child elements
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the mouse wheel
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.OnSizeChanged(System.EventArgs)">
            <summary>
            Overriden. Raises the OnSizeChanged event and performs layout calculations
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.OnParentChanged(System.EventArgs)">
            <summary>
            Handles when its parent has changed
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.parentForm_Deactivate(System.Object,System.EventArgs)">
            <summary>
            Handles the Deactivate event of the parentForm control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.OnPopupRegistered(System.Object,System.EventArgs)">
            <summary>
            Called when [popup registered].
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:System.Windows.Forms.Ribbon.OnPopupUnregistered(System.Object,System.EventArgs)">
            <summary>
            Called when [popup unregistered].
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:System.Windows.Forms.Ribbon.OrbClicked">
            <summary>
            Occours when the Orb is clicked
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Ribbon.OrbDoubleClick">
            <summary>
            Occours when the Orb is double-clicked
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Ribbon.ActiveTabChanged">
            <summary>
            Occours when the <see cref="P:System.Windows.Forms.Ribbon.ActiveTab"/> property value has changed
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Ribbon.ActualBorderModeChanged">
            <summary>
            Occours when the <see cref="P:System.Windows.Forms.Ribbon.ActualBorderMode"/> property has changed
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Ribbon.CaptionButtonsVisibleChanged">
            <summary>
            Occours when the <see cref="P:System.Windows.Forms.Ribbon.CaptionButtonsVisible"/> property value has changed
            </summary>
        </member>
        <member name="E:System.Windows.Forms.Ribbon.ExpandedChanged">
            <summary>
            Occurs when [expanded changed].
            </summary>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.Expanded">
            <summary>
            Gets or sets the tabs expanded state when in minimize mode
            </summary>
            <value><c>true</c> if expanded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.MinimizedHeight">
            <summary>
            Gets the height of the ribbon when collapsed <see cref="P:System.Windows.Forms.Ribbon.MinimizedHeight"/>
            </summary>
            <value>The height of the minimized.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.Size">
            <summary>
            Gets or sets the height and width of the control.
            </summary>
            <value>The size.</value>
            <returns>The <see cref="T:System.Drawing.Size" /> that represents the height and width of the control in pixels.</returns>
              <PermissionSet>
              <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
              <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
              </PermissionSet>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.CaptionTextBounds">
            <summary>
            Gets the caption text bounds.
            </summary>
            <value>The caption text bounds.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.CaptionButtonsVisible">
            <summary>
            Gets if the caption buttons are currently visible, according to the value specified in <see cref="P:System.Windows.Forms.Ribbon.BorderMode"/>
            </summary>
            <value><c>true</c> if [caption buttons visible]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.CloseButton">
            <summary>
            Gets the Ribbon's close button
            </summary>
            <value>The close button.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.MaximizeRestoreButton">
            <summary>
            Gets the Ribbon's maximize-restore button
            </summary>
            <value>The maximize restore button.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.MinimizeButton">
            <summary>
            Gets the Ribbon's minimize button
            </summary>
            <value>The minimize button.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.FormHelper">
            <summary>
            Gets or sets the RibbonFormHelper object if the parent form is IRibbonForm
            </summary>
            <value>The form helper.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.ActualBorderMode">
            <summary>
            Gets the actual <see cref="T:System.Windows.Forms.RibbonWindowMode"/> that the ribbon has.
            It's value may vary from <see cref="P:System.Windows.Forms.Ribbon.BorderMode"/>
            because of computer and operative system capabilities.
            </summary>
            <value>The actual border mode.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.BorderMode">
            <summary>
            Gets or sets the border mode of the ribbon relative to the window where it is contained
            </summary>
            <value>The border mode.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.OrbDropDown">
            <summary>
            Gets the Orb's DropDown
            </summary>
            <value>The orb drop down.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.PanelCaptionHeight">
            <summary>
            Gets or sets the height of the Panel Caption area.
            </summary>
            <value>The height of the panel caption.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.QuickAcessToolbar">
            <summary>
            Gets  the QuickAcessToolbar
            </summary>
            <value>The quick acess toolbar.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.OrbStyle">
            <summary>
            Gets or sets the Style of the orb
            </summary>
            <value>The orb style.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.OrbText">
            <summary>
            Gets or sets the Text in the orb. Only available when the OrbStyle is set to Office2010
            </summary>
            <value>The orb text.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.OrbImage">
            <summary>
            Gets or sets the Image of the orb
            </summary>
            <value>The orb image.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.OrbVisible">
            <summary>
            Gets or sets if the Ribbon should show an orb on the corner
            </summary>
            <value><c>true</c> if [orb visible]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.OrbSelected">
            <summary>
            Gets or sets if the Orb is currently selected
            </summary>
            <value><c>true</c> if [orb selected]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.OrbPressed">
            <summary>
            Gets or sets if the Orb is currently pressed
            </summary>
            <value><c>true</c> if [orb pressed]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.CaptionBarSize">
            <summary>
            Gets the Height of the caption bar
            </summary>
            <value>The size of the caption bar.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.OrbBounds">
            <summary>
            Gets the bounds of the orb
            </summary>
            <value>The orb bounds.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.NextTab">
            <summary>
            Gets the next tab to be activated
            </summary>
            <value>The next tab.</value>
            <returns></returns>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.PreviousTab">
            <summary>
            Gets the next tab to be activated
            </summary>
            <value>The previous tab.</value>
            <returns></returns>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.TabTextMargin">
            <summary>
            Gets or sets the internal spacing between the tab and its text
            </summary>
            <value>The tab text margin.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.DropDownMargin">
            <summary>
            Gets or sets the margis of the DropDowns shown by the Ribbon
            </summary>
            <value>The drop down margin.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.ItemPadding">
            <summary>
            Gets or sets the external spacing of items on panels
            </summary>
            <value>The item padding.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.ItemMargin">
            <summary>
            Gets or sets the internal spacing of items
            </summary>
            <value>The item margin.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.ActiveTab">
            <summary>
            Gets or sets the tab that is currently active
            </summary>
            <value>The active tab.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.PanelSpacing">
            <summary>
            Gets or sets the spacing leaded between panels
            </summary>
            <value>The panel spacing.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.PanelPadding">
            <summary>
            Gets or sets the external spacing of panels inside of tabs
            </summary>
            <value>The panel padding.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.PanelMargin">
            <summary>
            Gets or sets the internal spacing of panels inside of tabs
            </summary>
            <value>The panel margin.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.TabSpacing">
            <summary>
            Gets or sets the spacing between tabs
            </summary>
            <value>The tab spacing.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.Tabs">
            <summary>
            Gets the collection of RibbonTab tabs
            </summary>
            <value>The tabs.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.Minimized">
            <summary>
            Gets or sets a value indicating if the Ribbon supports being minimized
            </summary>
            <value><c>true</c> if minimized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.Contexts">
            <summary>
            Gets the collection of Contexts of this Ribbon
            </summary>
            <value>The contexts.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.Renderer">
            <summary>
            Gets or sets the Renderer for this Ribbon control
            </summary>
            <value>The renderer.</value>
            <exception cref="T:System.ApplicationException">Null renderer!</exception>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.TabContentMargin">
            <summary>
            Gets or sets the internal spacing of the tab content pane
            </summary>
            <value>The tab content margin.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.TabContentPadding">
            <summary>
            Gets or sets the external spacing of the tabs content pane
            </summary>
            <value>The tab content padding.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.TabsMargin">
            <summary>
            Gets a value indicating the external spacing of tabs
            </summary>
            <value>The tabs margin.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.TabsPadding">
            <summary>
            Gets a value indicating the internal spacing of tabs
            </summary>
            <value>The tabs padding.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.MaximumSize">
            <summary>
            Overriden. The maximum size is fixed
            </summary>
            <value>The maximum size.</value>
            <returns>An ordered pair of type <see cref="T:System.Drawing.Size" /> representing the width and height of a rectangle.</returns>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.MinimumSize">
            <summary>
            Overriden. The minimum size is fixed
            </summary>
            <value>The minimum size.</value>
            <returns>An ordered pair of type <see cref="T:System.Drawing.Size" /> representing the width and height of a rectangle.</returns>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.Dock">
            <summary>
            Overriden. The default dock of the ribbon is top
            </summary>
            <value>The dock.</value>
            <returns>One of the <see cref="T:System.Windows.Forms.DockStyle" /> values. The default is <see cref="F:System.Windows.Forms.DockStyle.None" />.</returns>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.Sensor">
            <summary>
            Gets or sets the current panel sensor for this ribbon
            </summary>
            <value>The sensor.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.RightToLeft">
            <summary>
            Gets or sets a value indicating whether control's elements are aligned to support locales using right-to-left fonts.
            </summary>
            <value>The right to left.</value>
            <returns>One of the <see cref="T:System.Windows.Forms.RightToLeft" /> values. The default is <see cref="F:System.Windows.Forms.RightToLeft.Inherit" />.</returns>
              <PermissionSet>
              <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
              <IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
              </PermissionSet>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.CaptionBarVisible">
            <summary>
            sets or gets the visibility of the caption bar
            </summary>
            <value><c>true</c> if [caption bar visible]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Forms.Ribbon.cr">
            <summary>
            Gets the cr.
            </summary>
            <value>The cr.</value>
        </member>
        <member name="T:System.Windows.Forms.Ribbon.HandlerCallbackMethode">
            <summary>
            Delegate HandlerCallbackMethode
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonArrowDirection">
            <summary>
            Represents the directions that arrows can have
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonArrowDirection.Up">
            <summary>
            The arrow points up
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonArrowDirection.Down">
            <summary>
            The arrow points down
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonArrowDirection.Right">
            <summary>
            The arrow points right
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonArrowDirection.Left">
            <summary>
            The arrow points left
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonItem.RibbonItem_Click(System.Object,System.EventArgs)">
            <summary>
            Selects the item when in a dropdown, in design mode
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItem.ClosesDropDownAt(System.Drawing.Point)">
            <summary>
            Gets if owner dropdown must be closed when the item is clicked on the specified point
            </summary>
            <param name="p">Point to test.</param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonItem.NotifyOwnerRegionsChanged">
            <summary>
            Forces the owner Ribbon to update its regions
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonItem.SetOwnerItem(System.Windows.Forms.RibbonItem)">
            <summary>
            Sets the value of the <see cref="P:System.Windows.Forms.RibbonItem.OwnerItem"/> property
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItem.SetOwner(System.Windows.Forms.Ribbon)">
            <summary>
            Sets the Ribbon that owns this item
            </summary>
            <param name="owner">Ribbon that owns this item</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItem.SetOwnerPanel(System.Windows.Forms.RibbonPanel)">
            <summary>
            Sets the value of the OwnerPanel property
            </summary>
            <param name="ownerPanel">RibbonPanel where this item is located</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItem.SetSelected(System.Boolean)">
            <summary>
            Sets the value of the Selected property
            </summary>
            <param name="selected">Value that indicates if the element is selected</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItem.SetPressed(System.Boolean)">
            <summary>
            Sets the value of the Pressed property
            </summary>
            <param name="pressed">Value that indicates if the element is pressed</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItem.SetOwnerTab(System.Windows.Forms.RibbonTab)">
            <summary>
            Sets the value of the OwnerTab property
            </summary>
            <param name="ownerTab">RibbonTab where this item is located</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItem.SetOwnerGroup(System.Windows.Forms.RibbonItemGroup)">
            <summary>
            Sets the value of the OwnerList property
            </summary>
            <param name="ownerList"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItem.GetNearestSize(System.Windows.Forms.RibbonElementSizeMode)">
            <summary>
            Gets the size applying the rules of MaxSizeMode and MinSizeMode properties
            </summary>
            <param name="sizeMode">Suggested sizeMode</param>
            <returns>The nearest size to the specified one</returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonItem.SetLastMeasuredSize(System.Drawing.Size)">
            <summary>
            Sets the value of the LastMeasuredSize property
            </summary>
            <param name="size">Size to set to the property</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItem.SetSizeMode(System.Windows.Forms.RibbonElementSizeMode)">
            <summary>
            Sets the value of the SizeMode property
            </summary>
            <param name="sizeMode"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItem.OnCanvasChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.RibbonItem.CanvasChanged"/> event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItem.OnOwnerChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.RibbonItem.OwnerChanged"/> event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItem.OnMouseEnter(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseEnter event
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItem.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseDown event
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItem.OnMouseLeave(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseLeave event
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItem.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseUp event
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItem.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseMove event
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItem.OnClick(System.EventArgs)">
            <summary>
            Raises the Click event
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItem.OnDoubleClick(System.EventArgs)">
            <summary>
            Raises the DoubleClick event
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItem.RedrawItem">
            <summary>
            Redraws the item area on the Onwer Ribbon
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonItem.SetCanvas(System.Windows.Forms.Control)">
            <summary>
            Sets the canvas of the item
            </summary>
            <param name="canvas"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItem.SetCanvas(System.Windows.Forms.IContainsSelectableRibbonItems,System.Windows.Forms.Control)">
            <summary>
            Recurse on setting the canvas
            </summary>
            <param name="parent"></param>
            <param name="canvas"></param>
        </member>
        <member name="E:System.Windows.Forms.RibbonItem.ToolTipPopUp">
            <summary>
            Occurs before a ToolTip is initially displayed.
            <remarks>Use this event to change the ToolTip or Cancel it at all.</remarks>
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItem.ContentBounds">
            <summary>
            Gets the bounds of the item's content. (It takes the Ribbon.ItemMargin)
            </summary>
            <remarks>
            Although this is the regular item content bounds, it depends on the logic of the item 
            and how each item handles its own content.
            </remarks>
        </member>
        <member name="P:System.Windows.Forms.RibbonItem.Canvas">
            <summary>
            Gets the control where the item is currently being dawn
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItem.OwnerItem">
            <summary>
            Gets the RibbonItemGroup that owns the item (If any)
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItem.FlashEnabled">
            <summary>
            Gets or sets a value indicating if the Image should be Flashing
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItem.FlashIntervall">
            <summary>
            Gets or sets a value indicating the flashing frequency in Milliseconds
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItem.ShowFlashImage">
            <summary>
            Gets or sets a value indicating whether [show flash image].
            </summary>
            <value><c>true</c> if [show flash image]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Forms.RibbonItem.Text">
            <summary>
            Gets or sets the text that is to be displayed on the item
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItem.Image">
            <summary>
            Gets or sets the image to be displayed on the item
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItem.Visible">
            <summary>
            Gets or sets the Visibility of this item
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItem.Checked">
            <summary>
            Gets or sets a value indicating if the item is currently checked
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItem.CheckedGroup">
            <summary>
            Determins the other Ribbon Items that belong to this checked group.  When one button is checked the other items in this group will be unchecked automatically.  This only applies to Items that are within the same Ribbon Panel or Dropdown Window.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:System.Windows.Forms.RibbonItem.SizeMode">
            <summary>
            Gets the item's current SizeMode
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItem.Selected">
            <summary>
            Gets a value indicating whether the item is selected
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItem.Pressed">
            <summary>
            Gets a value indicating whether the state of the item is pressed
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItem.Owner">
            <summary>
            Gets the Ribbon owner of this item
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItem.Bounds">
            <summary>
            Gets the bounds of the element relative to the Ribbon control
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItem.Enabled">
            <summary>
            Gets or sets a value indicating if the item is currently enabled
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItem.ToolTipTitle">
            <summary>
            Gets or sets the tool tip title
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItem.ToolTipIcon">
            <summary>
            Gets or sets the image of the tool tip
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItem.ToolTip">
            <summary>
            Gets or sets the tool tip text
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItem.ToolTipImage">
            <summary>
            Gets or sets the tool tip image
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItem.Tag">
            <summary>
            Gets or sets the custom object data associated with this control
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItem.Value">
            <summary>
            Gets or sets the custom string data associated with this control
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItem.AltKey">
            <summary>
            Gets or sets the key combination that activates this element when the Alt key is pressed
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItem.OwnerTab">
            <summary>
            Gets the RibbonTab that contains this item
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItem.OwnerPanel">
            <summary>
            Gets the RibbonPanel where this item is located
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItem.MaxSizeMode">
            <summary>
            Gets or sets the maximum size mode of the element
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItem.MinSizeMode">
            <summary>
            Gets or sets the minimum size mode of the element
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItem.LastMeasuredSize">
            <summary>
            Gets the last result of  MeasureSize
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItem.TextAlignment">
            <summary>
            Sets the alignment of the label text if it exists
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonButton.#ctor">
            <summary>
            Creates a new button
            </summary>
            <param name="image">Image of the button (32 x 32 suggested)</param>
            <param name="smallImage">Image of the button when in medium of compact mode (16 x 16 suggested)</param>
            <param name="style">Style of the button</param>
            <param name="text">Text of the button</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonButton.SetDropDownMargin(System.Windows.Forms.Padding)">
            <summary>
            Sets the value of the <see cref="!:DropDownMargin"/> property
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonButton.PerformClick">
            <summary>
            Performs a click on the button
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonButton.CreateImage(System.Int32)">
            <summary>
            Creates a new Transparent, empty image
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonButton.CreateDropDown">
            <summary>
            Creates the DropDown menu
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonButton.OnPaint(System.Object,System.Windows.Forms.RibbonElementPaintEventArgs)">
            <summary>
            Raises the Paint event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonButton.OnPaintText(System.Windows.Forms.RibbonElementPaintEventArgs)">
            <summary>
            Renders text of the button
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonButton.OnPaintImage(System.Windows.Forms.RibbonElementPaintEventArgs)">
            <summary>
            Renders the image of the button
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonButton.OnPaintBackground(System.Windows.Forms.RibbonElementPaintEventArgs)">
            <summary>
            Renders the background of the buton
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonButton.SetBounds(System.Drawing.Rectangle)">
            <summary>
            Sets the bounds of the button
            </summary>
            <param name="bounds"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonButton.OnGetImageBounds(System.Windows.Forms.RibbonElementSizeMode,System.Drawing.Rectangle)">
            <summary>
            Sets the bounds of the image of the button when SetBounds is called.
            Override this method to change image bounds
            </summary>
            <param name="sMode">Mode which is being measured</param>
            <param name="bounds">Bounds of the button</param>
            <remarks>
            The measuring occours in the following order:
            <list type="">
            <item>OnSetImageBounds</item>
            <item>OnSetTextBounds</item>
            <item>OnSetDropDownBounds</item>
            <item>OnSetButtonFaceBounds</item>
            </list>
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.RibbonButton.OnGetTextBounds(System.Windows.Forms.RibbonElementSizeMode,System.Drawing.Rectangle)">
            <summary>
            Sets the bounds of the text of the button when SetBounds is called.
            Override this method to change image bounds
            </summary>
            <param name="sMode">Mode which is being measured</param>
            <param name="bounds">Bounds of the button</param>
            <remarks>
            The measuring occours in the following order:
            <list type="">
            <item>OnSetImageBounds</item>
            <item>OnSetTextBounds</item>
            <item>OnSetDropDownBounds</item>
            <item>OnSetButtonFaceBounds</item>
            </list>
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.RibbonButton.OnGetDropDownBounds(System.Windows.Forms.RibbonElementSizeMode,System.Drawing.Rectangle)">
            <summary>
            Sets the bounds of the dropdown part of the button when SetBounds is called.
            Override this method to change image bounds
            </summary>
            <param name="sMode">Mode which is being measured</param>
            <param name="bounds">Bounds of the button</param>
            <remarks>
            The measuring occours in the following order:
            <list type="">
            <item>OnSetImageBounds</item>
            <item>OnSetTextBounds</item>
            <item>OnSetDropDownBounds</item>
            <item>OnSetButtonFaceBounds</item>
            </list>
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.RibbonButton.OnGetButtonFaceBounds(System.Windows.Forms.RibbonElementSizeMode,System.Drawing.Rectangle)">
            <summary>
            Sets the bounds of the button face part of the button when SetBounds is called.
            Override this method to change image bounds
            </summary>
            <param name="sMode">Mode which is being measured</param>
            <param name="bounds">Bounds of the button</param>
            <remarks>
            The measuring occours in the following order:
            <list type="">
            <item>OnSetImageBounds</item>
            <item>OnSetTextBounds</item>
            <item>OnSetDropDownBounds</item>
            <item>OnSetButtonFaceBounds</item>
            </list>
            </remarks>
        </member>
        <member name="M:System.Windows.Forms.RibbonButton.MeasureStringLargeSize(System.Drawing.Graphics,System.String,System.Drawing.Font)">
            <summary>
            Measures the string for the large size
            </summary>
            <param name="g"></param>
            <param name="text"></param>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonButton.MeasureSize(System.Object,System.Windows.Forms.RibbonElementMeasureSizeEventArgs)">
            <summary>
            Measures the size of the button
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonButton.SetDropDownPressed(System.Boolean)">
            <summary>
            Sets the value of the DropDownPressed property
            </summary>
            <param name="pressed">Value that indicates if the dropdown button is pressed</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonButton.SetDropDownSelected(System.Boolean)">
            <summary>
            Sets the value of the DropDownSelected property
            </summary>
            <param name="selected">Value that indicates if the dropdown part of the button is selected</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonButton.ShowDropDown">
            <summary>
            Shows the drop down items of the button, as if the dropdown part has been clicked
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonButton.OnGetDropDownMenuLocation">
            <summary>
            Gets the location where the dropdown menu will be shown
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonButton.OnGetDropDownMenuSize">
            <summary>
            Gets the size of the dropdown. If Size.Empty is returned, 
            size will be measured automatically
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonButton.DropDown_Closed(System.Object,System.EventArgs)">
            <summary>
            Handles the closing of the dropdown
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonButton.IgnoreDeactivation">
            <summary>
            Ignores deactivation of canvas if it is a volatile window
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonButton.CloseDropDown">
            <summary>
            Closes the DropDown if opened
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonButton.ToString">
            <summary>
            Overriden. Informs the button text
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonButton.SetDropDownVisible(System.Boolean)">
            <summary>
            Sets the value of DropDownVisible
            </summary>
            <param name="visible"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonButton.OnDropDownShowing(System.EventArgs)">
            <summary>
            Raises the DropDownShowing event
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:System.Windows.Forms.RibbonButton.DropDownShowing">
            <summary>
            Occurs when the dropdown is about to be displayed
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButton.SelectedItem">
            <summary>
            Gets the last DropDown Item that was clicked
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButton.SelectedValue">
            <summary>
            Gets or sets the value of selected item on the dropdown.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButton.DropDown">
            <summary>
            Gets the DropDown of the button
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButton.DrawIconsBar">
            <summary>
            Gets or sets if the icons bar should be drawn
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButton.CheckOnClick">
            <summary>
            Gets or sets a value indicating if the <see cref="!:Checked"/> property should be toggled
            when button is clicked
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButton.DropDownResizable">
            <summary>
            Gets or sets a value indicating if the DropDown should be resizable
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButton.ImageBounds">
            <summary>
            Gets the bounds where the <see cref="T:System.Drawing.Image"/> or <see cref="P:System.Windows.Forms.RibbonButton.SmallImage"/> will be drawn.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButton.TextBounds">
            <summary>
            Gets the bounds where the <see cref="N:System.Text"/> of the button will be drawn
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButton.DropDownVisible">
            <summary>
            Gets if the DropDown is currently visible
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButton.DropDownArrowSize">
            <summary>
            Gets or sets the size of the dropdown arrow
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButton.DropDownArrowDirection">
            <summary>
            Gets or sets the direction where drop down's arrow should be pointing to
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButton.Style">
            <summary>
            Gets the style of the button
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButton.DropDownItems">
            <summary>
            Gets the collection of items shown on the dropdown pop-up when Style allows it
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButton.ButtonFaceBounds">
            <summary>
            Gets the bounds of the button face
            </summary>
            <remarks>When Style is different from SplitDropDown and SplitBottomDropDown, ButtonFaceBounds is the same area than DropDownBounds</remarks>
        </member>
        <member name="P:System.Windows.Forms.RibbonButton.DropDownBounds">
            <summary>
            Gets the bounds of the dropdown button
            </summary>
            <remarks>When Style is different from SplitDropDown and SplitBottomDropDown, ButtonFaceBounds is the same area than DropDownBounds</remarks>
        </member>
        <member name="P:System.Windows.Forms.RibbonButton.DropDownSelected">
            <summary>
            Gets if the dropdown part of the button is selected
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButton.DropDownPressed">
            <summary>
            Gets if the dropdown part of the button is pressed
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButton.SmallImage">
            <summary>
            Gets or sets the image of the button when in compact of medium size mode
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButton.MinimumSize">
            <summary>
            Gets or sets the minimum size for this Item.  Only applies when in Large Size Mode.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButton.MaximumSize">
            <summary>
            Gets or sets the maximum size for this Item.  Only applies when in Large Size Mode.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemCollection.#ctor">
            <summary>
            Creates a new ribbon item collection
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemCollection.Add(System.Windows.Forms.RibbonItem)">
            <summary>
            Adds the specified item to the collection
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemCollection.AddRange(System.Collections.Generic.IEnumerable{System.Windows.Forms.RibbonItem})">
            <summary>
            Adds the specified range of items
            </summary>
            <param name="items">Items to add</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemCollection.Insert(System.Int32,System.Windows.Forms.RibbonItem)">
            <summary>
            Inserts the specified item at the desired index
            </summary>
            <param name="index">Desired index of the item</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemCollection.GetItemsLeft(System.Collections.Generic.IEnumerable{System.Windows.Forms.RibbonItem})">
            <summary>
            Gets the left of items as a group of shapes
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemCollection.GetItemsRight(System.Collections.Generic.IEnumerable{System.Windows.Forms.RibbonItem})">
            <summary>
            Gets the right of items as a group of shapes
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemCollection.GetItemsTop(System.Collections.Generic.IEnumerable{System.Windows.Forms.RibbonItem})">
            <summary>
            Gets the top of items as a group of shapes
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemCollection.GetItemsBottom(System.Collections.Generic.IEnumerable{System.Windows.Forms.RibbonItem})">
            <summary>
            Gets the bottom of items as a group of shapes
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemCollection.GetItemsWidth(System.Collections.Generic.IEnumerable{System.Windows.Forms.RibbonItem})">
            <summary>
            Gets the width of items as a group of shapes
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemCollection.GetItemsHeight(System.Collections.Generic.IEnumerable{System.Windows.Forms.RibbonItem})">
            <summary>
            Gets the height of items as a group of shapes
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemCollection.GetItemsBounds(System.Collections.Generic.IEnumerable{System.Windows.Forms.RibbonItem})">
            <summary>
            Gets the bounds of items as a group of shapes
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemCollection.GetItemsLeft">
            <summary>
            Gets the left of items as a group of shapes
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemCollection.GetItemsRight">
            <summary>
            Gets the right of items as a group of shapes
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemCollection.GetItemsTop">
            <summary>
            Gets the top of items as a group of shapes
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemCollection.GetItemsBottom">
            <summary>
            Gets the bottom of items as a group of shapes
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemCollection.GetItemsWidth">
            <summary>
            Gets the width of items as a group of shapes
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemCollection.GetItemsHeight">
            <summary>
            Gets the height of items as a group of shapes
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemCollection.GetItemsBounds">
            <summary>
            Gets the bounds of items as a group of shapes
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemCollection.MoveTo(System.Drawing.Point)">
            <summary>
            Moves the bounds of items as a group of shapes
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemCollection.MoveTo(System.Collections.Generic.IEnumerable{System.Windows.Forms.RibbonItem},System.Drawing.Point)">
            <summary>
            Moves the bounds of items as a group of shapes
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemCollection.CenterItemsInto(System.Drawing.Rectangle)">
            <summary>
            Centers the items on the specified rectangle
            </summary>
            <param name="rectangle"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemCollection.CenterItemsVerticallyInto(System.Drawing.Rectangle)">
            <summary>
            Centers the items vertically on the specified rectangle
            </summary>
            <param name="rectangle"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemCollection.CenterItemsHorizontallyInto(System.Drawing.Rectangle)">
            <summary>
            Centers the items horizontally on the specified rectangle
            </summary>
            <param name="rectangle"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemCollection.CenterItemsInto(System.Collections.Generic.IEnumerable{System.Windows.Forms.RibbonItem},System.Drawing.Rectangle)">
            <summary>
            Centers the items on the specified rectangle
            </summary>
            <param name="rectangle"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemCollection.CenterItemsVerticallyInto(System.Collections.Generic.IEnumerable{System.Windows.Forms.RibbonItem},System.Drawing.Rectangle)">
            <summary>
            Centers the items vertically on the specified rectangle
            </summary>
            <param name="rectangle"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemCollection.CenterItemsHorizontallyInto(System.Collections.Generic.IEnumerable{System.Windows.Forms.RibbonItem},System.Drawing.Rectangle)">
            <summary>
            Centers the items horizontally on the specified rectangle
            </summary>
            <param name="rectangle"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemCollection.SetOwner(System.Windows.Forms.Ribbon)">
            <summary>
            Sets the owner Ribbon of the collection
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemCollection.SetOwnerTab(System.Windows.Forms.RibbonTab)">
            <summary>
            Sets the owner Tab of the collection
            </summary>
            <param name="tab"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemCollection.SetOwnerPanel(System.Windows.Forms.RibbonPanel)">
            <summary>
            Sets the owner panel of the collection
            </summary>
            <param name="panel"></param>
        </member>
        <member name="P:System.Windows.Forms.RibbonItemCollection.Owner">
            <summary>
            Gets the Ribbon owner of this collection
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItemCollection.OwnerPanel">
            <summary>
            Gets the RibbonPanel where this item is located
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItemCollection.OwnerTab">
            <summary>
            Gets the RibbonTab that contains this item
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonButtonCollection.CheckRestrictions(System.Windows.Forms.RibbonButton)">
            <summary>
            Checks for the restrictions that buttons should have on the RibbonButton List
            </summary>
            <param name="button"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonButtonCollection.Add(System.Windows.Forms.RibbonItem)">
            <summary>
            Adds the specified item to the collection
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonButtonCollection.AddRange(System.Collections.Generic.IEnumerable{System.Windows.Forms.RibbonItem})">
            <summary>
            Adds the specified range of items
            </summary>
            <param name="items">Items to add</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonButtonCollection.Insert(System.Int32,System.Windows.Forms.RibbonItem)">
            <summary>
            Inserts the specified item at the desired index
            </summary>
            <param name="index">Desired index of the item</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="P:System.Windows.Forms.RibbonButtonCollection.OwnerList">
            <summary>
            Gets the list that owns the collection (If any)
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonElementWithItemCollectionDesigner.OnGetVerbs">
            <summary>
            Called when verbs must be retrieved
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonElementWithItemCollectionDesigner.CreateItem(System.Type)">
            <summary>
            Creates an item of the speciifed type
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonElementWithItemCollectionDesigner.CreateItem(System.Windows.Forms.Ribbon,System.Windows.Forms.RibbonItemCollection,System.Type)">
            <summary>
            Creates an item of the specified type and adds it to the specified collection
            </summary>
            <param name="ribbon"></param>
            <param name="collection"></param>
            <param name="t"></param>
        </member>
        <member name="P:System.Windows.Forms.RibbonElementWithItemCollectionDesigner.Ribbon">
            <summary>
            Gets a reference to the Ribbon that owns the item
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonElementWithItemCollectionDesigner.Collection">
            <summary>
            Gets the collection of items hosted by this item
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonElementWithItemCollectionDesigner.Verbs">
            <summary>
            Overriden. Passes the verbs to the designer
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonButtonList">
            <summary>
            Represents a list of buttons that can be navigated
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonButtonList.RedrawScroll">
            <summary>
            Redraws the scroll part of the list
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonButtonList.IgnoreDeactivation">
            <summary>
            Ignores deactivation of canvas if it is a volatile window
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonButtonList.RedrawControlButtons">
            <summary>
            Redraws the control buttons: up, down and dropdown
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonButtonList.ScrollOffset(System.Int32)">
            <summary>
            Pushes the amount of _offset of the top of items
            </summary>
            <param name="amount"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonButtonList.ScrollTo(System.Int32)">
            <summary>
            Scrolls the content to the specified offset
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonButtonList.ScrollDown">
            <summary>
            Scrolls the list down
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonButtonList.ScrollUp">
            <summary>
            Scrolls the list up
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonButtonList.ShowDropDown">
            <summary>
            Shows the drop down items of the button, as if the dropdown part has been clicked
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonButtonList.CloseDropDown">
            <summary>
            Closes the DropDown if opened
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonButtonList.SetDropDownVisible(System.Boolean)">
            <summary>
            Sets the value of DropDownVisible
            </summary>
            <param name="visible"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonButtonList.UpdateThumbPos">
            <summary>
            Updates the position of the scroll thumb depending on the current offset
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButtonList.ScrolledPercent">
            <summary>
            Gets the percent of scrolled content
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButtonList.ThumbSelected">
            <summary>
            Gets if the scrollbar thumb is currently selected
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButtonList.ThumbPressed">
            <summary>
            Gets if the scrollbar thumb is currently pressed
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButtonList.ThumbBounds">
            <summary>
            Gets the bounds of the scrollbar thumb
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButtonList.ButtonDropDownPresent">
            <summary>
            Gets if the DropDown button is present on thelist
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButtonList.DropDownItems">
            <summary>
            Gets the collection of items shown on the dropdown pop-up when Style allows it
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButtonList.ButtonsSizeMode">
            <summary>
            Gets or sets the size that the buttons on the list should be
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButtonList.ButtonUpEnabled">
            <summary>
            Gets a value indicating if the button that scrolls up the content is currently enabled
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButtonList.ButtonDownEnabled">
            <summary>
            Gets a value indicating if the button that scrolls down the content is currently enabled
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButtonList.ButtonDropDownSelected">
            <summary>
            Gets a value indicating if the DropDown button is currently selected
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButtonList.ButtonDropDownPressed">
            <summary>
            Gets a value indicating if the DropDown button is currently pressed
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButtonList.ButtonDownSelected">
            <summary>
            Gets a vaule indicating if the button that scrolls down the content is currently selected
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButtonList.ButtonDownPressed">
            <summary>
            Gets a vaule indicating if the button that scrolls down the content is currently pressed
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButtonList.ButtonUpSelected">
            <summary>
            Gets a vaule indicating if the button that scrolls up the content is currently selected
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButtonList.ButtonUpPressed">
            <summary>
            Gets a vaule indicating if the button that scrolls up the content is currently pressed
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButtonList.ContentBounds">
            <summary>
            Gets the bounds of the content where items are shown
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButtonList.ButtonUpBounds">
            <summary>
            Gets the bounds of the button that scrolls the items up
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButtonList.ButtonDownBounds">
            <summary>
            Gets the bounds of the button that scrolls the items down
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButtonList.ButtonDropDownBounds">
            <summary>
            Gets the bounds of the button that scrolls
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButtonList.ControlButtonsWidth">
            <summary>
            Gets or sets the with of the buttons that allow to navigate thru the list
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButtonList.ItemsWideInLargeMode">
            <summary>
            Gets or sets a value indicating the amount of items to show
            (wide) when SizeMode is Large 
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButtonList.ItemsWideInMediumMode">
            <summary>
            Gets or sets a value indicating the amount of items to show
            (wide) when SizeMode is Medium
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButtonList.ItemsSizeInDropwDownMode">
            <summary>
            Gets or sets a value indicating the amount of items to show
            (wide) when SizeMode is Medium
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonButtonList.Buttons">
            <summary>
            Gets the collection of buttons of the list
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonButtonStyle.Normal">
            <summary>
            Simple clickable button
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonButtonStyle.DropDown">
            <summary>
            Button with a right side drop down
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonButtonStyle.SplitDropDown">
            <summary>
            Button with an optional dropdown attachment on the right
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonButtonStyle.DropDownListItem">
            <summary>
            Mimics a standard drop down list item with no image
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonCanvasEventArgs.Owner">
            <summary>
            Gets or sets the Ribbon that raised the event
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonCanvasEventArgs.Graphics">
            <summary>
            Gets or sets the graphics to paint
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonCanvasEventArgs.Bounds">
            <summary>
            Gets or sets the bounds that should be painted
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonCanvasEventArgs.Canvas">
            <summary>
            Gets or sets the control where to be painted
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonCaptionButton.GetCharFor(System.Windows.Forms.RibbonCaptionButton.CaptionButton)">
            <summary>
            Gets the character to render the specified button type
            </summary>
            <param name="type">type of button</param>
            <returns>Character to use with Marlett font in Windows, some other representative characters when in other O.S.</returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonCaptionButton.#ctor(System.Windows.Forms.RibbonCaptionButton.CaptionButton)">
            <summary>
            Creates a new CaptionButton
            </summary>
            <param name="buttonType"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonCaptionButton.SetCaptionButtonType(System.Windows.Forms.RibbonCaptionButton.CaptionButton)">
            <summary>
            Sets value to the type of caption button
            </summary>
            <param name="buttonType"></param>
        </member>
        <member name="P:System.Windows.Forms.RibbonCaptionButton.CaptionButtonType">
            <summary>
            Gets the type of caption button this is
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonCaptionButton.CaptionButton">
            <summary>
            Defines the possible caption buttons
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonCheckBox.MeasureHeight">
            <summary>
            Measures the suposed height of the boxbox
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonCheckBox.OnCheckChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="!:CheckBox Check Changed"/> event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonCheckBox.OnCheckChanging(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="!:CheckBox Check Changing"/> event
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:System.Windows.Forms.RibbonCheckBox.CheckBoxCheckChanged">
            <summary>
            Raised when the <see cref="!:CheckBox Checked"/> property value has changed
            </summary>
        </member>
        <member name="E:System.Windows.Forms.RibbonCheckBox.CheckBoxCheckChanging">
            <summary>
            Raised when the <see cref="!:CheckBox Checked"/> property value is changing
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonCheckBox.Style">
            <summary>
            Gets or sets the style of the checkbox item
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonCheckBox.CheckBoxOrientation">
            <summary>
            Gets or sets the width of the Label
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonCheckBox.LabelBounds">
            <summary>
            Gets the bounds of the label that is shown next to the textbox
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonCheckBox.LabelVisible">
            <summary>
            Gets a value indicating if the label is currently visible
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonCheckBox.CheckBoxBounds">
            <summary>
            Gets the bounds of the text
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonCheckBox.LabelWidth">
            <summary>
            Gets or sets the width of the Label
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonColorChooser">
            <summary>
            A RibbonButton that incorporates a <see cref="P:System.Windows.Forms.RibbonColorChooser.Color"/> property and
            draws this color below the displaying <see cref="T:System.Drawing.Image"/> or <see cref="!:SmallImage"/>
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonColorChooser.OnColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.RibbonColorChooser.ColorChanged"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:System.Windows.Forms.RibbonColorChooser.ColorChanged">
            <summary>
            Raised when the <see cref="P:System.Windows.Forms.RibbonColorChooser.Color"/> property has been changed
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonColorChooser.ImageColorHeight">
            <summary>
            Gets or sets the height of the color preview on the <see cref="T:System.Drawing.Image"/>
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonColorChooser.SmallImageColorHeight">
            <summary>
            Gets or sets the height of the color preview on the <see cref="!:SmallImage"/>
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonColorChooser.Color">
            <summary>
            Gets or sets the currently chosen color
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonTextBox.StartEdit">
            <summary>
            Starts editing the text and focuses the TextBox
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonTextBox.EndEdit">
            <summary>
            Ends the editing of the textbox
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonTextBox.PlaceActualTextBox">
            <summary>
            Places the Actual TextBox on the owner so user can edit the text
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonTextBox.RemoveActualTextBox">
            <summary>
            Removes the actual TextBox that edits the text
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonTextBox.InitTextBox(System.Windows.Forms.TextBox)">
            <summary>
            Initializes the texbox that edits the text
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTextBox._actualTextbox_LostFocus(System.Object,System.EventArgs)">
            <summary>
            Handles the LostFocus event of the actual TextBox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTextBox._actualTextbox_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handles the KeyDown event of the actual TextBox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTextBox._actualTextbox_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Handles the KeyPress event of the actual TextBox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTextBox._actualTextbox_Validating(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Handles the Validating event of the actual TextBox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTextBox._actualTextbox_Validated(System.Object,System.EventArgs)">
            <summary>
            Handles the Validated event of the actual TextBox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTextBox._actualTextbox_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the TextChanged event of the actual TextBox
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTextBox.MeasureHeight">
            <summary>
            Measures the suposed height of the textobx
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonTextBox.OnTextChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.RibbonTextBox.TextBoxTextChanged"/> event
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:System.Windows.Forms.RibbonTextBox.TextBoxTextChanged">
            <summary>
            Raised when the <see cref="P:System.Windows.Forms.RibbonTextBox.TextBoxText"/> property value has changed
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTextBox.AllowTextEdit">
            <summary>
            Gets or sets if the textbox allows editing
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTextBox.TextBoxText">
            <summary>
            Gets or sets the text on the textbox
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTextBox.TextBoxTextBounds">
            <summary>
            Gets the bounds of the text on the textbox
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTextBox.ImageBounds">
            <summary>
            Gets the bounds of the image
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTextBox.LabelBounds">
            <summary>
            Gets the bounds of the label that is shown next to the textbox
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTextBox.ImageVisible">
            <summary>
            Gets a value indicating if the image is currenlty visible
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTextBox.LabelVisible">
            <summary>
            Gets a value indicating if the label is currently visible
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTextBox.TextBoxBounds">
            <summary>
            Gets the bounds of the text
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTextBox.Editing">
            <summary>
            Gets a value indicating if user is currently editing the text of the textbox
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTextBox.TextBoxWidth">
            <summary>
            Gets or sets the width of the textbox
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTextBox.LabelWidth">
            <summary>
            Gets or sets the width of the Label. Enter zero to auto size based on contents.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonComboBox.OnDropDownShowing(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.RibbonComboBox.DropDownShowing"/> event;
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonComboBox.ShowDropDown">
            <summary>
            Shows the DropDown
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonComboBox.OnGetDropDownMenuLocation">
            <summary>
            Gets the location where the dropdown menu will be shown
            </summary>
            <returns></returns>
        </member>
        <member name="E:System.Windows.Forms.RibbonComboBox.DropDownShowing">
            <summary>
            Raised when the DropDown is about to be displayed
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonComboBox.DropDownMaxHeight">
            <summary>
            Gets or sets the maximum height for the dropdown window.  0 = autosize.  If the size is smaller than the contents then scrollbars will be shown.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonComboBox.DropDownVisible">
            <summary>
            Gets or sets a value indicating if the DropDown portion of the combo box is currently shown.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonComboBox.DropDownResizable">
            <summary>
            Gets or sets a value indicating if the DropDown should be resizable
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonComboBox.TextBoxTextBounds">
            <summary>
            Overriden.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonComboBox.DropDownItems">
            <summary>
            Gets the collection of items to be displayed on the dropdown
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonComboBox.SelectedItem">
            <summary>
            Gets the selected of item on the dropdown
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonComboBox.SelectedValue">
            <summary>
            Gets or sets the value of selected item on the dropdown.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonComboBox.DrawIconsBar">
            <summary>
            Gets or sets if the icons bar should be drawn
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonComboBox.DropDownButtonBounds">
            <summary>
            Gets or sets the bounds of the DropDown button
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonComboBox.DropDownButtonVisible">
            <summary>
            Gets a value indicating if the DropDown is currently visible
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonComboBox.DropDownButtonSelected">
            <summary>
            Gets a value indicating if the DropDown button is currently selected
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonComboBox.DropDownButtonPressed">
            <summary>
            Gets a value indicating if the DropDown button is currently pressed
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonContext">
            <summary>
            Represents a context on the Ribbon
            </summary>
            <remarks>Contexts are useful when some tabs are volatile, depending on some selection. A RibbonTabContext can be added to the ribbon by calling Ribbon.Contexts.Add</remarks>
        </member>
        <member name="M:System.Windows.Forms.RibbonContext.#ctor(System.Windows.Forms.Ribbon)">
            <summary>
            Creates a new RibbonTabContext
            </summary>
            <param name="Ribbon">Ribbon that owns the context</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonContext.SetOwner(System.Windows.Forms.Ribbon)">
            <summary>
            Sets the value of the Owner Property
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonContext.Text">
            <summary>
            Gets or sets the text of the Context
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonContext.GlowColor">
            <summary>
            Gets or sets the color of the glow that indicates a context
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonContext.Owner">
            <summary>
            Gets the Ribbon that owns this context
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonContextCollection">
            <summary>
            Represents a collection of RibbonTabContext
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonContextCollection.#ctor(System.Windows.Forms.Ribbon)">
            <summary>
            Creates a new RibbonTabContext Collection
            </summary>
            <param name="owner">Ribbon that owns this collection</param>
            <exception cref="T:System.ArgumentNullException">owner is null</exception>
        </member>
        <member name="M:System.Windows.Forms.RibbonContextCollection.Add(System.Windows.Forms.RibbonContext)">
            <summary>
            Adds the specified context to the collection
            </summary>
            <param name="item">Item to add to the collection</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonContextCollection.AddRange(System.Collections.Generic.IEnumerable{System.Windows.Forms.RibbonContext})">
            <summary>
            Adds the specified contexts to the collection
            </summary>
            <param name="items">Items to add to the collection</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonContextCollection.Insert(System.Int32,System.Windows.Forms.RibbonContext)">
            <summary>
            Inserts the specified context into the specified index
            </summary>
            <param name="index">Desired index of the item into the collection</param>
            <param name="item">Tab to be inserted</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonContextCollection.SetOwner(System.Windows.Forms.Ribbon)">
            <summary>
            Sets the value of the Owner Property
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonContextCollection.Owner">
            <summary>
            Gets the Ribbon that owns this collection
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonDescriptionMenuItem">
            <summary>
            Large menu item with a description bellow the text
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonDescriptionMenuItem.#ctor(System.String)">
            <summary>
            Creates a new menu item with description
            </summary>
            <param name="text">Text of the menuitem</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonDescriptionMenuItem.#ctor(System.String,System.String)">
            <summary>
            Creates a new menu item with description
            </summary>
            <param name="text">Text of the menuitem</param>
            <param name="description">Descripion of the menuitem</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonDescriptionMenuItem.#ctor(System.Drawing.Image,System.String,System.String)">
            <summary>
            Creates a new menu item with description
            </summary>
            <param name="image">Image for the menuitem</param>
            <param name="text">Text for the menuitem</param>
            <param name="description">Description for the menuitem</param>
        </member>
        <member name="P:System.Windows.Forms.RibbonDescriptionMenuItem.DescriptionBounds">
            <summary>
            Gets or sets the bounds of the description
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDescriptionMenuItem.Image">
            <summary>
            Gets or sets the image of the menu item
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDescriptionMenuItem.SmallImage">
            <summary>
            This property is not relevant for this class
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDescriptionMenuItem.Description">
            <summary>
            Gets or sets the description of the button
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonDesigner.CreteOrbMenuItem(System.Type)">
            <summary>
            Creates an Orb's MenuItem
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonDesigner.CreteOrbRecentItem(System.Type)">
            <summary>
            Creates an Orb's RecentItem
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonDesigner.CreteOrbOptionItem(System.Type)">
            <summary>
            Creates an Orb's OptionItem
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonDesigner.changeService_ComponentRemoved(System.Object,System.ComponentModel.Design.ComponentEventArgs)">
            <summary>
            Catches the event of a component on the ribbon being removed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:System.Windows.Forms.RibbonDesigner.SelectedElement">
            <summary>
            Gets or sets the currently selected RibbonElement
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDesigner.Ribbon">
            <summary>
            Gets the Ribbon of the designer
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonPopup.Show(System.Drawing.Point)">
            <summary>
            Shows this Popup on the specified location of the screen
            </summary>
            <param name="screenLocation"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPopup.ToolStripDropDown_Opening(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Handles the Opening event of the ToolStripDropDown
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPopup.OnOpening(System.ComponentModel.CancelEventArgs)">
            <summary>
            Called when pop-up is being opened
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPopup.ToolStripDropDown_Closing(System.Object,System.Windows.Forms.ToolStripDropDownClosingEventArgs)">
            <summary>
            Handles the Closing event of the ToolStripDropDown
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPopup.ToolStripDropDown_Closed(System.Object,System.Windows.Forms.ToolStripDropDownClosedEventArgs)">
            <summary>
            Handles the closed event of the ToolStripDropDown
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPopup.Close">
            <summary>
            Closes this popup.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonPopup.OnClosing(System.Windows.Forms.ToolStripDropDownClosingEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.RibbonPopup.Closing"/> event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPopup.OnClosed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.RibbonPopup.Closed"/> event.
            <remarks>If you override this event don't forget to call base! Otherwise the popup will not be unregistered and hook will not work!</remarks>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPopup.OnShowed(System.EventArgs)">
            <summary>
            Raises the Showed event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPopup.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="!:Paint"/> event
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:System.Windows.Forms.RibbonPopup.Closed">
            <summary>
            Raised when the popup is closed
            </summary>
        </member>
        <member name="E:System.Windows.Forms.RibbonPopup.Closing">
            <summary>
            Raised when the popup is about to be closed
            </summary>
        </member>
        <member name="E:System.Windows.Forms.RibbonPopup.Opening">
            <summary>
            Raised when the Popup is about to be opened
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonPopup.BorderRoundness">
            <summary>
            Gets or sets the roundness of the border
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonPopup.WrappedDropDown">
            <summary>
            Gets the related ToolStripDropDown
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonPopup.CreateParams">
            <summary>
            Overriden. Used to drop a shadow on the popup
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonDropDown.RedrawScroll">
            <summary>
            Redraws the scroll part of the list
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonDropDown.UpdateThumbPos">
            <summary>
            Updates the position of the scroll thumb depending on the current offset
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonDropDown.ScrollDown">
            <summary>
            Scrolls the list down
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonDropDown.ScrollUp">
            <summary>
            Scrolls the list up
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonDropDown.ScrollOffset(System.Int32)">
            <summary>
            Pushes the amount of _offset of the top of items
            </summary>
            <param name="amount"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonDropDown.ScrollTo(System.Int32)">
            <summary>
            Scrolls the content to the specified offset
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonDropDown.IgnoreNextClickDeactivation">
            <summary>
            Prevents the form from being hidden the next time the mouse clicks on the form.
            It is useful for reacting to clicks of items inside items.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonDropDown.UpdateSize">
            <summary>
            Updates the size of the dropdown
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonDropDown.IgnoreDeactivation">
            <summary>
            Ignores deactivation of canvas if it is a volatile window
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDropDown.DropDownMaxHeight">
            <summary>
            Sets the maximum height in pixels for the dropdown window. Enter 0 for autosize. If the contents is larger than the window scrollbars will be shown.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDropDown.ScrollBarSize">
            <summary>
            Gets or sets the width of the scrollbar
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDropDown.Canvas">
            <summary>
            Gets the control where the item is currently being drawn
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDropDown.ScrolledPercent">
            <summary>
            Gets the percent of scrolled content
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDropDown.ThumbSelected">
            <summary>
            Gets if the scrollbar thumb is currently selected
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDropDown.ThumbPressed">
            <summary>
            Gets if the scrollbar thumb is currently pressed
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDropDown.ThumbBounds">
            <summary>
            Gets the bounds of the scrollbar thumb
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDropDown.ButtonUpEnabled">
            <summary>
            Gets a value indicating if the button that scrolls up the content is currently enabled
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDropDown.ButtonDownEnabled">
            <summary>
            Gets a value indicating if the button that scrolls down the content is currently enabled
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDropDown.ButtonDownSelected">
            <summary>
            Gets a vaule indicating if the button that scrolls down the content is currently selected
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDropDown.ButtonDownPressed">
            <summary>
            Gets a vaule indicating if the button that scrolls down the content is currently pressed
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDropDown.ButtonUpSelected">
            <summary>
            Gets a vaule indicating if the button that scrolls up the content is currently selected
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDropDown.ContentBounds">
            <summary>
            Gets the bounds of the content where items are shown
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDropDown.ButtonUpPressed">
            <summary>
            Gets a vaule indicating if the button that scrolls up the content is currently pressed
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDropDown.ButtonUpBounds">
            <summary>
            Gets the bounds of the button that scrolls the items up
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDropDown.ButtonDownBounds">
            <summary>
            Gets the bounds of the button that scrolls the items down
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDropDown.DrawIconsBar">
            <summary>
            Gets or sets if the icons bar should be drawn
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDropDown.SelectionService">
            <summary>
            Gets or sets the selection service for the dropdown
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDropDown.SizingGripBounds">
            <summary>
            Gets the bounds of the sizing grip
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDropDown.MeasuringSize">
            <summary>
            Gets or sets the size for measuring items (by default is DropDown)
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDropDown.ParentItem">
            <summary>
            Gets the parent item of this dropdown
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDropDown.Sensor">
            <summary>
            Gets the sennsor of this dropdown
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDropDown.OwnerRibbon">
            <summary>
            Gets the Ribbon this DropDown belongs to
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDropDown.Items">
            <summary>
            Gets the RibbonItem this dropdown belongs to
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDropDown.ShowSizingGrip">
            <summary>
            Gets or sets a value indicating if the sizing grip should be visible
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDropDown.SizingGripHeight">
            <summary>
            Gets or sets the height of the sizing grip area
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDropDownRenderEventArgs.Graphics">
            <summary>
            Gets or sets the graphics to paint
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonDropDownRenderEventArgs.DropDown">
            <summary>
            Gets or sets the Ribbon DropDown
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonElementMeasureSizeEventArgs">
            <summary>
            Holds data and tools to measure the size
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonElementMeasureSizeEventArgs.#ctor(System.Drawing.Graphics,System.Windows.Forms.RibbonElementSizeMode)">
            <summary>
            Creates a new RibbonElementMeasureSizeEventArgs object
            </summary>
            <param name="graphics">Device info to draw and measure</param>
            <param name="sizeMode">Size mode to measure</param>
        </member>
        <member name="P:System.Windows.Forms.RibbonElementMeasureSizeEventArgs.SizeMode">
            <summary>
            Gets the size mode to measure
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonElementMeasureSizeEventArgs.Graphics">
            <summary>
            Gets the device to measure objects
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonElementPaintEventArgs">
            <summary>
            Holds data and tools to draw the element
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonElementPaintEventArgs.#ctor(System.Drawing.Rectangle,System.Drawing.Graphics,System.Windows.Forms.RibbonElementSizeMode)">
            <param name="clip">Rectangle clip</param>
            <param name="graphics">Device to draw</param>
            <param name="mode">Size mode to draw</param>
        </member>
        <member name="P:System.Windows.Forms.RibbonElementPaintEventArgs.Clip">
            <summary>
            Area that element should occupy
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonElementPaintEventArgs.Graphics">
            <summary>
            Gets the Device where to draw
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonElementPaintEventArgs.Mode">
            <summary>
            Gets the mode to draw the element
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonElementPaintEventArgs.Control">
            <summary>
            Gets the control where element is being painted
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonForm.OnNotifyMessage(System.Windows.Forms.Message)">
            <summary>
            Just for debugging messages
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonForm.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overrides the WndProc funciton
            </summary>
            <param name="m"></param>
        </member>
        <member name="P:System.Windows.Forms.RibbonForm.Helper">
            <summary>
            Gets the helper for making the form a ribbon form
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonFormHelper">
            <summary>
            This class is used to make a form able to contain a ribbon on the non-client area.
            For further instrucions search "ribbon non-client" on www.menendezpoo.com
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonFormHelper.#ctor(System.Windows.Forms.Form)">
            <summary>
            Creates a new helper for the specified form
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonFormHelper.UpdateRibbonConditions">
            <summary>
            Checks if ribbon should be docked or floating and updates its size
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonFormHelper.Form_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Called when helped form is activated
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonFormHelper.PaintTitleBar(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draws the title bar of the form when not in glass
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonFormHelper.Form_Activated(System.Object,System.EventArgs)">
            <summary>
            Called when helped form is activated
            </summary>
            <param name="sender">Object that raised the event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonFormHelper.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Processes the WndProc for a form with a Ribbbon. Returns true if message has been handled
            </summary>
            <param name="m">Message to process</param>
            <returns><c>true</c> if message has been handled. <c>false</c> otherwise</returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonFormHelper.NonClientHitTest(System.Drawing.Point)">
            <summary>
            Performs hit test for mouse on the non client area of the form
            </summary>
            <param name="form">Form to check bounds</param>
            <param name="dwmMargins">Margins of non client area</param>
            <param name="lparam">Lparam of</param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonFormHelper.SetMargins(System.Windows.Forms.Padding)">
            <summary>
            Sets the value of the <see cref="P:System.Windows.Forms.RibbonFormHelper.Margins"/> property;
            </summary>
            <param name="p"></param>
        </member>
        <member name="P:System.Windows.Forms.RibbonFormHelper.Ribbon">
            <summary>
            Gets or sets the Ribbon related with the form
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonFormHelper.CaptionHeight">
            <summary>
            Gets or sets the height of the caption bar relative to the form
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonFormHelper.Form">
            <summary>
            Gets the form this class is helping
            </summary>   
        </member>
        <member name="P:System.Windows.Forms.RibbonFormHelper.Margins">
            <summary>
            Gets the margins of the non-client area
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonFormHelper.MarginsChecked">
            <summary>
            Gets or sets if the margins are already checked by WndProc
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonFormHelper.DesignMode">
            <summary>
            Gets if the <see cref="P:System.Windows.Forms.RibbonFormHelper.Form"/> is currently in Designer mode
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonFormHelper.NonClientHitTestResult">
            <summary>
            Possible results of a hit test on the non client area of a form
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonHost.OnPaint(System.Object,System.Windows.Forms.RibbonElementPaintEventArgs)">
            <summary>
            Raises the paint event and draws the
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonHost.SetBounds(System.Drawing.Rectangle)">
            <summary>
            Sets the bounds of the panel
            </summary>
            <param name="bounds"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonHost.MeasureSize(System.Object,System.Windows.Forms.RibbonElementMeasureSizeEventArgs)">
            <summary>
            Measures the size of the panel on the mode specified by the event object
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonHost.HostCompleted">
            <summary>
            Call this method when you need to close a popup that the control is contained in
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonHost.OnSizeModeChanging(System.Windows.Forms.RibbonHostSizeModeHandledEventArgs@)">
            <summary>
            Raises the <see cref="!:SizeModeChanged"/> event
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:System.Windows.Forms.RibbonHost.SizeModeChanging">
            <summary>
            Occurs when the SizeMode of the controls container is changing. if you manually set the size of the control you need to set the Handled flag to true.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonHost.HostedControl">
            <summary>
            Gets or sets the control that this item willl host
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonHostSizeModeHandledEventArgs.#ctor(System.Drawing.Graphics,System.Windows.Forms.RibbonElementSizeMode)">
            <summary>
            Creates a new RibbonElementMeasureSizeEventArgs object
            </summary>
            <param name="graphics">Device info to draw and measure</param>
            <param name="sizeMode">Size mode to measure</param>
        </member>
        <member name="P:System.Windows.Forms.RibbonHostSizeModeHandledEventArgs.SizeMode">
            <summary>
            Gets the size mode to measure
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonHostSizeModeHandledEventArgs.Graphics">
            <summary>
            Gets the device to measure objects
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonRenderEventArgs">
            <remarks>Ribbon rendering event data</remarks>
        </member>
        <member name="P:System.Windows.Forms.RibbonRenderEventArgs.Ribbon">
            <summary>
            Gets the Ribbon related to the render
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonRenderEventArgs.Graphics">
            <summary>
            Gets the Device to draw into
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonRenderEventArgs.ClipRectangle">
            <summary>
            Gets the Rectangle area where to draw into
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItemBoundsEventArgs.Bounds">
            <summary>
            Gets or sets the suggested bounds
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemGroup.SetOwnerPanel(System.Windows.Forms.RibbonPanel)">
            <param name="ownerPanel">RibbonPanel where this item is located</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemGroup.SetOwner(System.Windows.Forms.Ribbon)">
            <param name="owner">Ribbon that owns this item</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemGroup.SetOwnerTab(System.Windows.Forms.RibbonTab)">
            <param name="ownerTab">RibbonTab where this item is located</param>
        </member>
        <member name="P:System.Windows.Forms.RibbonItemGroup.Checked">
            <summary>
            This property is not relevant for this class
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItemGroup.DrawBackground">
            <summary>
            Gets or sets a value indicating if the group should
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItemGroup.FirstItem">
            <summary>
            Gets the first item of the group
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItemGroup.LastItem">
            <summary>
            Gets the last item of the group
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonItemGroup.Items">
            <summary>
            Gets the collection of items of this group
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonItemGroupItemCollection">
            <summary>
            Represents a collection of items that is hosted by the RibbonItemGroup
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemGroupItemCollection.#ctor(System.Windows.Forms.RibbonItemGroup)">
            <param name="ownerGroup">Group that this collection belongs to</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemGroupItemCollection.Add(System.Windows.Forms.RibbonItem)">
            <summary>
            Adds the specified item to the collection
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemGroupItemCollection.AddRange(System.Collections.Generic.IEnumerable{System.Windows.Forms.RibbonItem})">
            <summary>
            Adds the specified range of items
            </summary>
            <param name="items">Items to add</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonItemGroupItemCollection.Insert(System.Int32,System.Windows.Forms.RibbonItem)">
            <summary>
            Inserts the specified item at the desired index
            </summary>
            <param name="index">Desired index of the item</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="P:System.Windows.Forms.RibbonItemGroupItemCollection.OwnerGroup">
            <summary>
            Gets the group that owns this item collection
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonLabel.MeasureSize(System.Object,System.Windows.Forms.RibbonElementMeasureSizeEventArgs)">
            <summary>
            Measures the size of the panel on the mode specified by the event object
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonLabel.OnPaint(System.Object,System.Windows.Forms.RibbonElementPaintEventArgs)">
            <summary>
            Raises the paint event and draws the
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonLabel.SetBounds(System.Drawing.Rectangle)">
            <summary>
            Sets the bounds of the panel
            </summary>
            <param name="bounds"></param>
        </member>
        <member name="T:System.Windows.Forms.RibbonMouseSensor">
            <summary>
            Provides mouse functionality to RibbonTab, RibbonPanel and RibbonItem objects on a specified Control
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonMouseSensor.#ctor">
            <summary>
            Initializes inner fields
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonMouseSensor.#ctor(System.Windows.Forms.Control,System.Windows.Forms.Ribbon)">
            <summary>
            Creates a new Empty Sensor
            </summary>
            <param name="control">Control to listen mouse events</param>
            <param name="ribbon">Ribbon that will be affected</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonMouseSensor.#ctor(System.Windows.Forms.Control,System.Windows.Forms.Ribbon,System.Collections.Generic.IEnumerable{System.Windows.Forms.RibbonTab},System.Collections.Generic.IEnumerable{System.Windows.Forms.RibbonPanel},System.Collections.Generic.IEnumerable{System.Windows.Forms.RibbonItem})">
            <summary>
            Creates a new Sensor for specified objects
            </summary>
            <param name="control">Control to listen mouse events</param>
            <param name="ribbon">Ribbon that will be affected</param>
            <param name="tabs">Tabs that will be sensed</param>
            <param name="panels">Panels that will be sensed</param>
            <param name="items">Items that will be sensed</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonMouseSensor.#ctor(System.Windows.Forms.Control,System.Windows.Forms.Ribbon,System.Windows.Forms.RibbonTab)">
            <summary>
            Creates a new Sensor for the specified RibbonTab
            </summary>
            <param name="control">Control to listen to mouse events</param>
            <param name="ribbon">Ribbon that will be affected</param>
            <param name="tab">Tab that will be sensed, from which all panels and items will be extracted to sensing also.</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonMouseSensor.#ctor(System.Windows.Forms.Control,System.Windows.Forms.Ribbon,System.Collections.Generic.IEnumerable{System.Windows.Forms.RibbonItem})">
            <summary>
            Creates a new Sensor for only the specified items
            </summary>
            <param name="control">Control to listen to mouse events</param>
            <param name="ribbon">Ribbon that will be affected</param>
            <param name="items">Items that will be sensed</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonMouseSensor.AddHandlers">
            <summary>
            Adds the necessary handlers to the control
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonMouseSensor.Control_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the MouseUp event on the control
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonMouseSensor.Control_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the MouseDown on the control
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonMouseSensor.Control_MouseLeave(System.Object,System.EventArgs)">
            <summary>
            Handles the MouseLeave on the control
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonMouseSensor.Control_MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the MouseMove on the control
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonMouseSensor.HitTest(System.Drawing.Point)">
            <summary>
            Performs a hit-test and specifies hitted objects on properties: <see cref="P:System.Windows.Forms.RibbonMouseSensor.HittedPanel"/>, 
            <see cref="P:System.Windows.Forms.RibbonMouseSensor.HittedTab"/>, <see cref="P:System.Windows.Forms.RibbonMouseSensor.HittedItem"/> and <see cref="P:System.Windows.Forms.RibbonMouseSensor.HittedSubItem"/>
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonMouseSensor.RemoveHandlers">
            <summary>
            Removes the added handlers to the Control
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonMouseSensor.Resume">
            <summary>
            Resumes the sensing after being suspended by <see cref="M:System.Windows.Forms.RibbonMouseSensor.Suspend"/>
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonMouseSensor.Suspend">
            <summary>
            Suspends sensing until <see cref="M:System.Windows.Forms.RibbonMouseSensor.Resume"/> is called
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonMouseSensor.Control">
            <summary>
            Gets the control where the sensor listens to mouse events
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonMouseSensor.Disposed">
            <summary>
            Gets if the sensor has already been 
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonMouseSensor.HittedTab">
            <summary>
            Gets the RibbonTab hitted by the last <see cref="M:System.Windows.Forms.RibbonMouseSensor.HitTest(System.Drawing.Point)"/>
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonMouseSensor.HittedTabScroll">
            <summary>
            Gets if the test hit resulted on some scroll button of the hitted tab
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonMouseSensor.HittedTabScrollLeft">
            <summary>
            Gets or sets if the last hit test resulted on the left scroll of the hitted tab
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonMouseSensor.HittedTabScrollRight">
            <summary>
            Gets or sets if the last hit test resulted on the right scroll of the hitted tab
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonMouseSensor.HittedPanel">
            <summary>
            Gets the RibbonPanel hitted by the last <see cref="M:System.Windows.Forms.RibbonMouseSensor.HitTest(System.Drawing.Point)"/>
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonMouseSensor.HittedItem">
            <summary>
            Gets the RibbonItem hitted by the last <see cref="M:System.Windows.Forms.RibbonMouseSensor.HitTest(System.Drawing.Point)"/>
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonMouseSensor.HittedSubItem">
            <summary>
            Gets the RibbonItem (on other RibbonItem) hitted by the last <see cref="M:System.Windows.Forms.RibbonMouseSensor.HitTest(System.Drawing.Point)"/>
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonMouseSensor.IsSupsended">
            <summary>
            Gets if the sensor is currently suspended
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonMouseSensor.ItemsSource">
            <summary>
            Gets or ests the source of items what limits the sensing.
            If collection is null, all items on the <see cref="P:System.Windows.Forms.RibbonMouseSensor.Items"/> property will be sensed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonMouseSensor.Items">
            <summary>
            Gets the collection of items this sensor affects.
            Sensing can be limitated by the <see cref="!:ItemsLimit"/> property
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonMouseSensor.PanelLimit">
            <summary>
            Gets or sets the Panel that will be the limit to be sensed.
            If set to null, all panels in the <see cref="P:System.Windows.Forms.RibbonMouseSensor.Panels"/> property will be sensed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonMouseSensor.Panels">
            <summary>
            Gets the collection of panels this sensor affects.
            Sensing can be limitated by the <see cref="P:System.Windows.Forms.RibbonMouseSensor.PanelLimit"/> property
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonMouseSensor.Ribbon">
            <summary>
            Gets the ribbon this sensor responds to
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonMouseSensor.SelectedTab">
            <summary>
            Gets or sets the last selected tab
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonMouseSensor.SelectedPanel">
            <summary>
            Gets or sets the last selected panel
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonMouseSensor.SelectedItem">
            <summary>
            Gets or sets the last selected item
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonMouseSensor.SelectedSubItem">
            <summary>
            Gets or sets the last selected sub-item
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonMouseSensor.TabLimit">
            <summary>
            Gets or sets the Tab that will be the only to be sensed. 
            If set to null, all tabs in the <see cref="P:System.Windows.Forms.RibbonMouseSensor.Tabs"/> property will be sensed.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonMouseSensor.Tabs">
            <summary>
            Gets the collection of tabs this sensor affects. 
            Sensing can be limitated by the <see cref="P:System.Windows.Forms.RibbonMouseSensor.TabLimit"/> property
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonWindowMode">
            <summary>
            Possible modes for the ribbon to be placed on the window
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonOrbAdornerGlyph.MenuVisible">
            <summary>
            Gets or sets if the orb menu is visible on the desginer
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonOrbDropDown.SeparatorHeight(System.Windows.Forms.RibbonSeparator)">
            <summary>
            Gets the height that a separator should be on the DropDown
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonOrbDropDown.UpdateRegions">
            <summary>
            Updates the regions and bounds of items
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonOrbDropDown.UpdateSensor">
            <summary>
            Refreshes the sensor
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonOrbDropDown.OnRegionsChanged">
            <summary>
            Updates all areas and bounds of items
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonOrbDropDown.SelectOnDesigner(System.Windows.Forms.RibbonItem)">
            <summary>
            Selects the specified item on the designer
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonOrbDropDown.UpdateDesignerSelectedBounds">
            <summary>
            Updates the selection bounds on the designer
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonOrbDropDown.AllItems">
            <summary>
            Gets all items involved in the dropdown
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonOrbDropDown.ContentMargin">
            <summary>
            Gets the margin of the content bounds
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonOrbDropDown.ContentBounds">
            <summary>
            Gets the bounds of the content (where menu buttons are)
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonOrbDropDown.ContentButtonsBounds">
            <summary>
            Gets the bounds of the content part that contains the buttons on the left
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonOrbDropDown.ContentButtonsMinWidth">
            <summary>
            Gets or sets the minimum width for the content buttons.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonOrbDropDown.ContentRecentItemsBounds">
            <summary>
            Gets the bounds fo the content part that contains the recent-item list
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonOrbDropDown.ContentRecentItemsCaptionBounds">
            <summary>
            Gets the bounds of the caption area on the content part of the recent-item list
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonOrbDropDown.RecentItemsCaptionLineSpacing">
            <summary>
            Gets the bounds of the caption area on the content part of the recent-item list
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonOrbDropDown.ContentRecentItemsMinWidth">
            <summary>
            Gets or sets the minimum width for the recent items.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonOrbDropDown.RibbonInDesignMode">
            <summary>
            Gets if currently on design mode
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonOrbDropDown.MenuItems">
            <summary>
            Gets the collection of items shown in the menu area
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonOrbDropDown.OptionItems">
            <summary>
            Gets the collection of items shown in the options area (bottom)
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonOrbDropDown.RecentItems">
            <summary>
            Gets the collection of items shown in the recent items area
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonOrbDropDown.RecentItemsCaption">
            <summary>
            Gets or Sets the caption for the Recent Items area
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonOrbDropDown.Ribbon">
            <summary>
            Gets the ribbon that owns this dropdown
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonOrbDropDown.Sensor">
            <summary>
            Gets the sensor of the dropdown
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonOrbDropDown.ButtonsGlyphBounds">
            <summary>
            Gets the bounds of the glyph
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonOrbDropDown.ButtonsSeparatorGlyphBounds">
            <summary>
            Gets the bounds of the glyph
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonOrbDropDown.RecentGlyphBounds">
            <summary>
            Gets the bounds of the recent items add glyph
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonOrbDropDown.OptionGlyphBounds">
            <summary>
            Gets the bounds of the option items add glyph
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonOrbDropDownEventArgs.RibbonOrbDropDown">
            <summary>
            Gets the RibbonOrbDropDown related to the event
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.#ctor">
            <summary>
            Creates a new RibbonPanel
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.#ctor(System.String)">
            <summary>
            Creates a new RibbonPanel with the specified text
            </summary>
            <param name="text">Text of the panel</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.#ctor(System.String,System.Windows.Forms.RibbonPanelFlowDirection)">
            <summary>
            Creates a new RibbonPanel with the specified text and panel flow direction
            </summary>
            <param name="text">Text of the panel</param>
            <param name="flowsTo">Flow direction of the content items</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.#ctor(System.String,System.Windows.Forms.RibbonPanelFlowDirection,System.Collections.Generic.IEnumerable{System.Windows.Forms.RibbonItem})">
            <summary>
            Creates a new RibbonPanel with the specified text and panel flow direction
            </summary>
            <param name="text">Text of the panel</param>
            <param name="flowsTo">Flow direction of the content items</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.OnPaint(System.Object,System.Windows.Forms.RibbonElementPaintEventArgs)">
            <summary>
            Raises the paint event and draws the
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.SetBounds(System.Drawing.Rectangle)">
            <summary>
            Sets the bounds of the panel
            </summary>
            <param name="bounds"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.MeasureSize(System.Object,System.Windows.Forms.RibbonElementMeasureSizeEventArgs)">
            <summary>
            Measures the size of the panel on the mode specified by the event object
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.SetOwner(System.Windows.Forms.Ribbon)">
            <summary>
            Sets the value of the Owner Property
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.SetSelected(System.Boolean)">
            <summary>
            Sets the value of the Selected property
            </summary>
            <param name="selected">Value that indicates if the element is selected</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.OnResize(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.RibbonPanel.Resize"/> method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.ShowOverflowPopup">
            <summary>
            Shows the panel in a popup
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.MeasureSizeFlowsToRight(System.Object,System.Windows.Forms.RibbonElementMeasureSizeEventArgs)">
            <summary>
            Measures the size when flow direction is to right
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.MeasureSizeFlowsToBottom(System.Object,System.Windows.Forms.RibbonElementMeasureSizeEventArgs)">
            <summary>
            Measures the size when flow direction is to bottom
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.SetSizeMode(System.Windows.Forms.RibbonElementSizeMode)">
            <summary>
            Sets the value of the SizeMode property
            </summary>
            <param name="sizeMode"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.SetContentBounds(System.Drawing.Rectangle)">
            <summary>
            Sets the value of the ContentBounds property
            </summary>
            <param name="contentBounds">Bounds of the content on the panel</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.SetOwnerTab(System.Windows.Forms.RibbonTab)">
            <summary>
            Sets the value of the OwnerTab property
            </summary>
            <param name="ownerTab">RibbonTab where this item is located</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.UpdateItemsRegions(System.Drawing.Graphics,System.Windows.Forms.RibbonElementSizeMode)">
            <summary>
            Updates the bounds of child elements
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.UpdateRegionsFlowsToBottom(System.Drawing.Graphics,System.Windows.Forms.RibbonElementSizeMode)">
            <summary>
            Updates the bounds of child elements when flow is to bottom
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.UpdateRegionsFlowsToLeft(System.Drawing.Graphics,System.Windows.Forms.RibbonElementSizeMode)">
            <summary>
            Updates the bounds of child elements when flow is to Left.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.UpdateRegionsFlowsToRight(System.Drawing.Graphics,System.Windows.Forms.RibbonElementSizeMode)">
            <summary>
            Updates the bounds of child elements when flow is to bottom
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.CenterItems">
            <summary>
            Centers the items on the tab conent
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.ToString">
            <summary>
            Overriden. Gives info about the panel as a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.SetPressed(System.Boolean)">
            <summary>
            Sets the value of the Pressed property
            </summary>
            <param name="pressed"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.SetMorePressed(System.Boolean)">
            <summary>
            Sets the value of the ButtonMorePressed property
            </summary>
            <param name="bounds">property value</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.SetMoreSelected(System.Boolean)">
            <summary>
            Sets the value of the ButtonMoreSelected property
            </summary>
            <param name="bounds">property value</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.SetMoreBounds(System.Drawing.Rectangle)">
            <summary>
            Sets the value of the ButtonMoreBounds property
            </summary>
            <param name="bounds">property value</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.OnButtonMoreClick(System.EventArgs)">
            <summary>
            Raised the <see cref="E:System.Windows.Forms.RibbonPanel.ButtonMoreClick"/> event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.OnMouseEnter(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseEnter event
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.OnMouseLeave(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseLeave event
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseMove event
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.OnClick(System.EventArgs)">
            <summary>
            Raises the Click event
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.OnDoubleClick(System.EventArgs)">
            <summary>
            Raises the DoubleClick event
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseDown event
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanel.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseUp event
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="E:System.Windows.Forms.RibbonPanel.MouseEnter">
            <summary>
            Occurs when the mouse pointer enters the panel
            </summary>
        </member>
        <member name="E:System.Windows.Forms.RibbonPanel.MouseLeave">
            <summary>
            Occurs when the mouse pointer leaves the panel
            </summary>
        </member>
        <member name="E:System.Windows.Forms.RibbonPanel.MouseMove">
            <summary>
            Occurs when the mouse pointer is moved inside the panel
            </summary>
        </member>
        <member name="E:System.Windows.Forms.RibbonPanel.Paint">
            <summary>
            Occurs when the panel is redrawn
            </summary>
        </member>
        <member name="E:System.Windows.Forms.RibbonPanel.Resize">
            <summary>
            Occurs when the panel is resized
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonPanel.Collapsed">
            <summary>
            Gets if this panel is currenlty collapsed
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonPanel.ButtonMoreVisible">
            <summary>
            Gets or sets the visibility of the "More" button
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonPanel.ButtonMoreEnabled">
            <summary>
            Gets or sets a value indicating if the "More" button should be enabled
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonPanel.ButtonMoreSelected">
            <summary>
            Gets if the "More" button is currently selected
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonPanel.ButtonMorePressed">
            <summary>
            Gets if the "More" button is currently pressed
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonPanel.ButtonMoreBounds">
            <summary>
            Gets the bounds of the "More" button
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonPanel.Pressed">
            <summary>
            Gets if the panel is currently on overflow and pressed
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonPanel.PopUp">
            <summary>
            Gets or sets the pop up where the panel is being drawn (if any)
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonPanel.SizeMode">
            <summary>
            Gets the current size mode of the panel
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonPanel.Items">
            <summary>
            Gets the collection of RibbonItem elements of this panel
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonPanel.Text">
            <summary>
            Gets or sets the text that is to be displayed on the bottom of the panel
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonPanel.Image">
            <summary>
            Gets or sets the image that is to be displayed on the panel when shown as an overflow button
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonPanel.OverflowMode">
            <summary>
            Gets if the panel is in overflow mode
            </summary>
            <remarks>Overflow mode is when the available space to draw the panel is not enough to draw components, so panel is drawn as a button that shows the full content of the panel in a pop-up window when clicked</remarks>
        </member>
        <member name="P:System.Windows.Forms.RibbonPanel.Owner">
            <summary>
            Gets the Ribbon that contains this panel
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonPanel.Bounds">
            <summary>
            Gets the bounds of the panel relative to the Ribbon control
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonPanel.Selected">
            <summary>
            Gets a value indicating whether the panel is selected
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonPanel.Tag">
            <summary>
            Gets or sets the object that contains data about the control
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonPanel.ContentBounds">
            <summary>
            Gets the bounds of the content of the panel
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonPanel.OwnerTab">
            <summary>
            Gets the RibbonTab that contains this panel
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonPanel.FlowsTo">
            <summary>
            Gets or sets the flow direction to layout items
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonPanel.PopupShowed">
            <summary>
            Gets or sets if the popup is currently showing
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonPanelCollection">
            <summary>
            Represents a collection of RibbonPanel objects
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanelCollection.#ctor(System.Windows.Forms.RibbonTab)">
            <summary>
            Creates a new RibbonPanelCollection
            </summary>
            <param name="ownerTab">RibbonTab that contains this panel collection</param>
            <exception cref="T:System.ArgumentNullException">ownerTab is null</exception>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanelCollection.Add(System.Windows.Forms.RibbonPanel)">
            <summary>
            Adds the specified item to the collection
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanelCollection.AddRange(System.Collections.Generic.IEnumerable{System.Windows.Forms.RibbonPanel})">
            <summary>
            Adds a range of panels to the collection
            </summary>
            <param name="items">Panels to add</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanelCollection.Insert(System.Int32,System.Windows.Forms.RibbonPanel)">
            <summary>
            Inserts the specified panel at the desired index
            </summary>
            <param name="index">Desired index to insert the panel</param>
            <param name="item">Panel to insert</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanelCollection.SetOwner(System.Windows.Forms.Ribbon)">
            <summary>
            Sets the value of the Owner Property
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanelCollection.SetOwnerTab(System.Windows.Forms.RibbonTab)">
            <summary>
            Sets the value of the OwnerTab Property
            </summary>
            <param name="onwerTab"></param>
        </member>
        <member name="P:System.Windows.Forms.RibbonPanelCollection.Owner">
            <summary>
            Gets the Ribbon that contains this panel collection
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonPanelCollection.OwnerTab">
            <summary>
            Gets the RibbonTab that contains this panel collection
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonPanelFlowDirection">
            <summary>
            Represents possible flow directions of items on the panels
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonPanelFlowDirection.Left">
            <summary>
            Layout of items flows to the left, then down
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonPanelFlowDirection.Right">
            <summary>
            Layout of items flows to the Right, then down
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonPanelFlowDirection.Bottom">
            <summary>
            Layout of items flows to the bottom, then to the right
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonPanelPopup.IgnoreNextClickDeactivation">
            <summary>
            Prevents the form from being hidden the next time the mouse clicks on the form.
            It is useful for reacting to clicks of items inside items.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonPanelPopup.Panel">
            <summary>
            Gets the panel related to the form
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonPanelRenderEventArgs.Panel">
            <summary>
            Gets or sets the panel related to the events
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonPanelRenderEventArgs.Canvas">
            <summary>
            Gets or sets the control where the panel is being rendered
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonElementSizeMode">
            <summary>
            Represents the size modes that a RibbonElement can be
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonElementSizeMode.DropDown">
            <summary>
            The item is being shown on a dropdown
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonElementSizeMode.Large">
            <summary>
            Maximum size the element can reach
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonElementSizeMode.Medium">
            <summary>
            A medium size for the element when not much space is available
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonElementSizeMode.Compact">
            <summary>
            The minimum size the element can be
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonElementSizeMode.Overflow">
            <summary>
            The item doesn't fit as compact, so it must be shown as a single button
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonElementSizeMode.None">
            <summary>
            No size mode specified
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonPopupManager">
            <summary>
            Manages opened popups
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonPopupManager.Register(System.Windows.Forms.RibbonPopup)">
            <summary>
            Registers a popup existance
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPopupManager.Unregister(System.Windows.Forms.RibbonPopup)">
            <summary>
            Unregisters a popup from existance
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPopupManager.FeedHookClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Feeds a click generated on the mouse hook
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPopupManager.FeedMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Feeds mouse Wheel. If applied on a IScrollableItem it's sended to it
            </summary>
            <param name="e"></param>
            <returns>True if handled. False otherwise</returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonPopupManager.DismissChildren(System.Windows.Forms.RibbonPopup,System.Windows.Forms.RibbonPopupManager.DismissReason)">
            <summary>
            Closes all children of specified pop-up
            </summary>
            <param name="parent">Pop-up of which children will be closed</param>
            <param name="reason">Reason for dismissing</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPopupManager.Dismiss(System.Windows.Forms.RibbonPopupManager.DismissReason)">
            <summary>
            Closes all currently registered pop-ups
            </summary>
            <param name="reason"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPopupManager.Dismiss(System.Windows.Forms.RibbonPopup,System.Windows.Forms.RibbonPopupManager.DismissReason)">
            <summary>
            Closes specified pop-up and all its descendants
            </summary>
            <param name="startPopup">Pop-up to close (and its descendants)</param>
            <param name="reason">Reason for closing</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonPopupManager.Dismiss(System.Int32,System.Windows.Forms.RibbonPopupManager.DismissReason)">
            <summary>
            Closes pop-up of the specified index and all its descendants
            </summary>
            <param name="startPopup">Index of the pop-up to close</param>
            <param name="reason">Reason for closing</param>
        </member>
        <member name="P:System.Windows.Forms.RibbonPopupManager.LastPopup">
            <summary>
            Gets the last pop-up of the collection
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonPopupManager.DismissReason">
            <summary>
            Specifies reasons why pop-ups can be dismissed
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonPopupManager.DismissReason.ItemClicked">
            <summary>
            An item has been clicked
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonPopupManager.DismissReason.AppClicked">
            <summary>
            The app has been clicked
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonPopupManager.DismissReason.NewPopup">
            <summary>
            A new popup is showing and will hide sibling's popups
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonPopupManager.DismissReason.AppFocusChanged">
            <summary>
            The aplication window has been deactivated
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonPopupManager.DismissReason.EscapePressed">
            <summary>
            User has pressed escape on the keyboard
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonProfesionalRendererColorTable.Caption1">
            <summary>
            Caption bar is made of 4 rectangles height of each is indicated below
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonProfesionalRendererColorTable.OrbBackgroundDark">
            <summary>
            Orb colors in normal state
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonProfesionalRendererColorTable.OrbSelectedBackgroundDark">
            <summary>
            Orb colors in selected state
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonProfesionalRendererColorTable.OrbPressedBackgroundDark">
            <summary>
            Orb colors in pressed state
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonProfesionalRendererColorTable.OrbButtonText">
            <summary>
            2010 style Orb colors
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonRenderer">
            <summary>
            Provides render functionallity for the Ribbon control
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:System.Windows.Forms.RibbonRenderer.MultiplyColorMatrix(System.Single[][],System.Single[][])">
            <summary>
            Multiplies the color matrix (Extracted from .NET Framework
            </summary>
            <param name="matrix1"></param>
            <param name="matrix2"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonRenderer.CreateDisabledImage(System.Drawing.Image)">
            <summary>
            Creates the disabled image for the specified Image
            </summary>
            <param name="normalImage"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonRenderer.OnRenderOrbDropDownBackground(System.Windows.Forms.RibbonOrbDropDownEventArgs)">
            <summary>
            Renders the Ribbon Orb's DropDown background
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonRenderer.OnRenderRibbonCaptionBar(System.Windows.Forms.RibbonRenderEventArgs)">
            <summary>
            Renders the Ribbon's caption bar
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonRenderer.OnRenderRibbonOrb(System.Windows.Forms.RibbonRenderEventArgs)">
            <summary>
            Renders the orb of the ribbon
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonRenderer.OnRenderRibbonQuickAccessToolbarBackground(System.Windows.Forms.RibbonRenderEventArgs)">
            <summary>
            Renders the background of the QuickAccess toolbar
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonRenderer.OnRenderRibbonBackground(System.Windows.Forms.RibbonRenderEventArgs)">
            <summary>
            Renders the Ribbon's background
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonRenderer.OnRenderRibbonTab(System.Windows.Forms.RibbonTabRenderEventArgs)">
            <summary>
            Renders a RibbonTab
            </summary>
            <param name="e">Event data and paint tools</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonRenderer.OnRenderRibbonItem(System.Windows.Forms.RibbonItemRenderEventArgs)">
            <summary>
            Renders a RibbonItem
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonRenderer.OnRenderRibbonTabContentBackground(System.Windows.Forms.RibbonTabRenderEventArgs)">
            <summary>
            Renders the background of the content of the specified tab
            </summary>
            <param name="e">Event data and paint tools</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonRenderer.OnRenderRibbonPanelBackground(System.Windows.Forms.RibbonPanelRenderEventArgs)">
            <summary>
            Renders the background of the specified ribbon panel
            </summary>
            <param name="e">Event data and paint tools</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonRenderer.OnRenderRibbonTabText(System.Windows.Forms.RibbonTabRenderEventArgs)">
            <summary>
            Renders the text of the tab specified on the event
            </summary>
            <param name="e">Event data and paint tools</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonRenderer.OnRenderRibbonItemText(System.Windows.Forms.RibbonTextEventArgs)">
            <summary>
            Renders the text of the item specified on the event
            </summary>
            <param name="e">Event data and paint tools</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonRenderer.OnRenderRibbonItemBorder(System.Windows.Forms.RibbonItemRenderEventArgs)">
            <summary>
            Renders the border of the item, after the text and image of the item
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonRenderer.OnRenderRibbonItemImage(System.Windows.Forms.RibbonItemBoundsEventArgs)">
            <summary>
            Renders the image of the item specified on the event
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonRenderer.OnRenderRibbonPanelText(System.Windows.Forms.RibbonPanelRenderEventArgs)">
            <summary>
            Renders the text of the specified panel
            </summary>
            <param name="e">Event data and paint tools</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonRenderer.OnRenderDropDownBackground(System.Windows.Forms.RibbonCanvasEventArgs)">
            <summary>
            Renders the background of a dropdown
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonRenderer.OnRenderPanelPopupBackground(System.Windows.Forms.RibbonCanvasEventArgs)">
            <summary>
            Renders the background of a panel background
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonRenderer.OnRenderTabScrollButtons(System.Windows.Forms.RibbonTabRenderEventArgs)">
            <summary>
            Call to draw the scroll buttons on the tab
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonRenderer.OnRenderScrollbar(System.Drawing.Graphics,System.Windows.Forms.Control)">
            <summary>
            Call to draw the scrollbar on the Control
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonRenderer.OnRenderToolTipBackground(System.Windows.Forms.RibbonToolTipRenderEventArgs)">
            <summary>
            Call to draw the Tooltip
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonRenderer.OnRenderToolTipText(System.Windows.Forms.RibbonToolTipRenderEventArgs)">
            <summary>
            Renders the text of the Tooltip specified on the event
            </summary>
            <param name="e">Event data and paint tools</param>
        </member>
        <member name="P:System.Windows.Forms.RibbonRenderer.DisabledImageColorMatrix">
            <summary>
            Gets the disabled image color matrix
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.RoundRectangle(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Creates a rectangle with rounded corners
            </summary>
            <param name="r"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.RoundRectangle(System.Drawing.Rectangle,System.Int32,System.Windows.Forms.RibbonProfessionalRenderer.Corners)">
            <summary>
            Creates a rectangle with the specified corners rounded
            </summary>
            <param name="r"></param>
            <param name="radius"></param>
            <param name="corners"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.GradientRect(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Draws a rectangle with a vertical gradient
            </summary>
            <param name="g"></param>
            <param name="r"></param>
            <param name="northColor"></param>
            <param name="southColor"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawPressedShadow(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws a shadow that indicates that the element is pressed
            </summary>
            <param name="g"></param>
            <param name="r"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawArrow(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Windows.Forms.RibbonArrowDirection)">
            <summary>
            Draws an arrow on the specified bounds
            </summary>
            <param name="g"></param>
            <param name="bounds"></param>
            <param name="c"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawArrowShaded(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.RibbonArrowDirection,System.Boolean)">
            <summary>
            Draws the pair of arrows that make a shadded arrow, centered on the specified bounds
            </summary>
            <param name="g"></param>
            <param name="b"></param>
            <param name="d"></param>
            <param name="enabled"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.CenterOn(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Centers the specified rectangle on the specified container
            </summary>
            <param name="container"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawGripDot(System.Drawing.Graphics,System.Drawing.Point)">
            <summary>
            Draws a dot of the grip
            </summary>
            <param name="g"></param>
            <param name="location"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.CreateCompleteTabPath(System.Windows.Forms.RibbonTab)">
            <summary>
            Creates the path of the tab and its contents
            </summary>
            <param name="tab"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.CreateTabPath(System.Windows.Forms.RibbonTab)">
            <summary>
            Creates the path of the tab and its contents
            </summary>
            <param name="tab"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawCompleteTab(System.Windows.Forms.RibbonTabRenderEventArgs)">
            <summary>
            Draws a complete tab
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawTabNormal(System.Windows.Forms.RibbonTabRenderEventArgs)">
            <summary>
            Draws a complete tab
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawTabSelected(System.Windows.Forms.RibbonTabRenderEventArgs)">
            <summary>
            Draws a selected tab
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawTabPressed(System.Windows.Forms.RibbonTabRenderEventArgs)">
            <summary>
            Draws a pressed tab
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawTabActive(System.Windows.Forms.RibbonTabRenderEventArgs)">
            <summary>
            Draws an active tab
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawTabMinimized(System.Windows.Forms.RibbonTabRenderEventArgs)">
            <summary>
            Draws a selected tab
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawPanelNormal(System.Windows.Forms.RibbonPanelRenderEventArgs)">
            <summary>
            Draws a panel in normal state (unselected)
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawPanelSelected(System.Windows.Forms.RibbonPanelRenderEventArgs)">
            <summary>
            Draws a panel in selected state
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawPanelOverflowNormal(System.Windows.Forms.RibbonPanelRenderEventArgs)">
            <summary>
            Draws an overflown panel in normal state
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawPannelOveflowSelected(System.Windows.Forms.RibbonPanelRenderEventArgs)">
            <summary>
            Draws an overflown panel in selected state
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawPanelOverflowPressed(System.Windows.Forms.RibbonPanelRenderEventArgs)">
            <summary>
            Draws an overflown panel in pressed state
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawPanelOverflowImage(System.Windows.Forms.RibbonPanelRenderEventArgs)">
            <summary>
            Draws the image of the panel when collapsed
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.ButtonCorners(System.Windows.Forms.RibbonButton)">
            <summary>
            Gets the corners to round on the specified button
            </summary>
            <param name="r"></param>
            <param name="button"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.ButtonFaceRounding(System.Windows.Forms.RibbonButton)">
            <summary>
            Determines buttonface corners
            </summary>
            <param name="button"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.ButtonDdRounding(System.Windows.Forms.RibbonButton)">
            <summary>
            Determines button's dropDown corners
            </summary>
            <param name="button"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawOrbOptionButton(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the orb's option buttons background
            </summary>
            <param name="g"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.RibbonProfessionalRenderer.Corners)">
            <summary>
            Draws a regular button in normal state 
            </summary>
            <param name="e"></param>
            <param name="button"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawButtonDropDownArrow(System.Drawing.Graphics,System.Windows.Forms.RibbonButton,System.Drawing.Rectangle)">
            <summary>
            Draws the arrow of buttons
            </summary>
            <param name="g"></param>
            <param name="button"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawButtonDisabled(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.RibbonProfessionalRenderer.Corners)">
            <summary>
            Draws a regular button in disabled state 
            </summary>
            <param name="e"></param>
            <param name="button"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawButtonPressed(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.RibbonProfessionalRenderer.Corners)">
            <summary>
            Draws a regular button in pressed state
            </summary>
            <param name="e"></param>
            <param name="button"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawButtonSelected(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.RibbonProfessionalRenderer.Corners)">
            <summary>
            Draws a regular buttton in selected state
            </summary>
            <param name="e"></param>
            <param name="button"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawButtonPressed(System.Drawing.Graphics,System.Windows.Forms.RibbonButton)">
            <summary>
            Draws the button as pressed
            </summary>
            <param name="g"></param>
            <param name="button"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawButtonChecked(System.Drawing.Graphics,System.Windows.Forms.RibbonButton)">
            <summary>
            Draws the button as Checked
            </summary>
            <param name="g"></param>
            <param name="button"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawButtonChecked(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.RibbonProfessionalRenderer.Corners)">
            <summary>
            Draws the button as checked
            </summary>
            <param name="g"></param>
            <param name="button"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawButtonSelected(System.Drawing.Graphics,System.Windows.Forms.RibbonButton)">
            <summary>
            Draws the button as a selected button
            </summary>
            <param name="g"></param>
            <param name="button"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawSplitButton(System.Windows.Forms.RibbonItemRenderEventArgs,System.Windows.Forms.RibbonButton)">
            <summary>
            Draws a SplitDropDown button in normal state
            </summary>
            <param name="e"></param>
            <param name="button"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawSplitButtonPressed(System.Windows.Forms.RibbonItemRenderEventArgs,System.Windows.Forms.RibbonButton)">
            <summary>
            Draws a SplitDropDown button in pressed state
            </summary>
            <param name="e"></param>
            <param name="button"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawSplitButtonSelected(System.Windows.Forms.RibbonItemRenderEventArgs,System.Windows.Forms.RibbonButton)">
            <summary>
            Draws a SplitDropDown button in selected state
            </summary>
            <param name="e"></param>
            <param name="button"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawSplitButtonDropDownPressed(System.Windows.Forms.RibbonItemRenderEventArgs,System.Windows.Forms.RibbonButton)">
            <summary>
            Draws a SplitDropDown button with the dropdown area pressed
            </summary>
            <param name="e"></param>
            <param name="button"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawSplitButtonDropDownSelected(System.Windows.Forms.RibbonItemRenderEventArgs,System.Windows.Forms.RibbonButton)">
            <summary>
            Draws a SplitDropDown button with the dropdown area selected
            </summary>
            <param name="e"></param>
            <param name="button"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawItemGroup(System.Windows.Forms.RibbonItemRenderEventArgs,System.Windows.Forms.RibbonItemGroup)">
            <summary>
            Draws the background of the specified  RibbonItemGroup
            </summary>
            <param name="e"></param>
            <param name="?"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawItemGroupBorder(System.Windows.Forms.RibbonItemRenderEventArgs,System.Windows.Forms.RibbonItemGroup)">
            <summary>
            Draws the background of the specified  RibbonItemGroup
            </summary>
            <param name="e"></param>
            <param name="?"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawTextBoxDisabled(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws a disabled textbox
            </summary>
            <param name="g"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawTextBoxUnselected(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws an unselected textbox
            </summary>
            <param name="g"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawTextBoxSelected(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws an unselected textbox
            </summary>
            <param name="g"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawOrb(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Image,System.Boolean,System.Boolean)">
            <summary>
            Draws the orb on the specified state
            </summary>
            <param name="g">Device to draw</param>
            <param name="ribbon">Ribbon that the orb belongs to</param>
            <param name="r">Layout rectangle for the orb</param>
            <param name="selected">Specifies if the orb should be drawn as selected</param>
            <param name="pressed">Specifies if the orb should be drawn as pressed</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawOrbNormal(System.Windows.Forms.RibbonRenderEventArgs)">
            <summary>
            Draws the orb button in a normal state
            </summary>
            <param name="e"></param>
            <param name="button"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawOrbSelected(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.RibbonProfessionalRenderer.Corners)">
            <summary>
            Draws the orb button in a selected state
            </summary>
            <param name="e"></param>
            <param name="button"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonProfessionalRenderer.DrawOrbPressed(System.Windows.Forms.RibbonRenderEventArgs)">
            <summary>
            Draws the orb button in pressed state
            </summary>
            <param name="e"></param>
            <param name="button"></param>
        </member>
        <member name="T:System.Windows.Forms.RibbonQuickAccessToolbar">
            <summary>
            Represents a quick access toolbar hosted on the Ribbon
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonQuickAccessToolbar.SuperBounds">
            <summary>
            Gets the bounds of the toolbar including the graphic adornments
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonQuickAccessToolbar.DropDownButton">
            <summary>
            Gets the dropdown button
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonQuickAccessToolbar.Padding">
            <summary>
            Gets or sets the padding (internal) of the toolbar
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonQuickAccessToolbar.Margin">
            <summary>
            Gets or sets the margin (external) of the toolbar
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonQuickAccessToolbar.MenuButtonVisible">
            <summary>
            Gets or sets a value indicating if the button that shows the menu of the 
            QuickAccess toolbar should be visible
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonQuickAccessToolbar.Items">
            <summary>
            Gets the 
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonQuickAccessToolbarItemCollection.#ctor(System.Windows.Forms.RibbonQuickAccessToolbar)">
            <summary>
            Creates a new collection
            </summary>
            <param name="ownerGroup"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonQuickAccessToolbarItemCollection.Add(System.Windows.Forms.RibbonItem)">
            <summary>
            Adds the specified item to the collection
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonQuickAccessToolbarItemCollection.AddRange(System.Collections.Generic.IEnumerable{System.Windows.Forms.RibbonItem})">
            <summary>
            Adds the specified range of items
            </summary>
            <param name="items">Items to add</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonQuickAccessToolbarItemCollection.Insert(System.Int32,System.Windows.Forms.RibbonItem)">
            <summary>
            Inserts the specified item at the desired index
            </summary>
            <param name="index">Desired index of the item</param>
            <param name="item">Item to insert</param>
        </member>
        <member name="P:System.Windows.Forms.RibbonQuickAccessToolbarItemCollection.OwnerToolbar">
            <summary>
            Gets the group that owns this item collection
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonSeparator.DrawBackground">
            <summary>
            Gets or sets a value indicating if the separator should draw the divider lines
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonTab">
            <summary>
            Represents a tab that can contain RibbonPanel objects
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.#ctor(System.Windows.Forms.Ribbon,System.String)">
            <summary>
            Creates a new RibbonTab
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.SetBounds(System.Drawing.Rectangle)">
            <summary>
            This method is not relevant for this class
            </summary>
            <exception cref="T:System.NotSupportedException">Always</exception>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.SetContext(System.Windows.Forms.RibbonContext)">
            <summary>
            Sets the context of the tab
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.MeasureSize(System.Object,System.Windows.Forms.RibbonElementMeasureSizeEventArgs)">
            <summary>
            Measures the size of the tab. The tab content bounds is measured by the Ribbon control
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.SetOwner(System.Windows.Forms.Ribbon)">
            <summary>
            Sets the value of the Owner Property
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.SetPressed(System.Boolean)">
            <summary>
            Sets the value of the Pressed property
            </summary>
            <param name="pressed">Value that indicates if the element is pressed</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.SetSelected(System.Boolean)">
            <summary>
            Sets the value of the Selected property
            </summary>
            <param name="selected">Value that indicates if the element is selected</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.OnScrollRightVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.RibbonTab.ScrollRightVisibleChanged"/> event
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.OnScrollRightPressedChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.RibbonTab.ScrollRightPressedChanged"/> event
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.OnScrollRightBoundsChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.RibbonTab.ScrollRightBoundsChanged"/> event
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.OnScrollRightSelectedChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.RibbonTab.ScrollRightSelectedChanged"/> event
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.OnScrollLeftVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.RibbonTab.ScrollLeftVisibleChanged"/> event
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.OnScrollLeftPressedChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.RibbonTab.ScrollLeftPressedChanged"/> event
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.OnScrollLeftBoundsChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.RibbonTab.ScrollLeftBoundsChanged"/> event
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.OnScrollLeftSelectedChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.RibbonTab.ScrollLeftSelectedChanged"/> event
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.SetActive(System.Boolean)">
            <summary>
            Sets the tab as active without sending the message to the Ribbon
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.SetTabBounds(System.Drawing.Rectangle)">
            <summary>
            Sets the value of the TabBounds property
            </summary>
            <param name="tabBounds">Rectangle representing the bounds of the tab</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.SetTabContentBounds(System.Drawing.Rectangle)">
            <summary>
            Sets the value of the TabContentBounds
            </summary>
            <param name="tabContentBounds">Rectangle representing the bounds of the tab's content</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.GetLargerPanel(System.Windows.Forms.RibbonElementSizeMode)">
            <summary>
            Gets the panel with the larger width and the specified size mode
            </summary>
            <param name="size">Size mode of panel to search</param>
            <returns>Larger panel. Null if none of the specified size mode</returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.GetLargerPanel">
            <summary>
            Gets the panel with a larger size
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.UpdatePanelsRegions">
            <summary>
            Updates the regions of the panels and its contents
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.UpdateScrollBounds">
            <summary>
            Updates the bounds of the scroll bounds
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.ToString">
            <summary>
            Overriden. Returns a string representation of the tab
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.OnMouseEnter(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseEnter event
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.OnMouseLeave(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseLeave event
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseMove event
            </summary>
            <param name="e">Event data</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.SetScrollLeftPressed(System.Boolean)">
            <summary>
            Sets the value of the <see cref="P:System.Windows.Forms.RibbonTab.ScrollLeftPressed"/>
            </summary>
            <param name="pressed"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.SetScrollLeftSelected(System.Boolean)">
            <summary>
            Sets the value of the <see cref="P:System.Windows.Forms.RibbonTab.ScrollLeftSelected"/>
            </summary>
            <param name="selected"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.SetScrollRightPressed(System.Boolean)">
            <summary>
            Sets the value of the <see cref="P:System.Windows.Forms.RibbonTab.ScrollRightPressed"/>
            </summary>
            <param name="pressed"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.SetScrollRightSelected(System.Boolean)">
            <summary>
            Sets the value of the <see cref="P:System.Windows.Forms.RibbonTab.ScrollRightSelected"/>
            </summary>
            <param name="selected"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.ScrollLeft">
            <summary>
            Presses the lef-scroll button
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonTab.ScrollRight">
            <summary>
            Presses the left-scroll button
            </summary>
        </member>
        <member name="E:System.Windows.Forms.RibbonTab.MouseEnter">
            <summary>
            Occurs when the mouse pointer enters the panel
            </summary>
        </member>
        <member name="E:System.Windows.Forms.RibbonTab.MouseLeave">
            <summary>
            Occurs when the mouse pointer leaves the panel
            </summary>
        </member>
        <member name="E:System.Windows.Forms.RibbonTab.MouseMove">
            <summary>
            Occurs when the mouse pointer is moved inside the panel
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTab.ScrollRightVisible">
            <summary>
            Gets if the right-side scroll button is currently visible
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTab.ScrollRightSelected">
            <summary>
            Gets if the right-side scroll button is currently selected
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTab.ScrollRightPressed">
            <summary>
            Gets if the right-side scroll button is currently pressed
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTab.ScrollRightBounds">
            <summary>
            Gets if the right-side scroll button bounds
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTab.ScrollLeftVisible">
            <summary>
            Gets if the left scroll button is currently visible
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTab.ScrollLeftBounds">
            <summary>
            Gets if the left scroll button bounds
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTab.ScrollLeftSelected">
            <summary>
            Gets if the left scroll button is currently selected
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTab.ScrollLeftPressed">
            <summary>
            Gets if the left scroll button is currently pressed
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTab.Bounds">
            <summary>
            Gets the <see cref="P:System.Windows.Forms.RibbonTab.TabBounds"/> property value
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTab.Panels">
            <summary>
            Gets the collection of panels that belong to this tab
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTab.TabBounds">
            <summary>
            Gets the bounds of the little tab showing the text
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTab.TabContentBounds">
            <summary>
            Gets the bounds of the tab content on the Ribbon
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTab.Owner">
            <summary>
            Gets the Ribbon that contains this tab
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTab.Pressed">
            <summary>
            Gets a value indicating whether the state of the tab is being pressed by the mouse or a key
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTab.Selected">
            <summary>
            Gets a value indicating whether the tab is selected
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTab.Active">
            <summary>
            Gets a value indicating if the tab is currently the active tab
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTab.Tag">
            <summary>
            Gets or sets the object that contains data about the control
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTab.Value">
            <summary>
            Gets or sets the custom string data associated with this control
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTab.Text">
            <summary>
            Gets or sets the text that is to be displayed on the tab
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTab.Contextual">
            <summary>
            Gets a value indicating whether the tab is attached to a  Context
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTab.Context">
            <summary>
            Gets or sets the context this tab belongs to
            </summary>
            <remarks>Tabs on a context are highlighted with a special glow color</remarks>
        </member>
        <member name="P:System.Windows.Forms.RibbonTab.Visible">
            <summary>
            Gets or sets the visibility of this tab
            </summary>
            <remarks>Tabs on a context are highlighted with a special glow color</remarks>
        </member>
        <member name="P:System.Windows.Forms.RibbonTab.ToolTipTitle">
            <summary>
            Gets or sets the tool tip title
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTab.ToolTipIcon">
            <summary>
            Gets or sets the image of the tool tip
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTab.ToolTip">
            <summary>
            Gets or sets the tool tip text
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTab.ToolTipImage">
            <summary>
            Gets or sets the tool tip image
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonTabCollection">
            <summary>
            Represents a collection of RibbonTab objects
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonTabCollection.#ctor(System.Windows.Forms.Ribbon)">
            <summary>
            Creates a new RibbonTabCollection
            </summary>
            <param name="owner">|</param>
            <exception cref="!:AgrumentNullException">owner is null</exception>
        </member>
        <member name="M:System.Windows.Forms.RibbonTabCollection.Add(System.Windows.Forms.RibbonTab)">
            <summary>
            Adds the specified item to the collection
            </summary>
            <param name="item">Item to add to the collection</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTabCollection.AddRange(System.Collections.Generic.IEnumerable{System.Windows.Forms.RibbonTab})">
            <summary>
            Adds the specified items to the collection
            </summary>
            <param name="items">Items to add to the collection</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTabCollection.Insert(System.Int32,System.Windows.Forms.RibbonTab)">
            <summary>
            Inserts the specified item into the specified index
            </summary>
            <param name="index">Desired index of the item into the collection</param>
            <param name="item">Tab to be inserted</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonTabCollection.SetOwner(System.Windows.Forms.Ribbon)">
            <summary>
            Sets the value of the Owner Property
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTabCollection.Owner">
            <summary>
            Gets the Ribbon that owns this tab
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTabRenderEventArgs.Tab">
            <summary>
            Gets or sets the RibbonTab related to the evennt
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTextEventArgs.Color">
            <summary>
            Gets or sets the color of the text to render
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTextEventArgs.Text">
            <summary>
            Gets or sets the text to render
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTextEventArgs.Format">
            <summary>
            Gets or sets the format of the text
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonTextEventArgs.Style">
            <summary>
            Gets or sets the font style of the text
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonToolTip">
            <summary>
            CustomizedToolTip to create tooltips with Image.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonToolTip.#ctor(System.Windows.Forms.IRibbonElement)">
            <summary>
            Constructor to create instance of RibbonToolTip.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonToolTip.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonToolTip.ToolTip_Draw(System.Object,System.Windows.Forms.DrawToolTipEventArgs)">
            <summary>
            CustomizedToolTip_Draw raised when tooltip is drawn.
            </summary>
            <param name="sender">sender</param>
            <param name="e">e</param>
        </member>
        <member name="M:System.Windows.Forms.RibbonToolTip.ToolTip_Popup(System.Object,System.Windows.Forms.PopupEventArgs)">
            <summary>
            CustomizedToolTip_Popup raised when tooltip pops up.
            </summary>
            <param name="sender">sender</param>
            <param name="e">e</param>
        </member>
        <member name="E:System.Windows.Forms.RibbonToolTip.Popup">
            <summary>
            New Popup Eventhandler. Is handled before <see cref="E:System.Windows.Forms.ToolTip.Popup"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonToolTip.OwnerDraw">
            <summary>
            Gets or sets a value indicating whether the ToolTip is drawn by the operating
            system or by code that you provide.
            If true, the properties 'ToolTipIcon' and 'ToolTipTitle' will set to their default values
            and the image will display in ToolTip otherwise only text will display.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonToolTip.ToolTipIcon">
            <summary>
            Gets or sets a value that defines the type of icon to be displayed alongside
            the ToolTip text.
            Cannot set if the property 'OwnerDraw' is true.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonToolTip.ToolTipTitle">
            <summary>
            Gets or sets a title for the ToolTip window.
            Cannot set if the property 'OwnerDraw' is true.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonToolTip.ToolTipImage">
            <summary>
            Gets or sets the image for the ToolTip window.
            Cannot set if the property 'OwnerDraw' is true.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonToolTip.BackColor">
            <summary>
            Gets or sets the background color for the ToolTip.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonToolTip.ForeColor">
            <summary>
            Gets or sets the foreground color for the ToolTip.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonToolTip.AutoSize">
            <summary>
            Gets or sets a value that indicates whether the ToolTip resizes based on its text.
            true if the ToolTip automatically resizes based on its text; otherwise, false. The default is true.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonToolTip.Size">
            <summary>
            Gets or sets the size of the ToolTip.
            Valid only if the Property 'AutoSize' is false.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonToolTip.BorderColor">
            <summary>
            Gets or sets the border color for the ToolTip.
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonToolTipRenderEventArgs.Text">
            <summary>
            Gets the Text
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonToolTipRenderEventArgs.Color">
            <summary>
            Gets or sets the color of the text to render
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonToolTipRenderEventArgs.Format">
            <summary>
            Gets or sets the format of the text
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonToolTipRenderEventArgs.Style">
            <summary>
            Gets or sets the font style of the text
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonToolTipRenderEventArgs.Font">
            <summary>
            Gets or sets the font
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonToolTipRenderEventArgs.TipImage">
            <summary>
            Gets or sets the tip image
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonUpDown.MeasureHeight">
            <summary>
            Measures the suposed height of the textbox
            </summary>
            <returns></returns>
        </member>
        <member name="P:System.Windows.Forms.RibbonUpDown.UpButtonPressed">
            <summary>
            Gets a value indicating if the Up button is currently pressed
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonUpDown.DownButtonPressed">
            <summary>
            Gets a value indicating if the Down button is currently pressed
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonUpDown.UpButtonSelected">
            <summary>
            Gets a value indicating if the Up button is currently selected
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonUpDown.DownButtonSelected">
            <summary>
            Gets a value indicating if the Down button is currently selected
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonUpDown.UpButtonBounds">
            <summary>
            Gets or sets the bounds of the DropDown button
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonUpDown.DownButtonBounds">
            <summary>
            Gets or sets the bounds of the DropDown button
            </summary>
        </member>
        <member name="T:System.Windows.Forms.Set`1">
            <summary>
            There is no HashSet&lt;T&gt; available in .net 2.0.
            </summary>
            <typeparam name="T">Der Typ des Sets</typeparam>
        </member>
        <member name="T:System.Windows.Forms.RibbonHelpers.WinApi">
            <summary>
            Provides Windows Operative System specific functionallity.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonHelpers.WinApi.CS_DROPSHADOW">
            <summary>
            Enables the drop shadow effect on a window
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonHelpers.WinApi.WH_MOUSE_LL">
            <summary>
            Windows NT/2000/XP: Installs a hook procedure that monitors low-level mouse input events.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonHelpers.WinApi.WH_KEYBOARD_LL">
            <summary>
            Windows NT/2000/XP: Installs a hook procedure that monitors low-level keyboard  input events.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonHelpers.WinApi.WH_MOUSE">
            <summary>
            Installs a hook procedure that monitors mouse messages.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonHelpers.WinApi.WH_KEYBOARD">
            <summary>
            Installs a hook procedure that monitors keystroke messages.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonHelpers.WinApi.WM_NCLBUTTONDOWN">
            <summary>
            The WM_NCLBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is within the nonclient area of a window. 
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonHelpers.WinApi.WM_NCLBUTTONUP">
            <summary>
            The WM_NCLBUTTONUP message is posted when the user releases the left mouse button while the cursor is within the nonclient area of a window. 
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonHelpers.WinApi.WM_SIZE">
            <summary>
            The WM_SIZE message is sent to a window after its size has changed.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonHelpers.WinApi.WM_ERASEBKGND">
            <summary>
            The WM_ERASEBKGND message is sent when the window background must be erased (for example, when a window is resized).
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonHelpers.WinApi.WM_NCCALCSIZE">
            <summary>
            The WM_NCCALCSIZE message is sent when the size and position of a window's client area must be calculated.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonHelpers.WinApi.WM_NCHITTEST">
            <summary>
            The WM_NCHITTEST message is sent to a window when the cursor moves, or when a mouse button is pressed or released.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonHelpers.WinApi.WM_NCMOUSEMOVE">
            <summary>
            The WM_NCMOUSEMOVE message is posted to a window when the cursor is moved within the nonclient area of the window. 
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonHelpers.WinApi.WM_NCMOUSELEAVE">
            <summary>
            The WM_NCMOUSELEAVE message is posted to a window when the cursor leaves the nonclient area of the window specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonHelpers.WinApi.BI_RGB">
            <summary>
            An uncompressed format.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonHelpers.WinApi.DIB_RGB_COLORS">
            <summary>
            The BITMAPINFO structure contains an array of literal RGB values.
            </summary>
        </member>
        <member name="F:System.Windows.Forms.RibbonHelpers.WinApi.SRCCOPY">
            <summary>
            Copies the source rectangle directly to the destination rectangle.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.WinApi.ToAscii(System.Int32,System.Int32,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            The ToAscii function translates the specified virtual-key code and keyboard state to the corresponding character or characters.
            </summary>
            <param name="uVirtKey"></param>
            <param name="uScanCode"></param>
            <param name="lpbKeyState"></param>
            <param name="lpwTransKey"></param>
            <param name="fuState"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.WinApi.GetKeyboardState(System.Byte[])">
            <summary>
            The GetKeyboardState function copies the status of the 256 virtual keys to the specified buffer.
            </summary>
            <param name="pbKeyState"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.WinApi.GetKeyState(System.Int32)">
            <summary>
            This function retrieves the status of the specified virtual key. The status specifies whether the key is up, down, or toggled on or off — alternating each time the key is pressed. 
            </summary>
            <param name="vKey"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.WinApi.SetWindowsHookEx(System.Int32,System.Windows.Forms.RibbonHelpers.GlobalHook.HookProcCallBack,System.IntPtr,System.Int32)">
            <summary>
            Installs an application-defined hook procedure into a hook chain
            </summary>
            <param name="idHook"></param>
            <param name="lpfn"></param>
            <param name="hInstance"></param>
            <param name="threadId"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.WinApi.UnhookWindowsHookEx(System.Int32)">
            <summary>
            Removes a hook procedure installed in a hook chain by the SetWindowsHookEx function. 
            </summary>
            <param name="idHook"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.WinApi.CallNextHookEx(System.Int32,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Passes the hook information to the next hook procedure in the current hook chain
            </summary>
            <param name="idHook"></param>
            <param name="nCode"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.WinApi.GetDC(System.IntPtr)">
            <summary>
            This function retrieves a handle to a display device context (DC) for the client area of the specified window.
            </summary>
            <param name="hdc"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.WinApi.SaveDC(System.IntPtr)">
            <summary>
            The SaveDC function saves the current state of the specified device context (DC) by copying data describing selected objects and graphic modes
            </summary>
            <param name="hdc"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.WinApi.ReleaseDC(System.IntPtr,System.Int32)">
            <summary>
            This function releases a device context (DC), freeing it for use by other applications. The effect of ReleaseDC depends on the type of device context.
            </summary>
            <param name="hdc"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.WinApi.DrawThemeTextEx(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Windows.Forms.RibbonHelpers.WinApi.RECT@,System.Windows.Forms.RibbonHelpers.WinApi.DTTOPTS@)">
            <summary>
            Draws text using the color and font defined by the visual style. Extends DrawThemeText by allowing additional text format options.
            </summary>
            <param name="hTheme"></param>
            <param name="hdc"></param>
            <param name="iPartId"></param>
            <param name="iStateId"></param>
            <param name="text"></param>
            <param name="iCharCount"></param>
            <param name="dwFlags"></param>
            <param name="pRect"></param>
            <param name="pOptions"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.WinApi.DrawThemeText(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Windows.Forms.RibbonHelpers.WinApi.RECT@)">
            <summary>
            Draws text using the color and font defined by the visual style.
            </summary>
            <param name="hTheme"></param>
            <param name="hdc"></param>
            <param name="iPartId"></param>
            <param name="iStateId"></param>
            <param name="text"></param>
            <param name="iCharCount"></param>
            <param name="dwFlags1"></param>
            <param name="dwFlags2"></param>
            <param name="pRect"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.WinApi.CreateDIBSection(System.IntPtr,System.Windows.Forms.RibbonHelpers.WinApi.BITMAPINFO@,System.UInt32,System.Int32,System.IntPtr,System.UInt32)">
            <summary>
            The CreateDIBSection function creates a DIB that applications can write to directly.
            </summary>
            <param name="hdc"></param>
            <param name="pbmi"></param>
            <param name="iUsage"></param>
            <param name="ppvBits"></param>
            <param name="hSection"></param>
            <param name="dwOffset"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.WinApi.BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.UInt32)">
            <summary>
            This function transfers pixels from a specified source rectangle to a specified destination rectangle, altering the pixels according to the selected raster operation (ROP) code.
            </summary>
            <param name="hdc"></param>
            <param name="nXDest"></param>
            <param name="nYDest"></param>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <param name="hdcSrc"></param>
            <param name="nXSrc"></param>
            <param name="nYSrc"></param>
            <param name="dwRop"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.WinApi.CreateCompatibleDC(System.IntPtr)">
            <summary>
            This function creates a memory device context (DC) compatible with the specified device.
            </summary>
            <param name="hDC"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.WinApi.SelectObject(System.IntPtr,System.IntPtr)">
            <summary>
            This function selects an object into a specified device context. The new object replaces the previous object of the same type.
            </summary>
            <param name="hDC"></param>
            <param name="hObject"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.WinApi.DeleteObject(System.IntPtr)">
            <summary>
            The DeleteObject function deletes a logical pen, brush, font, bitmap, region, or palette, freeing all system resources associated with the object. After the object is deleted, the specified handle is no longer valid.
            </summary>
            <param name="hObject"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.WinApi.DeleteDC(System.IntPtr)">
            <summary>
            The DeleteDC function deletes the specified device context (DC).
            </summary>
            <param name="hdc"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.WinApi.DwmExtendFrameIntoClientArea(System.IntPtr,System.Windows.Forms.RibbonHelpers.WinApi.MARGINS@)">
            <summary>
            Extends the window frame behind the client area.
            </summary>
            <param name="hdc"></param>
            <param name="marInset"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.WinApi.DwmDefWindowProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            Default window procedure for Desktop Window Manager (DWM) hit-testing within the non-client area.
            </summary>
            <param name="hwnd"></param>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.WinApi.DwmIsCompositionEnabled(System.Int32@)">
            <summary>
            Obtains a value that indicates whether Desktop Window Manager (DWM) composition is enabled.
            </summary>
            <param name="pfEnabled"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.WinApi.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Sends the specified message to a window or windows
            </summary>
            <param name="hWnd"></param>
            <param name="Msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.WinApi.PostMessage(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sends the specified message to a window or windows
            </summary>
            <param name="hWnd">handle to destination window</param>
            <param name="Msg">message</param>
            <param name="wParam">first message parameter</param>
            <param name="lParam">second message parameter</param>
            <returns>none</returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.WinApi.InvalidateNC(System.IntPtr)">
            <summary>
            Invalidates non-client area
            </summary>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.WinApi.HiWord(System.Int32)">
            <summary>
            Equivalent to the HiWord C Macro
            </summary>
            <param name="dwValue"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.WinApi.LoWord(System.Int32)">
            <summary>
            Equivalent to the LoWord C Macro
            </summary>
            <param name="dwValue"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.WinApi.MakeLParam(System.Int32,System.Int32)">
            <summary>
            Equivalent to the MakeLParam C Macro
            </summary>
            <param name="LoWord"></param>
            <param name="HiWord"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.WinApi.FillForGlass(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Fills an area for glass rendering
            </summary>
            <param name="gph"></param>
            <param name="rgn"></param>
        </member>
        <member name="M:System.Windows.Forms.RibbonHelpers.WinApi.DrawTextOnGlass(System.IntPtr,System.String,System.Drawing.Font,System.Drawing.Rectangle,System.Int32)">
            <summary>
            Draws theme text on glass.
            </summary>
            <param name="hwnd"></param>
            <param name="text"></param>
            <param name="font"></param>
            <param name="ctlrct"></param>
            <param name="iglowSize"></param>
            <remarks>This method is courtesy of 版权所有 (I hope the name's right)</remarks>
        </member>
        <member name="P:System.Windows.Forms.RibbonHelpers.WinApi.IsWindows">
            <summary>
            Gets if the current OS is Windows NT or later
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonHelpers.WinApi.IsVista">
            <summary>
            Gets a value indicating if operating system is vista or higher
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonHelpers.WinApi.IsXP">
            <summary>
            Gets a value indicating if operating system is xp or higher
            </summary>
        </member>
        <member name="P:System.Windows.Forms.RibbonHelpers.WinApi.IsGlassEnabled">
            <summary>
            Gets if computer is glass capable and enabled
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonHelpers.WinApi.MouseLLHookStruct">
            <summary>
            Contains information about a mouse event passed to a WH_MOUSE hook procedure
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonHelpers.WinApi.KeyboardLLHookStruct">
            <summary>
            Contains information about a low-level keyboard input event.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonHelpers.WinApi.MouseHookStruct">
            <summary>
            Contains information about a mouse event passed to a WH_MOUSE hook procedure
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonHelpers.WinApi.POINT">
            <summary>
            Represents a point
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonHelpers.WinApi.DTTOPTS">
            <summary>
            Defines the options for the DrawThemeTextEx function.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonHelpers.WinApi.RGBQUAD">
            <summary>
            This structure describes a color consisting of relative intensities of red, green, and blue.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonHelpers.WinApi.BITMAPINFOHEADER">
            <summary>
            This structure contains information about the dimensions and color format of a device-independent bitmap (DIB).
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonHelpers.WinApi.BITMAPINFO">
            <summary>
            This structure defines the dimensions and color information of a Windows-based device-independent bitmap (DIB).
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonHelpers.WinApi.RECT">
            <summary>
            Describes the width, height, and location of a rectangle.
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonHelpers.WinApi.NCCALCSIZE_PARAMS">
            <summary>
            The NCCALCSIZE_PARAMS structure contains information that an application can use 
            while processing the WM_NCCALCSIZE message to calculate the size, position, and 
            valid contents of the client area of a window. 
            </summary>
        </member>
        <member name="T:System.Windows.Forms.RibbonHelpers.WinApi.MARGINS">
            <summary>
            Used to specify margins of a window
            </summary>
        </member>
        <member name="T:DevGrep.DataSets.dsRegEx">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:DevGrep.DataSets.dsRegEx.ExpressionDataDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:DevGrep.DataSets.dsRegEx.ExpressionDataRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:DevGrep.DataSets.dsRegEx.ExpressionDataRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:DevGrep.DataSets.dsSavedFile">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:DevGrep.DataSets.dsSavedFile.SavedSearchDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:DevGrep.DataSets.dsSavedFile.SavedSearchRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:DevGrep.DataSets.dsSavedFile.SavedSearchRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="F:DevGrep.formLicense.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevGrep.formLicense.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DevGrep.formLicense.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DevGrep.formMainSearch">
            <summary>
            Class formMainSearch
            </summary>
        </member>
        <member name="M:DevGrep.formMainSearch.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:DevGrep.formMainSearch"/> class.
            </summary>
        </member>
        <member name="M:DevGrep.formMainSearch.roobQuit_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the roobQuit control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DevGrep.formMainSearch.formMainSearch_Load(System.Object,System.EventArgs)">
            <summary>
            Handles the Load event of the formMainSearch control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DevGrep.formMainSearch.GenerateThemeXmlFile">
            <summary>
            Generates the theme XML file.
            </summary>
        </member>
        <member name="M:DevGrep.formMainSearch.InitSavedTheme">
            <summary>
            Inits the saved theme.
            </summary>
        </member>
        <member name="M:DevGrep.formMainSearch.DefaultRegEntries">
            <summary>
            Creates default registry entries if not found.
            </summary>
        </member>
        <member name="M:DevGrep.formMainSearch.UpdateToolbar(DevGrep.Classes.CurrentAction)">
            <summary>
            Updates buttons on the toolbar when various events happen.
            </summary>
            <param name="ca">CurrentAction enumeration</param>
        </member>
        <member name="M:DevGrep.formMainSearch.EnumFileSystem(System.String)">
            <summary>
            Scans the file system getting a list of all matching files.
            </summary>
            <param name="FilePath">Path to files.</param>
        </member>
        <member name="M:DevGrep.formMainSearch.LaunchEditorFile(System.String)">
            <summary>
            Launch editor given filename
            </summary>
            <param name="FileName">File to open</param>
        </member>
        <member name="M:DevGrep.formMainSearch.DisplayMatchedLines(DevGrep.Classes.SearchTask)">
            <summary>
            Displays all matching lines as Rich Text
            </summary>
            <param name="searchTask">SearchTask Object</param>
        </member>
        <member name="M:DevGrep.formMainSearch.OpenFile(System.String,System.Boolean)">
            <summary>
            Open file
            </summary>
            <param name="fileName">Setting file to open</param>
            <param name="AutoSearch">Determines if the search will start automatically</param>
        </member>
        <member name="M:DevGrep.formMainSearch.printDocument1_BeginPrint(System.Object,System.Drawing.Printing.PrintEventArgs)">
            <summary>
            Begin Print
            </summary>
            <param name="sender">object</param>
            <param name="e">eventargs</param>
        </member>
        <member name="M:DevGrep.formMainSearch.printDocument1_EndPrint(System.Object,System.Drawing.Printing.PrintEventArgs)">
            <summary>
            EndPrint
            </summary>
            <param name="sender">object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevGrep.formMainSearch.printDocument1_PrintPage(System.Object,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Print Page Handler
            </summary>
            <param name="sender">object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevGrep.formMainSearch.DisplayMatchedSearches(DevGrep.Classes.SearchTaskCollection)">
            <summary>
            Displays the search results within the RichText box.
            </summary>
            <remarks>These search results are a combination of all files.</remarks>
            <param name="searchTaskCollection"></param>
        </member>
        <member name="F:DevGrep.formMainSearch.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevGrep.formMainSearch.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DevGrep.formMainSearch.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DevGrep.formMainSearch.PerformReplace(System.String,System.String)">
            <summary>
            Performs the actual replacement operation
            </summary>
            <param name="targetFile">Target File</param>
            <param name="replaceText">Text to replace with.</param>
        </member>
        <member name="F:DevGrep.formRegister.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevGrep.formRegister.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DevGrep.formRegister.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:DevGrep.Forms.AboutBox1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevGrep.Forms.AboutBox1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevGrep.Forms.AboutBox1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:DevGrep.Forms.dlgHelp.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevGrep.Forms.dlgHelp.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DevGrep.Forms.dlgHelp.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:DevGrep.Forms.formAddIndex.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevGrep.Forms.formAddIndex.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DevGrep.Forms.formAddIndex.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:DevGrep.Forms.formIndexSearchAssistant.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevGrep.Forms.formIndexSearchAssistant.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DevGrep.Forms.formIndexSearchAssistant.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DevGrep.Forms.frmDBSeartchAssist">
            <summary>
            Summary description for frmDBSeartchAssist.
            </summary>
        </member>
        <member name="F:DevGrep.Forms.frmDBSeartchAssist.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevGrep.Forms.frmDBSeartchAssist.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevGrep.Forms.frmDBSeartchAssist.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DevGrep.Forms.frmExportFields">
            <summary>
            Summary description for frmExportFields.
            </summary>
        </member>
        <member name="F:DevGrep.Forms.frmExportFields.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevGrep.Forms.frmExportFields.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevGrep.Forms.frmExportFields.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DevGrep.Forms.frmPreferences">
            <summary>
            Summary description for frmPreferences.
            </summary>
        </member>
        <member name="M:DevGrep.Forms.frmPreferences.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevGrep.Forms.frmPreferences.InitValues">
            <summary>
            InitValues
            </summary>
        </member>
        <member name="M:DevGrep.Forms.frmPreferences.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:DevGrep.Forms.frmPreferences.Editor">
            <summary>
            Editor property
            </summary>
        </member>
        <member name="P:DevGrep.Forms.frmPreferences.ExternalEditor">
            <summary>
            ExternalEditor Property
            </summary>
        </member>
        <member name="T:DevGrep.Forms.frmRegExBuild">
            <summary>
            Summary description for frmRegExBuild.
            </summary>
        </member>
        <member name="M:DevGrep.Forms.frmRegExBuild.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevGrep.Forms.frmRegExBuild.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DevGrep.Forms.frmRegister">
            <summary>
            Summary description for frmRegister.
            </summary>
        </member>
        <member name="F:DevGrep.Forms.frmRegister.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevGrep.Forms.frmRegister.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevGrep.Forms.frmRegister.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DevGrep.Forms.frmReplace">
            <summary>
            Summary description for frmReplace.
            </summary>
        </member>
        <member name="F:DevGrep.Forms.frmReplace.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevGrep.Forms.frmReplace.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevGrep.Forms.frmReplace.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DevGrep.Forms.frmSearchAssist">
            <summary>
            Summary description for frmSearchAssist.
            </summary>
        </member>
        <member name="M:DevGrep.Forms.frmSearchAssist.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevGrep.Forms.frmSearchAssist.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DevGrep.Forms.frmSQLLogin">
            <summary>
            Summary description for frmSQLLogin.
            </summary>
        </member>
        <member name="F:DevGrep.Forms.frmSQLLogin.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevGrep.Forms.frmSQLLogin.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevGrep.Forms.frmSQLLogin.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:DevGrep.Forms.frmVisualizer.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevGrep.Forms.frmVisualizer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DevGrep.Forms.frmVisualizer.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:DevGrep.Forms.ImageButton.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevGrep.Forms.ImageButton.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DevGrep.Forms.ImageButton.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DevGrep.frmMain">
            <summary>
            Summary description for Form1.
            </summary>
        </member>
        <member name="M:DevGrep.frmMain.#ctor(System.String[])">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DevGrep.frmMain.TotalMatches">
            <summary>
            Calculates the total number of matches found in the recent search.
            </summary>
            <returns>Match total.</returns>
        </member>
        <member name="M:DevGrep.frmMain.tn_ContentClick(System.Object,System.EventArgs)">
            <summary>
            Content click display the devgrep form when the user clicks
            the content of the taskbar notifier window.
            </summary>
            <param name="sender">Object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevGrep.frmMain.ParseCmdLine(System.String[])">
            <summary>
            Parse the command line parameters
            </summary>
            <param name="args">CommandLine Args</param>
        </member>
        <member name="M:DevGrep.frmMain.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:DevGrep.frmMain.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DevGrep.frmMain.EnumFileSystem(System.String)">
            <summary>
            Scans the file system getting a list of all matching files.
            </summary>
            <param name="FilePath">Path to files.</param>
        </member>
        <member name="M:DevGrep.frmMain.ExtIsInList(System.String[],System.String)">
            <summary>
            Determines if the current extension matches one of the extensions
            in our extension array.
            </summary>
            <param name="AllExtensions">Array of acceptable extensions.</param>
            <param name="thisExt">Extension for the current file.</param>
            <returns>True if the current extension matches one in the list otherwise
            false is returned.</returns>
        </member>
        <member name="M:DevGrep.frmMain.ProcessFileSearch(System.Object)">
            <summary>
            Reads files with the correct extension in looking for matches.
            </summary>
            <param name="Parameter">SearchTask object</param>
        </member>
        <member name="M:DevGrep.frmMain.lvFiles_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            ListView Index Change
            </summary>
            <param name="sender">Object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevGrep.frmMain.DisplayMatchedLines(DevGrep.Classes.SearchTask)">
            <summary>
            Displays all matching lines as Rich Text
            </summary>
            <param name="searchTask">SearchTask Object</param>
        </member>
        <member name="M:DevGrep.frmMain.UpdateToolbar(DevGrep.Classes.CurrentAction)">
            <summary>
            Updates buttons on the toolbar when various events happen.
            </summary>
            <param name="ca">CurrentAction enumeration</param>
        </member>
        <member name="M:DevGrep.frmMain.lvFiles_DoubleClick(System.Object,System.EventArgs)">
            <summary>
            Open file
            </summary>
            <param name="sender">Object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevGrep.frmMain.DefaultRegEntries">
            <summary>
            Creates default registry entries if not found.
            </summary>
        </member>
        <member name="M:DevGrep.frmMain.LaunchEditor(System.String,System.Int32,System.Int32)">
            <summary>
            Determines what type of editor should be used and launches the editor to view
            the file.
            </summary>
            <param name="FileName">Filename to open</param>
            <param name="FileLineNumber">Line number to proceed to</param>
            <param name="ColIndex">Column to proceed to.</param>
        </member>
        <member name="M:DevGrep.frmMain.LaunchEditorFile(System.String)">
            <summary>
            Launch editor given filename
            </summary>
            <param name="FileName">File to open</param>
        </member>
        <member name="M:DevGrep.frmMain.mnuPrintPreview_Click(System.Object,System.EventArgs)">
            <summary>
            Print Preview menu was clicked
            </summary>
            <param name="sender">Object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevGrep.frmMain.mnuPrintSetup_Click(System.Object,System.EventArgs)">
            <summary>
            Print Setup was clicked
            </summary>
            <param name="sender">Object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevGrep.frmMain.mnuPrint_Click(System.Object,System.EventArgs)">
            <summary>
            Print was clicked
            </summary>
            <param name="sender">Object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevGrep.frmMain.mnuAbout_Click(System.Object,System.EventArgs)">
            <summary>
            About was clicked
            </summary>
            <param name="sender">Object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevGrep.frmMain.mnuSearchNow_Click(System.Object,System.EventArgs)">
            <summary>
            Search now
            </summary>
            <param name="sender">Object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevGrep.frmMain.mnuReplace_Click(System.Object,System.EventArgs)">
            <summary>
            Replace was clicked
            </summary>
            <param name="sender">Object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevGrep.frmMain.mnuExit_Click(System.Object,System.EventArgs)">
            <summary>
            Exit was clicked
            </summary>
            <param name="sender">Object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevGrep.frmMain.mnuFileOpen_Click(System.Object,System.EventArgs)">
            <summary>
            File | Open 
            </summary>
            <param name="sender">Object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevGrep.frmMain.mnuPreferences_Click(System.Object,System.EventArgs)">
            <summary>
            Preferences
            </summary>
            <param name="sender">Object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevGrep.frmMain.mnuViewLine_Click(System.Object,System.EventArgs)">
            <summary>
            View Line
            </summary>
            <param name="sender">Object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevGrep.frmMain.mnuViewFile_Click(System.Object,System.EventArgs)">
            <summary>
            View File
            </summary>
            <param name="sender">Object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevGrep.frmMain.mnuSave_Click(System.Object,System.EventArgs)">
            <summary>
            Save menu item was clicked.
            </summary>
            <param name="sender">Object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevGrep.frmMain.mnuOpen_Click(System.Object,System.EventArgs)">
            <summary>
            Open
            </summary>
            <param name="sender">Object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevGrep.frmMain.mnuFileProperties_Click(System.Object,System.EventArgs)">
            <summary>
            Open the property page for this file.
            </summary>
            <param name="sender">Object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevGrep.frmMain.menuOpenContaingFolder_Click(System.Object,System.EventArgs)">
            <summary>
            Open containing folder
            </summary>
            <param name="sender">Object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevGrep.frmMain.OpenFile(System.String,System.Boolean)">
            <summary>
            Open file
            </summary>
            <param name="fileName">Setting file to open</param>
            <param name="AutoSearch">Determines if the search will start automatically</param>
        </member>
        <member name="M:DevGrep.frmMain.Open_Click">
            <summary>
            Open Toolbar Button was clicked
            </summary>
        </member>
        <member name="M:DevGrep.frmMain.Print_Click">
            <summary>
            Fires when Print toolbar button is clicked.
            </summary>
        </member>
        <member name="M:DevGrep.frmMain.Replace_Click">
            <summary>
            Click handler does a replace operation.
            </summary>
        </member>
        <member name="M:DevGrep.frmMain.AgainButton_Click">
            <summary>
            Again Button Event Handler
            </summary>
        </member>
        <member name="M:DevGrep.frmMain.SearchButton_Click">
            <summary>
            Event handler that is fired when the Search toolbar button is
            clicked.
            </summary>
        </member>
        <member name="M:DevGrep.frmMain.ViewSearchResults_Click">
            <summary>
            Fires when the view search results button on the toolbar
            is clicked
            </summary>
        </member>
        <member name="M:DevGrep.frmMain.Save_Click">
            <summary>
            User clicked the Save toolbar option
            </summary>
        </member>
        <member name="M:DevGrep.frmMain.PerformReplace(System.String,System.String)">
            <summary>
            Performs the actual replacement operation
            </summary>
            <param name="targetFile">Target File</param>
            <param name="replaceText">Text to replace with.</param>
        </member>
        <member name="M:DevGrep.frmMain.printDocument1_BeginPrint(System.Object,System.Drawing.Printing.PrintEventArgs)">
            <summary>
            Begin Print
            </summary>
            <param name="sender">object</param>
            <param name="e">eventargs</param>
        </member>
        <member name="M:DevGrep.frmMain.printDocument1_EndPrint(System.Object,System.Drawing.Printing.PrintEventArgs)">
            <summary>
            EndPrint
            </summary>
            <param name="sender">object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevGrep.frmMain.printDocument1_PrintPage(System.Object,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Print Page Handler
            </summary>
            <param name="sender">object</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:DevGrep.frmMain.DisplayMatchedSearches(DevGrep.Classes.SearchTaskCollection)">
            <summary>
            Displays the search results within the RichText box.
            </summary>
            <remarks>These search results are a combination of all files.</remarks>
            <param name="searchTaskCollection"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:DevGrep.Program" -->
        <member name="M:DevGrep.Program.Main(System.String[])">
            <summary>
            The main entry point for the application.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="T:DevGrep.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.AnalyzeSpace">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.check">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.clear_filter">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.Combine16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.Compare16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.Compare32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.ComparisonTypeTitle">
            <summary>
              Looks up a localized string similar to Comparison Types.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.CSV32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.D32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.Duplicate">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.DuplicateExtensionTitle">
            <summary>
              Looks up a localized string similar to Extensions.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.Editor">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.exit16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.Export32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.ExportHTML32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.filter">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.filter_icons3">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.frmMain_NotIndexed">
            <summary>
              Looks up a localized string similar to The selected location hasn&apos;t been indexed..
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.graphhs">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.Help">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.ImageButtonAdd">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.ImageButtonDelete">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.ImageButtonEdit">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.ImageButtonOther">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.minus">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.open16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.open32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.options16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.plus">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.print32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.printpreview32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.printquick16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.printquick32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.publish32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.Replace16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.save16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.saveas32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.Search">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.Search16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.SearchAgain16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.send32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.sort_ascending">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.sort_descending">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.stop">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.uncheck">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DevGrep.Properties.Resources.unknown">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:DevGrep.SubApps.DupFileScan.Classes.AllocateNewEvent">
            <summary>
            Allocate new event
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:DevGrep.SubApps.DupFileScan.Classes.DefaultScanForFilesData">
            <summary>
            Data returned when scanning for files.
            </summary>
        </member>
        <member name="T:DevGrep.SubApps.DupFileScan.Classes.IScanForFilesData">
            <summary>
            Interface for information that should be returned when scanning for files.
            </summary>
        </member>
        <member name="P:DevGrep.SubApps.DupFileScan.Classes.IScanForFilesData.FileInfo">
            <summary>
            Gets or sets the file info.
            </summary>
            <value>The file info.</value>
        </member>
        <member name="P:DevGrep.SubApps.DupFileScan.Classes.DefaultScanForFilesData.FileInfo">
            <summary>
            Gets or sets the file info.
            </summary>
            <value>The file info.</value>
        </member>
        <member name="T:DevGrep.SubApps.DupFileScan.Classes.FileFoundEvent">
            <summary>
            File not found
            </summary>
            <param name="data">The data.</param>
            <remarks></remarks>
        </member>
        <member name="T:DevGrep.SubApps.DupFileScan.Classes.MD5Hash">
            <summary>
                Hash methods.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Classes.MD5Hash.HashFile(System.String)">
            <summary>
                Returns a SHA1 hash for a file.
            </summary>
            <param name="fileNamePath">The file name path.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Classes.MD5Hash.HashString(System.String)">
            <summary>
                Returns a SHA1 hash for a string.
            </summary>
            <param name="inString">The in string.</param>
            <returns>
                <c>String</c> object containing the SHA1 hash.
            </returns>
            <remarks></remarks>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Classes.MD5Hash.HashObjects(System.Object[])">
            <summary>
                Hashes the objects.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:DevGrep.SubApps.DupFileScan.Classes.RIPEMD160Hash">
            <summary>
                Hash methods.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Classes.RIPEMD160Hash.HashFile(System.String)">
            <summary>
                Returns a SHA1 hash for a file.
            </summary>
            <param name="fileNamePath">The file name path.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Classes.RIPEMD160Hash.HashString(System.String)">
            <summary>
                Returns a SHA1 hash for a string.
            </summary>
            <param name="inString">The in string.</param>
            <returns>
                <c>String</c> object containing the SHA1 hash.
            </returns>
            <remarks></remarks>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Classes.RIPEMD160Hash.HashObjects(System.Object[])">
            <summary>
                Hashes the objects.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:DevGrep.SubApps.DupFileScan.Classes.ScanForFiles">
            <summary>
            File scanning class
            </summary>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Classes.ScanForFiles.GetDirs(System.String)">
            <summary>
            Gets the dirs.
            </summary>
            <param name="strPath">The STR path.</param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Classes.ScanForFiles.GetFiles(System.String)">
            <summary>
            Gets the files.
            </summary>
            <param name="strPath">The STR path.</param>
            <returns></returns>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Classes.ScanForFiles.Scan">
            <summary>
            Starts the scan for files process.
            </summary>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Classes.ScanForFiles.ScanDirForDirsAndFiles(System.String)">
            <summary>
            Scans a directory for directories and files.
            </summary>
            <param name="strPath">The STR path.</param>
        </member>
        <member name="P:DevGrep.SubApps.DupFileScan.Classes.ScanForFiles.FilesList">
            <summary>
            Gets or sets the files list.
            </summary>
            <value>The files list.</value>
        </member>
        <member name="P:DevGrep.SubApps.DupFileScan.Classes.ScanForFiles.IsRecursive">
            <summary>
            Gets or sets a value indicating whether this instance is recursive.
            </summary>
            <value>
            	<c>true</c> if this instance is recursive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DevGrep.SubApps.DupFileScan.Classes.ScanForFiles.RootDir">
            <summary>
            Gets or sets the root dir.
            </summary>
            <value>The root dir.</value>
        </member>
        <member name="E:DevGrep.SubApps.DupFileScan.Classes.ScanForFiles.OnAllocateNew">
            <summary>
            Occurs when a new item is allocated.
            </summary>
        </member>
        <member name="E:DevGrep.SubApps.DupFileScan.Classes.ScanForFiles.OnDirectoryFound">
            <summary>
            Occurs when a directory is found.
            </summary>
        </member>
        <member name="E:DevGrep.SubApps.DupFileScan.Classes.ScanForFiles.OnFileFound">
            <summary>
            Occurs when a file is found
            </summary>
        </member>
        <member name="T:DevGrep.SubApps.DupFileScan.Classes.ScanningDirectoryEvent">
            <summary>
            Scanning directory event
            </summary>
            <param name="directoryName">Name of the directory.</param>
            <remarks></remarks>
        </member>
        <member name="T:DevGrep.SubApps.DupFileScan.Classes.ScanResultsList">
            <summary>
            Generic list class for storing the results of a file scan.
            </summary>
        </member>
        <member name="T:DevGrep.SubApps.DupFileScan.Classes.SearchExtensions">
            <summary>
            Class SearchExtensions
            </summary>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Classes.SearchExtensions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DevGrep.SubApps.DupFileScan.Classes.SearchExtensions"/> class.
            </summary>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Classes.SearchExtensions.SanityCheck">
            <summary>
            Look for all items required by this class.
            </summary>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Classes.SearchExtensions.CreateDefaultSaveFile">
            <summary>
            Populates this collection with default values.
            </summary>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Classes.SearchExtensions.Save">
            <summary>
            Saves this instance.
            </summary>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Classes.SearchExtensions.Load">
            <summary>
            Loads this instance.
            </summary>
            <returns>SearchExtensions.</returns>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Classes.SearchExtensions.DoesSaveFileExist">
            <summary>
            Determines if a serialized copy of this collection is found in our config folder.
            </summary>
            <returns><c>true</c> if the file is found, <c>false</c> otherwise</returns>
        </member>
        <member name="P:DevGrep.SubApps.DupFileScan.Classes.SearchExtensions.SaveFileNamePath">
            <summary>
            Gets the save file name path.
            </summary>
            <value>The save file name path.</value>
        </member>
        <member name="T:DevGrep.SubApps.DupFileScan.Classes.SHA1Hash">
            <summary>
                Hash methods.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Classes.SHA1Hash.HashFile(System.String)">
            <summary>
                Returns a SHA1 hash for a file.
            </summary>
            <param name="fileNamePath">The file name path.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Classes.SHA1Hash.HashString(System.String)">
            <summary>
                Returns a SHA1 hash for a string.
            </summary>
            <param name="inString">The in string.</param>
            <returns>
                <c>String</c> object containing the SHA1 hash.
            </returns>
            <remarks></remarks>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Classes.SHA1Hash.HashObjects(System.Object[])">
            <summary>
                Hashes the objects.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:DevGrep.SubApps.DupFileScan.Classes.SHA256Hash">
            <summary>
                Hash methods.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Classes.SHA256Hash.HashFile(System.String)">
            <summary>
                Returns a SHA1 hash for a file.
            </summary>
            <param name="fileNamePath">The file name path.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Classes.SHA256Hash.HashString(System.String)">
            <summary>
                Returns a SHA1 hash for a string.
            </summary>
            <param name="inString">The in string.</param>
            <returns>
                <c>String</c> object containing the SHA1 hash.
            </returns>
            <remarks></remarks>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Classes.SHA256Hash.HashObjects(System.Object[])">
            <summary>
                Hashes the objects.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:DevGrep.SubApps.DupFileScan.Classes.SHA384Hash">
            <summary>
                Hash methods.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Classes.SHA384Hash.HashFile(System.String)">
            <summary>
                Returns a SHA1 hash for a file.
            </summary>
            <param name="fileNamePath">The file name path.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Classes.SHA384Hash.HashString(System.String)">
            <summary>
                Returns a SHA1 hash for a string.
            </summary>
            <param name="inString">The in string.</param>
            <returns>
                <c>String</c> object containing the SHA1 hash.
            </returns>
            <remarks></remarks>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Classes.SHA384Hash.HashObjects(System.Object[])">
            <summary>
                Hashes the objects.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:DevGrep.SubApps.DupFileScan.Classes.SHA512Hash">
            <summary>
                Hash methods.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Classes.SHA512Hash.HashFile(System.String)">
            <summary>
                Returns a SHA1 hash for a file.
            </summary>
            <param name="fileNamePath">The file name path.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Classes.SHA512Hash.HashString(System.String)">
            <summary>
                Returns a SHA1 hash for a string.
            </summary>
            <param name="inString">The in string.</param>
            <returns>
                <c>String</c> object containing the SHA1 hash.
            </returns>
            <remarks></remarks>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Classes.SHA512Hash.HashObjects(System.Object[])">
            <summary>
                Hashes the objects.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="F:DevGrep.SubApps.DupFileScan.Forms.formAddFileExtensionGroup.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Forms.formAddFileExtensionGroup.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Forms.formAddFileExtensionGroup.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:DevGrep.SubApps.DupFileScan.Forms.formEditFileExtensionGroup.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Forms.formEditFileExtensionGroup.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Forms.formEditFileExtensionGroup.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:DevGrep.SubApps.DupFileScan.Forms.frmDuplicateFileScanner.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Forms.frmDuplicateFileScanner.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DevGrep.SubApps.DupFileScan.Forms.frmDuplicateFileScanner.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
    </members>
</doc>
